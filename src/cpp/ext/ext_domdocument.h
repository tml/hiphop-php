/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXT_DOMDOCUMENT_H__
#define __EXT_DOMDOCUMENT_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<
#include <libxml/parser.h>
#include <libxml/parserInternals.h>
#include <libxml/relaxng.h>
#include <libxml/tree.h>
#include <libxml/uri.h>
#include <libxml/xmlerror.h>
#include <libxml/xmlschemas.h>
#include <libxml/xmlwriter.h>
#include <libxml/xinclude.h>
#include <libxml/hash.h>
#include <libxml/c14n.h>
#include <libxml/HTMLparser.h>
#include <libxml/HTMLtree.h>
#include <libxml/xpath.h>
#include <libxml/xpathInternals.h>
#include <libxml/xpointer.h>

#include <cpp/base/base_includes.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// class DOMNode

FORWARD_DECLARE_CLASS(domnode);
class c_domnode : public ObjectData {
 public:
  BEGIN_CLASS_MAP(domnode)
  END_CLASS_MAP(domnode)
  DECLARE_CLASS(domnode, DOMNode, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domnode();
  public: ~c_domnode();
  public: void t___construct();
  public: Variant t_appendchild(CObjRef newnode);
  public: Variant t_clonenode(bool deep = false);
  public: int64 t_getlineno();
  public: bool t_hasattributes();
  public: bool t_haschildnodes();
  public: Variant t_insertbefore(CObjRef newnode, CObjRef refnode = null);
  public: bool t_isdefaultnamespace(CStrRef namespaceuri);
  public: bool t_issamenode(CObjRef node);
  public: bool t_issupported(CStrRef feature, CStrRef version);
  public: Variant t_lookupnamespaceuri(CStrRef namespaceuri);
  public: Variant t_lookupprefix(CStrRef prefix);
  public: void t_normalize();
  public: Variant t_removechild(CObjRef node);
  public: Variant t_replacechild(CObjRef newchildobj, CObjRef oldchildobj);
  public: Variant t_c14n(bool exclusive = false, bool with_comments = false, CVarRef xpath = null, CVarRef ns_prefixes = null);
  public: Variant t_c14nfile(CStrRef uri, bool exclusive = false, bool with_comments = false, CVarRef xpath = null, CVarRef ns_prefixes = null);
  public: Variant t_getnodepath();
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

 public:
  xmlNodePtr m_node;
};

///////////////////////////////////////////////////////////////////////////////
// class DOMAttr

FORWARD_DECLARE_CLASS(domattr);
class c_domattr: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domattr)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domattr)
  DECLARE_CLASS(domattr, DOMAttr, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domattr();
  public: ~c_domattr();
  public: void t___construct(CVarRef name, CVarRef value);
  public: bool t_isid();
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant name, Variant value);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMCharacterData

FORWARD_DECLARE_CLASS(domcharacterdata);
class c_domcharacterdata: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domcharacterdata)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domcharacterdata)
  DECLARE_CLASS(domcharacterdata, DOMCharacterData, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domcharacterdata();
  public: ~c_domcharacterdata();
  public: void t___construct(CVarRef value);
  public: bool t_appenddata(CStrRef arg);
  public: bool t_deletedata(int64 offset, int64 count);
  public: bool t_insertdata(int64 offset, CStrRef data);
  public: bool t_replacedata(int64 offset, int64 count, CStrRef data);
  public: String t_substringdata(int64 offset, int64 count);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant value);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMComment

FORWARD_DECLARE_CLASS(domcomment);
class c_domcomment: public c_domcharacterdata {
 public:
  BEGIN_CLASS_MAP(domcomment)
  PARENT_CLASS(domcharacterdata)
  END_CLASS_MAP(domcomment)
  DECLARE_CLASS(domcomment, DOMComment, domcharacterdata)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domcomment();
  public: ~c_domcomment();
  public: void t___construct(CVarRef value);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant value);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMText

FORWARD_DECLARE_CLASS(domtext);
class c_domtext: public c_domcharacterdata {
 public:
  BEGIN_CLASS_MAP(domtext)
  PARENT_CLASS(domcharacterdata)
  END_CLASS_MAP(domtext)
  DECLARE_CLASS(domtext, DOMText, domcharacterdata)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domtext();
  public: ~c_domtext();
  public: void t___construct(CVarRef value);
  public: bool t_iswhitespaceinelementcontent();
  public: Variant t_splittext(int64 offset);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant value);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMCdataSection

FORWARD_DECLARE_CLASS(domcdatasection);
class c_domcdatasection: public c_domtext {
 public:
  BEGIN_CLASS_MAP(domcdatasection)
  PARENT_CLASS(domtext)
  END_CLASS_MAP(domcdatasection)
  DECLARE_CLASS(domcdatasection, DOMCdataSection, domtext)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domcdatasection();
  public: ~c_domcdatasection();
  public: void t___construct(CVarRef value);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant value);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMDocument

FORWARD_DECLARE_CLASS(domdocument);
class c_domdocument: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domdocument)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domdocument)
  DECLARE_CLASS(domdocument, DOMDocument, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domdocument();
  public: ~c_domdocument();
  public: void t___construct(CStrRef version, CStrRef encoding);
  public: Variant t_createattribute(CStrRef name);
  public: Variant t_createattributens(CStrRef namespaceuri, CStrRef qualifiedname);
  public: Variant t_createcdatasection(CStrRef data);
  public: Variant t_createcomment(CStrRef data);
  public: Variant t_createdocumentfragment();
  public: Variant t_createelement(CStrRef name, CStrRef value = null_string);
  public: Variant t_createelementns(CStrRef namespaceuri, CStrRef qualifiedname, CStrRef value = null_string);
  public: Variant t_createentityreference(CStrRef name);
  public: Variant t_createprocessinginstruction(CStrRef target, CStrRef data = null_string);
  public: Variant t_createtextnode(CStrRef data);
  public: Variant t_getelementbyid(CStrRef elementid);
  public: Variant t_getelementsbytagname(CStrRef name);
  public: Variant t_getelementsbytagnamens(CStrRef namespaceuri, CStrRef localname);
  public: Variant t_importnode(CObjRef importednode, bool deep = false);
  public: Variant t_load(CStrRef filename, int64 options = 0);
  public: Variant t_loadhtml(CStrRef source);
  public: Variant t_loadhtmlfile(CStrRef filename);
  public: Variant t_loadxml(CStrRef source, int64 options = 0);
  public: void t_normalizedocument();
  public: bool t_registernodeclass(CStrRef baseclass, CStrRef extendedclass);
  public: bool t_relaxngvalidate(CStrRef filename);
  public: bool t_relaxngvalidatesource(CStrRef source);
  public: Variant t_save(CStrRef file, int64 options = 0);
  public: Variant t_savehtml();
  public: Variant t_savehtmlfile(CStrRef file);
  public: Variant t_savexml(CObjRef node = null_object, int64 options = 0);
  public: bool t_schemavalidate(CStrRef filename);
  public: bool t_schemavalidatesource(CStrRef source);
  public: bool t_validate();
  public: Variant t_xinclude(int64 options = 0);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(String version, String encoding);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMDocumentFragment

FORWARD_DECLARE_CLASS(domdocumentfragment);
class c_domdocumentfragment: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domdocumentfragment)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domdocumentfragment)
  DECLARE_CLASS(domdocumentfragment, DOMDocumentFragment, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domdocumentfragment();
  public: ~c_domdocumentfragment();
  public: void t___construct();
  public: bool t_appendxml(CStrRef data);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMDocumentType

FORWARD_DECLARE_CLASS(domdocumenttype);
class c_domdocumenttype: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domdocumenttype)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domdocumenttype)
  DECLARE_CLASS(domdocumenttype, DOMDocumentType, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domdocumenttype();
  public: ~c_domdocumenttype();
  public: void t___construct();
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMElement

FORWARD_DECLARE_CLASS(domelement);
class c_domelement: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domelement)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domelement)
  DECLARE_CLASS(domelement, DOMElement, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domelement();
  public: ~c_domelement();
  public: void t___construct(CVarRef name, CVarRef value, CVarRef namespaceuri);
  public: String t_getattribute(CStrRef name);
  public: Variant t_getattributenode(CStrRef name);
  public: Object t_getattributenodens(CStrRef namespaceuri, CStrRef localname);
  public: String t_getattributens(CStrRef namespaceuri, CStrRef localname);
  public: Object t_getelementsbytagname(CStrRef name);
  public: Object t_getelementsbytagnamens(CStrRef namespaceuri, CStrRef localname);
  public: bool t_hasattribute(CStrRef name);
  public: bool t_hasattributens(CStrRef namespaceuri, CStrRef localname);
  public: bool t_removeattribute(CStrRef name);
  public: Variant t_removeattributenode(CObjRef oldattr);
  public: Variant t_removeattributens(CStrRef namespaceuri, CStrRef localname);
  public: Variant t_setattribute(CStrRef name, CStrRef value);
  public: Variant t_setattributenode(CObjRef newattr);
  public: Variant t_setattributenodens(CObjRef newattr);
  public: Variant t_setattributens(CStrRef namespaceuri, CStrRef name, CStrRef value);
  public: Variant t_setidattribute(CStrRef name, bool isid);
  public: Variant t_setidattributenode(CObjRef idattr, bool isid);
  public: Variant t_setidattributens(CStrRef namespaceuri, CStrRef localname, bool isid);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant name, Variant value, Variant namespaceuri);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMEntity

FORWARD_DECLARE_CLASS(domentity);
class c_domentity: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domentity)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domentity)
  DECLARE_CLASS(domentity, DOMEntity, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domentity();
  public: ~c_domentity();
  public: void t___construct();
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMEntityReference

FORWARD_DECLARE_CLASS(domentityreference);
class c_domentityreference: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domentityreference)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domentityreference)
  DECLARE_CLASS(domentityreference, DOMEntityReference, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domentityreference();
  public: ~c_domentityreference();
  public: void t___construct(CVarRef name);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant name);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMNotation

FORWARD_DECLARE_CLASS(domnotation);
class c_domnotation: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domnotation)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domnotation)
  DECLARE_CLASS(domnotation, DOMNotation, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domnotation();
  public: ~c_domnotation();
  public: void t___construct();
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMProcessingInstruction

FORWARD_DECLARE_CLASS(domprocessinginstruction);
class c_domprocessinginstruction: public c_domnode {
 public:
  BEGIN_CLASS_MAP(domprocessinginstruction)
  PARENT_CLASS(domnode)
  END_CLASS_MAP(domprocessinginstruction)
  DECLARE_CLASS(domprocessinginstruction, DOMProcessingInstruction, domnode)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domprocessinginstruction();
  public: ~c_domprocessinginstruction();
  public: void t___construct(CVarRef name, CVarRef value = null_variant);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant name, Variant value = null_variant);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMNamedNodeMap

FORWARD_DECLARE_CLASS(domnamednodemap);
class c_domnamednodemap : public ObjectData {
 public:
  BEGIN_CLASS_MAP(domnamednodemap)
  END_CLASS_MAP(domnamednodemap)
  DECLARE_CLASS(domnamednodemap, DOMNamedNodeMap, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domnamednodemap();
  public: ~c_domnamednodemap();
  public: void t___construct();
  public: Variant t_getnameditem(CStrRef name);
  public: Variant t_getnameditemns(CStrRef namespaceuri, CStrRef localname);
  public: Object t_item(int64 index);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMNodeList

FORWARD_DECLARE_CLASS(domnodelist);
class c_domnodelist : public ObjectData {
 public:
  BEGIN_CLASS_MAP(domnodelist)
  END_CLASS_MAP(domnodelist)
  DECLARE_CLASS(domnodelist, DOMNodeList, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domnodelist();
  public: ~c_domnodelist();
  public: void t___construct();
  public: Object t_item(int64 index);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMException

FORWARD_DECLARE_CLASS(domexception);
class c_domexception: public c_exception {
 public:
  BEGIN_CLASS_MAP(domexception)
  PARENT_CLASS(exception)
  END_CLASS_MAP(domexception)
  DECLARE_CLASS(domexception, DOMException, exception)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domexception();
  public: ~c_domexception();
  public: void t___construct();
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMImplementation

FORWARD_DECLARE_CLASS(domimplementation);
class c_domimplementation : public ObjectData {
 public:
  BEGIN_CLASS_MAP(domimplementation)
  END_CLASS_MAP(domimplementation)
  DECLARE_CLASS(domimplementation, DOMImplementation, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domimplementation();
  public: ~c_domimplementation();
  public: void t___construct();
  public: Variant t_createdocument(CStrRef namespaceuri = null_string, CStrRef qualifiedname = null_string, CObjRef doctypeobj = null_object);
  public: Variant t_createdocumenttype(CStrRef qualifiedname = null_string, CStrRef publicid = null_string, CStrRef systemid = null_string);
  public: bool t_hasfeature(CStrRef feature, CStrRef version);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create();
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
// class DOMXPath

FORWARD_DECLARE_CLASS(domxpath);
class c_domxpath : public ObjectData {
 public:
  BEGIN_CLASS_MAP(domxpath)
  END_CLASS_MAP(domxpath)
  DECLARE_CLASS(domxpath, DOMXPath, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_domxpath();
  public: ~c_domxpath();
  public: void t___construct(CVarRef doc);
  public: Variant t_evaluate(CStrRef expr, CObjRef context = null_object);
  public: Variant t_query(CStrRef expr, CObjRef context = null_object);
  public: bool t_registernamespace(CStrRef prefix, CStrRef uri);
  public: Variant t_registerphpfunctions(CVarRef funcs = null);
  public: Variant t___destruct();

  // implemented by HPHP
  public: ObjectData *create(Variant doc);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

 public:
  xmlNodePtr m_node;
};

///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_DOMDOCUMENT_H__
