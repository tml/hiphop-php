/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#include <cpp/base/hphp_system.h>
#include <cpp/ext/ext.h>
#include <cpp/eval/eval.h>


using namespace std;

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

// Function Invoke Proxies

// Function Invoke Table
Variant i_utf8_encode(CArrRef params) {
  FUNCTION_INJECTION(utf8_encode);
  return (f_utf8_encode(params.rvalAt(0)));
}
Variant i_hphp_splfileobject___construct(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject___construct);
  return (f_hphp_splfileobject___construct(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_func_get_args(CArrRef params) {
  FUNCTION_INJECTION(func_get_args);
  return (f_func_get_args());
}
Variant i_php_uname(CArrRef params) {
  FUNCTION_INJECTION(php_uname);
  int count = params.size();
  if (count <= 0) return (f_php_uname());
  return (f_php_uname(params.rvalAt(0)));
}
Variant i_posix_uname(CArrRef params) {
  FUNCTION_INJECTION(posix_uname);
  return (f_posix_uname());
}
Variant i_curl_multi_remove_handle(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_remove_handle);
  return (f_curl_multi_remove_handle(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_result(CArrRef params) {
  FUNCTION_INJECTION(mysql_result);
  int count = params.size();
  if (count <= 2) return (f_mysql_result(params.rvalAt(0), params.rvalAt(1)));
  return (f_mysql_result(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_splfileobject_current(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_current);
  return (f_hphp_splfileobject_current(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getgroup(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getgroup);
  return (f_hphp_splfileinfo_getgroup(params.rvalAt(0)));
}
Variant i_register_shutdown_function(CArrRef params) {
  FUNCTION_INJECTION(register_shutdown_function);
  int count = params.size();
  if (count <= 1) return (f_register_shutdown_function(count, params.rvalAt(0)), null);
  return (f_register_shutdown_function(count,params.rvalAt(0), params.slice(1, count - 1, false)), null);
}
Variant i_pixelsetmagentaquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetmagentaquantum);
  return (f_pixelsetmagentaquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_newmagickwand(CArrRef params) {
  FUNCTION_INJECTION(newmagickwand);
  return (f_newmagickwand());
}
Variant i_natsort(CArrRef params) {
  FUNCTION_INJECTION(natsort);
  return (f_natsort(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_socket_accept(CArrRef params) {
  FUNCTION_INJECTION(socket_accept);
  return (f_socket_accept(params.rvalAt(0)));
}
Variant i_vprintf(CArrRef params) {
  FUNCTION_INJECTION(vprintf);
  return (f_vprintf(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ucwords(CArrRef params) {
  FUNCTION_INJECTION(ucwords);
  return (f_ucwords(params.rvalAt(0)));
}
Variant i_header(CArrRef params) {
  FUNCTION_INJECTION(header);
  int count = params.size();
  if (count <= 1) return (f_header(params.rvalAt(0)), null);
  if (count == 2) return (f_header(params.rvalAt(0), params.rvalAt(1)), null);
  return (f_header(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_date_default_timezone_set(CArrRef params) {
  FUNCTION_INJECTION(date_default_timezone_set);
  return (f_date_default_timezone_set(params.rvalAt(0)));
}
Variant i_is_object(CArrRef params) {
  FUNCTION_INJECTION(is_object);
  return (f_is_object(params.rvalAt(0)));
}
Variant i_magicksetimagebias(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagebias);
  return (f_magicksetimagebias(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_exif_imagetype(CArrRef params) {
  FUNCTION_INJECTION(exif_imagetype);
  return (f_exif_imagetype(params.rvalAt(0)));
}
Variant i_imagegrabscreen(CArrRef params) {
  FUNCTION_INJECTION(imagegrabscreen);
  return (f_imagegrabscreen());
}
Variant i_bcmod(CArrRef params) {
  FUNCTION_INJECTION(bcmod);
  return (f_bcmod(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_chr(CArrRef params) {
  FUNCTION_INJECTION(chr);
  return (f_chr(params.rvalAt(0)));
}
Variant i_drawsetfontstretch(CArrRef params) {
  FUNCTION_INJECTION(drawsetfontstretch);
  return (f_drawsetfontstretch(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_posix_setsid(CArrRef params) {
  FUNCTION_INJECTION(posix_setsid);
  return (f_posix_setsid());
}
Variant i_hphp_splfileinfo_setfileclass(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_setfileclass);
  return (f_hphp_splfileinfo_setfileclass(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_posix_getpwnam(CArrRef params) {
  FUNCTION_INJECTION(posix_getpwnam);
  return (f_posix_getpwnam(params.rvalAt(0)));
}
Variant i_mcrypt_enc_get_supported_key_sizes(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_get_supported_key_sizes);
  return (f_mcrypt_enc_get_supported_key_sizes(params.rvalAt(0)));
}
Variant i_phpinfo(CArrRef params) {
  FUNCTION_INJECTION(phpinfo);
  int count = params.size();
  if (count <= 0) return (f_phpinfo());
  return (f_phpinfo(params.rvalAt(0)));
}
Variant i_evhttp_async_get(CArrRef params) {
  FUNCTION_INJECTION(evhttp_async_get);
  int count = params.size();
  if (count <= 1) return (f_evhttp_async_get(params.rvalAt(0)));
  if (count == 2) return (f_evhttp_async_get(params.rvalAt(0), params.rvalAt(1)));
  return (f_evhttp_async_get(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ldap_parse_result(CArrRef params) {
  FUNCTION_INJECTION(ldap_parse_result);
  int count = params.size();
  if (count <= 3) return (f_ldap_parse_result(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_ldap_parse_result(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
  if (count == 5) return (f_ldap_parse_result(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3)), ref(const_cast<Array&>(params).lvalAt(4))));
  return (f_ldap_parse_result(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3)), ref(const_cast<Array&>(params).lvalAt(4)), ref(const_cast<Array&>(params).lvalAt(5))));
}
Variant i_drawgettextantialias(CArrRef params) {
  FUNCTION_INJECTION(drawgettextantialias);
  return (f_drawgettextantialias(params.rvalAt(0)));
}
Variant i_array_fill_keys(CArrRef params) {
  FUNCTION_INJECTION(array_fill_keys);
  return (f_array_fill_keys(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_openssl_seal(CArrRef params) {
  FUNCTION_INJECTION(openssl_seal);
  return (f_openssl_seal(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
}
Variant i_socket_clear_error(CArrRef params) {
  FUNCTION_INJECTION(socket_clear_error);
  int count = params.size();
  if (count <= 0) return (f_socket_clear_error(), null);
  return (f_socket_clear_error(params.rvalAt(0)), null);
}
Variant i_die(CArrRef params) {
  FUNCTION_INJECTION(die);
  int count = params.size();
  if (count <= 0) return (f_die());
  return (f_die(params.rvalAt(0)));
}
Variant i_diskfreespace(CArrRef params) {
  FUNCTION_INJECTION(diskfreespace);
  return (f_diskfreespace(params.rvalAt(0)));
}
Variant i_xml_set_start_namespace_decl_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_start_namespace_decl_handler);
  return (f_xml_set_start_namespace_decl_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_decbin(CArrRef params) {
  FUNCTION_INJECTION(decbin);
  return (f_decbin(params.rvalAt(0)));
}
Variant i_sizeof(CArrRef params) {
  FUNCTION_INJECTION(sizeof);
  int count = params.size();
  if (count <= 1) return (f_sizeof(params.rvalAt(0)));
  return (f_sizeof(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_convert_case(CArrRef params) {
  FUNCTION_INJECTION(mb_convert_case);
  int count = params.size();
  if (count <= 2) return (f_mb_convert_case(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_convert_case(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_dir(CArrRef params) {
  FUNCTION_INJECTION(dir);
  return (f_dir(params.rvalAt(0)));
}
Variant i_array_combine(CArrRef params) {
  FUNCTION_INJECTION(array_combine);
  return (f_array_combine(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_strpos(CArrRef params) {
  FUNCTION_INJECTION(strpos);
  int count = params.size();
  if (count <= 2) return (f_strpos(params.rvalAt(0), params.rvalAt(1)));
  return (f_strpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_array_reverse(CArrRef params) {
  FUNCTION_INJECTION(array_reverse);
  int count = params.size();
  if (count <= 1) return (f_array_reverse(params.rvalAt(0)));
  return (f_array_reverse(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_strrev(CArrRef params) {
  FUNCTION_INJECTION(strrev);
  return (f_strrev(params.rvalAt(0)));
}
Variant i_msg_set_queue(CArrRef params) {
  FUNCTION_INJECTION(msg_set_queue);
  return (f_msg_set_queue(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_cos(CArrRef params) {
  FUNCTION_INJECTION(cos);
  return (f_cos(params.rvalAt(0)));
}
Variant i_hphp_recursivedirectoryiterator_valid(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_valid);
  return (f_hphp_recursivedirectoryiterator_valid(params.rvalAt(0)));
}
Variant i_bcmul(CArrRef params) {
  FUNCTION_INJECTION(bcmul);
  int count = params.size();
  if (count <= 2) return (f_bcmul(params.rvalAt(0), params.rvalAt(1)));
  return (f_bcmul(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_openlog(CArrRef params) {
  FUNCTION_INJECTION(openlog);
  return (f_openlog(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_get_include_path(CArrRef params) {
  FUNCTION_INJECTION(get_include_path);
  return (f_get_include_path());
}
Variant i_socket_select(CArrRef params) {
  FUNCTION_INJECTION(socket_select);
  int count = params.size();
  if (count <= 4) return (f_socket_select(ref(const_cast<Array&>(params).lvalAt(0)), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  return (f_socket_select(ref(const_cast<Array&>(params).lvalAt(0)), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_magickraiseimage(CArrRef params) {
  FUNCTION_INJECTION(magickraiseimage);
  return (f_magickraiseimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_gzputs(CArrRef params) {
  FUNCTION_INJECTION(gzputs);
  int count = params.size();
  if (count <= 2) return (f_gzputs(params.rvalAt(0), params.rvalAt(1)));
  return (f_gzputs(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_strpbrk(CArrRef params) {
  FUNCTION_INJECTION(strpbrk);
  return (f_strpbrk(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_shm_remove_var(CArrRef params) {
  FUNCTION_INJECTION(shm_remove_var);
  return (f_shm_remove_var(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_setuid(CArrRef params) {
  FUNCTION_INJECTION(posix_setuid);
  return (f_posix_setuid(params.rvalAt(0)));
}
Variant i_pixelgetyellow(CArrRef params) {
  FUNCTION_INJECTION(pixelgetyellow);
  return (f_pixelgetyellow(params.rvalAt(0)));
}
Variant i_convert_uudecode(CArrRef params) {
  FUNCTION_INJECTION(convert_uudecode);
  return (f_convert_uudecode(params.rvalAt(0)));
}
Variant i_htmlspecialchars_decode(CArrRef params) {
  FUNCTION_INJECTION(htmlspecialchars_decode);
  int count = params.size();
  if (count <= 1) return (f_htmlspecialchars_decode(params.rvalAt(0)));
  return (f_htmlspecialchars_decode(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_end_document(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_document);
  return (f_xmlwriter_end_document(params.rvalAt(0)));
}
Variant i_magickgetimagehistogram(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagehistogram);
  return (f_magickgetimagehistogram(params.rvalAt(0)));
}
Variant i_preg_last_error(CArrRef params) {
  FUNCTION_INJECTION(preg_last_error);
  return (f_preg_last_error());
}
Variant i_end(CArrRef params) {
  FUNCTION_INJECTION(end);
  return (f_end(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_stream_get_line(CArrRef params) {
  FUNCTION_INJECTION(stream_get_line);
  int count = params.size();
  if (count <= 1) return (f_stream_get_line(params.rvalAt(0)));
  if (count == 2) return (f_stream_get_line(params.rvalAt(0), params.rvalAt(1)));
  return (f_stream_get_line(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_deg2rad(CArrRef params) {
  FUNCTION_INJECTION(deg2rad);
  return (f_deg2rad(params.rvalAt(0)));
}
Variant i_magickrollimage(CArrRef params) {
  FUNCTION_INJECTION(magickrollimage);
  return (f_magickrollimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ldap_sort(CArrRef params) {
  FUNCTION_INJECTION(ldap_sort);
  return (f_ldap_sort(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagetruecolortopalette(CArrRef params) {
  FUNCTION_INJECTION(imagetruecolortopalette);
  return (f_imagetruecolortopalette(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_defined(CArrRef params) {
  FUNCTION_INJECTION(defined);
  return (f_defined(params.rvalAt(0)));
}
Variant i_magickgetimageunits(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageunits);
  return (f_magickgetimageunits(params.rvalAt(0)));
}
Variant i_magicksetimageblueprimary(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageblueprimary);
  return (f_magicksetimageblueprimary(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_get_class_vars(CArrRef params) {
  FUNCTION_INJECTION(get_class_vars);
  return (f_get_class_vars(params.rvalAt(0)));
}
Variant i_syslog(CArrRef params) {
  FUNCTION_INJECTION(syslog);
  return (f_syslog(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_array_unique(CArrRef params) {
  FUNCTION_INJECTION(array_unique);
  return (f_array_unique(params.rvalAt(0)));
}
Variant i_bcpow(CArrRef params) {
  FUNCTION_INJECTION(bcpow);
  int count = params.size();
  if (count <= 2) return (f_bcpow(params.rvalAt(0), params.rvalAt(1)));
  return (f_bcpow(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelgetopacityquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetopacityquantum);
  return (f_pixelgetopacityquantum(params.rvalAt(0)));
}
Variant i_php_check_syntax(CArrRef params) {
  FUNCTION_INJECTION(php_check_syntax);
  int count = params.size();
  if (count <= 1) return (f_php_check_syntax(params.rvalAt(0)));
  return (f_php_check_syntax(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_drawgetstrokemiterlimit(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokemiterlimit);
  return (f_drawgetstrokemiterlimit(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_fpassthru(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fpassthru);
  return (f_hphp_splfileobject_fpassthru(params.rvalAt(0)));
}
Variant i_pixelsetquantumcolor(CArrRef params) {
  FUNCTION_INJECTION(pixelsetquantumcolor);
  int count = params.size();
  if (count <= 4) return (f_pixelsetquantumcolor(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
  return (f_pixelsetquantumcolor(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_gztell(CArrRef params) {
  FUNCTION_INJECTION(gztell);
  return (f_gztell(params.rvalAt(0)));
}
Variant i_strval(CArrRef params) {
  FUNCTION_INJECTION(strval);
  return (f_strval(params.rvalAt(0)));
}
Variant i_evhttp_recv(CArrRef params) {
  FUNCTION_INJECTION(evhttp_recv);
  return (f_evhttp_recv(params.rvalAt(0)));
}
Variant i_strspn(CArrRef params) {
  FUNCTION_INJECTION(strspn);
  int count = params.size();
  if (count <= 2) return (f_strspn(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_strspn(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_strspn(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_ini_restore(CArrRef params) {
  FUNCTION_INJECTION(ini_restore);
  return (f_ini_restore(params.rvalAt(0)), null);
}
Variant i_ldap_dn2ufn(CArrRef params) {
  FUNCTION_INJECTION(ldap_dn2ufn);
  return (f_ldap_dn2ufn(params.rvalAt(0)));
}
Variant i_ceil(CArrRef params) {
  FUNCTION_INJECTION(ceil);
  return (f_ceil(params.rvalAt(0)));
}
Variant i_xmlwriter_end_dtd_attlist(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_dtd_attlist);
  return (f_xmlwriter_end_dtd_attlist(params.rvalAt(0)));
}
Variant i_phpversion(CArrRef params) {
  FUNCTION_INJECTION(phpversion);
  int count = params.size();
  if (count <= 0) return (f_phpversion());
  return (f_phpversion(params.rvalAt(0)));
}
Variant i_stream_filter_remove(CArrRef params) {
  FUNCTION_INJECTION(stream_filter_remove);
  return (f_stream_filter_remove(params.rvalAt(0)));
}
Variant i_mcrypt_generic(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_generic);
  return (f_mcrypt_generic(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_is_file(CArrRef params) {
  FUNCTION_INJECTION(is_file);
  return (f_is_file(params.rvalAt(0)));
}
Variant i_xml_set_end_namespace_decl_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_end_namespace_decl_handler);
  return (f_xml_set_end_namespace_decl_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_openssl_x509_export_to_file(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_export_to_file);
  int count = params.size();
  if (count <= 2) return (f_openssl_x509_export_to_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_openssl_x509_export_to_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagesetstyle(CArrRef params) {
  FUNCTION_INJECTION(imagesetstyle);
  return (f_imagesetstyle(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawcolor(CArrRef params) {
  FUNCTION_INJECTION(drawcolor);
  return (f_drawcolor(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_get_headers(CArrRef params) {
  FUNCTION_INJECTION(get_headers);
  int count = params.size();
  if (count <= 1) return (f_get_headers(params.rvalAt(0)));
  return (f_get_headers(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_drop_db(CArrRef params) {
  FUNCTION_INJECTION(mysql_drop_db);
  int count = params.size();
  if (count <= 1) return (f_mysql_drop_db(params.rvalAt(0)));
  return (f_mysql_drop_db(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickresampleimage(CArrRef params) {
  FUNCTION_INJECTION(magickresampleimage);
  return (f_magickresampleimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_i18n_loc_get_default(CArrRef params) {
  FUNCTION_INJECTION(i18n_loc_get_default);
  return (f_i18n_loc_get_default());
}
Variant i_strtok(CArrRef params) {
  FUNCTION_INJECTION(strtok);
  int count = params.size();
  if (count <= 1) return (f_strtok(params.rvalAt(0)));
  return (f_strtok(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_key_exists(CArrRef params) {
  FUNCTION_INJECTION(array_key_exists);
  return (f_array_key_exists(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_exp(CArrRef params) {
  FUNCTION_INJECTION(exp);
  return (f_exp(params.rvalAt(0)));
}
Variant i_strstr(CArrRef params) {
  FUNCTION_INJECTION(strstr);
  return (f_strstr(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_realpath(CArrRef params) {
  FUNCTION_INJECTION(realpath);
  return (f_realpath(params.rvalAt(0)));
}
Variant i_stream_filter_append(CArrRef params) {
  FUNCTION_INJECTION(stream_filter_append);
  int count = params.size();
  if (count <= 2) return (f_stream_filter_append(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_filter_append(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_filter_append(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_oci_bind_by_name(CArrRef params) {
  FUNCTION_INJECTION(oci_bind_by_name);
  int count = params.size();
  if (count <= 3) return (f_oci_bind_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_oci_bind_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  return (f_oci_bind_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_hphp_get_property(CArrRef params) {
  FUNCTION_INJECTION(hphp_get_property);
  return (f_hphp_get_property(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetcharheight(CArrRef params) {
  FUNCTION_INJECTION(magickgetcharheight);
  int count = params.size();
  if (count <= 3) return (f_magickgetcharheight(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgetcharheight(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_imagerotate(CArrRef params) {
  FUNCTION_INJECTION(imagerotate);
  int count = params.size();
  if (count <= 3) return (f_imagerotate(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_imagerotate(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickcompositeimage(CArrRef params) {
  FUNCTION_INJECTION(magickcompositeimage);
  return (f_magickcompositeimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_openssl_sign(CArrRef params) {
  FUNCTION_INJECTION(openssl_sign);
  int count = params.size();
  if (count <= 3) return (f_openssl_sign(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_sign(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_version_compare(CArrRef params) {
  FUNCTION_INJECTION(version_compare);
  int count = params.size();
  if (count <= 2) return (f_version_compare(params.rvalAt(0), params.rvalAt(1)));
  return (f_version_compare(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_timezone_name_get(CArrRef params) {
  FUNCTION_INJECTION(timezone_name_get);
  return (f_timezone_name_get(params.rvalAt(0)));
}
Variant i_posix_getpgid(CArrRef params) {
  FUNCTION_INJECTION(posix_getpgid);
  return (f_posix_getpgid(params.rvalAt(0)));
}
Variant i_imagestring(CArrRef params) {
  FUNCTION_INJECTION(imagestring);
  return (f_imagestring(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_mcrypt_list_modes(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_list_modes);
  int count = params.size();
  if (count <= 0) return (f_mcrypt_list_modes());
  return (f_mcrypt_list_modes(params.rvalAt(0)));
}
Variant i_mcrypt_list_algorithms(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_list_algorithms);
  int count = params.size();
  if (count <= 0) return (f_mcrypt_list_algorithms());
  return (f_mcrypt_list_algorithms(params.rvalAt(0)));
}
Variant i_mcrypt_get_cipher_name(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_get_cipher_name);
  return (f_mcrypt_get_cipher_name(params.rvalAt(0)));
}
Variant i_idn_to_unicode(CArrRef params) {
  FUNCTION_INJECTION(idn_to_unicode);
  int count = params.size();
  if (count <= 1) return (f_idn_to_unicode(params.rvalAt(0)));
  return (f_idn_to_unicode(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_lchown(CArrRef params) {
  FUNCTION_INJECTION(lchown);
  return (f_lchown(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawcomposite(CArrRef params) {
  FUNCTION_INJECTION(drawcomposite);
  return (f_drawcomposite(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_dechex(CArrRef params) {
  FUNCTION_INJECTION(dechex);
  return (f_dechex(params.rvalAt(0)));
}
Variant i_imagecolortransparent(CArrRef params) {
  FUNCTION_INJECTION(imagecolortransparent);
  int count = params.size();
  if (count <= 1) return (f_imagecolortransparent(params.rvalAt(0)));
  return (f_imagecolortransparent(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_get_option(CArrRef params) {
  FUNCTION_INJECTION(socket_get_option);
  return (f_socket_get_option(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stream_filter_register(CArrRef params) {
  FUNCTION_INJECTION(stream_filter_register);
  return (f_stream_filter_register(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apache_response_headers(CArrRef params) {
  FUNCTION_INJECTION(apache_response_headers);
  return (f_apache_response_headers());
}
Variant i_array_merge(CArrRef params) {
  FUNCTION_INJECTION(array_merge);
  int count = params.size();
  if (count <= 1) return (f_array_merge(count, params.rvalAt(0)));
  return (f_array_merge(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_md5(CArrRef params) {
  FUNCTION_INJECTION(md5);
  int count = params.size();
  if (count <= 1) return (f_md5(params.rvalAt(0)));
  return (f_md5(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_bcsub(CArrRef params) {
  FUNCTION_INJECTION(bcsub);
  int count = params.size();
  if (count <= 2) return (f_bcsub(params.rvalAt(0), params.rvalAt(1)));
  return (f_bcsub(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_flush(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_flush);
  int count = params.size();
  if (count <= 1) return (f_xmlwriter_flush(params.rvalAt(0)));
  return (f_xmlwriter_flush(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_sha1_file(CArrRef params) {
  FUNCTION_INJECTION(sha1_file);
  int count = params.size();
  if (count <= 1) return (f_sha1_file(params.rvalAt(0)));
  return (f_sha1_file(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_ctermid(CArrRef params) {
  FUNCTION_INJECTION(posix_ctermid);
  return (f_posix_ctermid());
}
Variant i_date(CArrRef params) {
  FUNCTION_INJECTION(date);
  int count = params.size();
  if (count <= 1) return (f_date(params.rvalAt(0)));
  return (f_date(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_evhttp_post(CArrRef params) {
  FUNCTION_INJECTION(evhttp_post);
  int count = params.size();
  if (count <= 2) return (f_evhttp_post(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_evhttp_post(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_evhttp_post(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_ldap_connect(CArrRef params) {
  FUNCTION_INJECTION(ldap_connect);
  int count = params.size();
  if (count <= 0) return (f_ldap_connect());
  if (count == 1) return (f_ldap_connect(params.rvalAt(0)));
  return (f_ldap_connect(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_shuffle(CArrRef params) {
  FUNCTION_INJECTION(shuffle);
  return (f_shuffle(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_mcrypt_module_get_algo_block_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_get_algo_block_size);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_get_algo_block_size(params.rvalAt(0)));
  return (f_mcrypt_module_get_algo_block_size(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileobject_ftruncate(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_ftruncate);
  return (f_hphp_splfileobject_ftruncate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_key(CArrRef params) {
  FUNCTION_INJECTION(key);
  return (f_key(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_xmlwriter_start_dtd_entity(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_dtd_entity);
  return (f_xmlwriter_start_dtd_entity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_readfile(CArrRef params) {
  FUNCTION_INJECTION(readfile);
  int count = params.size();
  if (count <= 1) return (f_readfile(params.rvalAt(0)));
  if (count == 2) return (f_readfile(params.rvalAt(0), params.rvalAt(1)));
  return (f_readfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_atan(CArrRef params) {
  FUNCTION_INJECTION(atan);
  return (f_atan(params.rvalAt(0)));
}
Variant i_magickmodulateimage(CArrRef params) {
  FUNCTION_INJECTION(magickmodulateimage);
  return (f_magickmodulateimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mysql_set_charset(CArrRef params) {
  FUNCTION_INJECTION(mysql_set_charset);
  int count = params.size();
  if (count <= 1) return (f_mysql_set_charset(params.rvalAt(0)));
  return (f_mysql_set_charset(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetfontweight(CArrRef params) {
  FUNCTION_INJECTION(drawgetfontweight);
  return (f_drawgetfontweight(params.rvalAt(0)));
}
Variant i_magickgetimageheight(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageheight);
  return (f_magickgetimageheight(params.rvalAt(0)));
}
Variant i_posix_getpgrp(CArrRef params) {
  FUNCTION_INJECTION(posix_getpgrp);
  return (f_posix_getpgrp());
}
Variant i_i18n_loc_get_error_code(CArrRef params) {
  FUNCTION_INJECTION(i18n_loc_get_error_code);
  return (f_i18n_loc_get_error_code());
}
Variant i_hash_file(CArrRef params) {
  FUNCTION_INJECTION(hash_file);
  int count = params.size();
  if (count <= 2) return (f_hash_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_hash_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_callable(CArrRef params) {
  FUNCTION_INJECTION(is_callable);
  int count = params.size();
  if (count <= 1) return (f_is_callable(params.rvalAt(0)));
  if (count == 2) return (f_is_callable(params.rvalAt(0), params.rvalAt(1)));
  return (f_is_callable(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_asin(CArrRef params) {
  FUNCTION_INJECTION(asin);
  return (f_asin(params.rvalAt(0)));
}
Variant i_openssl_public_encrypt(CArrRef params) {
  FUNCTION_INJECTION(openssl_public_encrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_public_encrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_public_encrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_curl_multi_init(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_init);
  return (f_curl_multi_init());
}
Variant i_posix_getpwuid(CArrRef params) {
  FUNCTION_INJECTION(posix_getpwuid);
  return (f_posix_getpwuid(params.rvalAt(0)));
}
Variant i_json_encode(CArrRef params) {
  FUNCTION_INJECTION(json_encode);
  int count = params.size();
  if (count <= 1) return (f_json_encode(params.rvalAt(0)));
  return (f_json_encode(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_show_source(CArrRef params) {
  FUNCTION_INJECTION(show_source);
  int count = params.size();
  if (count <= 1) return (f_show_source(params.rvalAt(0)));
  return (f_show_source(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_module_self_test(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_self_test);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_self_test(params.rvalAt(0)));
  return (f_mcrypt_module_self_test(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_sscanf(CArrRef params) {
  FUNCTION_INJECTION(sscanf);
  int count = params.size();
  if (count <= 2) return (f_sscanf(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_sscanf(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_chop(CArrRef params) {
  FUNCTION_INJECTION(chop);
  int count = params.size();
  if (count <= 1) return (f_chop(params.rvalAt(0)));
  return (f_chop(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_convert_variables(CArrRef params) {
  FUNCTION_INJECTION(mb_convert_variables);
  int count = params.size();
  if (count <= 3) return (f_mb_convert_variables(count, params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_mb_convert_variables(count,params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.slice(3, count - 3, false)));
}
Variant i_hphp_recursivedirectoryiterator_getsubpathname(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_getsubpathname);
  return (f_hphp_recursivedirectoryiterator_getsubpathname(params.rvalAt(0)));
}
Variant i_socket_close(CArrRef params) {
  FUNCTION_INJECTION(socket_close);
  return (f_socket_close(params.rvalAt(0)), null);
}
Variant i_max(CArrRef params) {
  FUNCTION_INJECTION(max);
  int count = params.size();
  if (count <= 1) return (f_max(count, params.rvalAt(0)));
  return (f_max(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_magickadaptivethresholdimage(CArrRef params) {
  FUNCTION_INJECTION(magickadaptivethresholdimage);
  return (f_magickadaptivethresholdimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_each(CArrRef params) {
  FUNCTION_INJECTION(each);
  return (f_each(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_magickremoveimageprofiles(CArrRef params) {
  FUNCTION_INJECTION(magickremoveimageprofiles);
  return (f_magickremoveimageprofiles(params.rvalAt(0)));
}
Variant i_drawgettextalignment(CArrRef params) {
  FUNCTION_INJECTION(drawgettextalignment);
  return (f_drawgettextalignment(params.rvalAt(0)));
}
Variant i_xbox_send_message(CArrRef params) {
  FUNCTION_INJECTION(xbox_send_message);
  int count = params.size();
  if (count <= 3) return (f_xbox_send_message(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_xbox_send_message(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_thrift_protocol_write_binary(CArrRef params) {
  FUNCTION_INJECTION(thrift_protocol_write_binary);
  return (f_thrift_protocol_write_binary(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)), null);
}
Variant i_wandgetexceptiontype(CArrRef params) {
  FUNCTION_INJECTION(wandgetexceptiontype);
  return (f_wandgetexceptiontype(params.rvalAt(0)));
}
Variant i_drawpathellipticarcabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathellipticarcabsolute);
  return (f_drawpathellipticarcabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)), null);
}
Variant i_pixelsetgreen(CArrRef params) {
  FUNCTION_INJECTION(pixelsetgreen);
  return (f_pixelsetgreen(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickgetimagecolorspace(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagecolorspace);
  return (f_magickgetimagecolorspace(params.rvalAt(0)));
}
Variant i_pixelsetalphaquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetalphaquantum);
  return (f_pixelsetalphaquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_stream_bucket_append(CArrRef params) {
  FUNCTION_INJECTION(stream_bucket_append);
  return (f_stream_bucket_append(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_msg_stat_queue(CArrRef params) {
  FUNCTION_INJECTION(msg_stat_queue);
  return (f_msg_stat_queue(params.rvalAt(0)));
}
Variant i_system(CArrRef params) {
  FUNCTION_INJECTION(system);
  int count = params.size();
  if (count <= 1) return (f_system(params.rvalAt(0)));
  return (f_system(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_mb_parse_str(CArrRef params) {
  FUNCTION_INJECTION(mb_parse_str);
  int count = params.size();
  if (count <= 1) return (f_mb_parse_str(params.rvalAt(0)));
  return (f_mb_parse_str(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_log(CArrRef params) {
  FUNCTION_INJECTION(log);
  int count = params.size();
  if (count <= 1) return (f_log(params.rvalAt(0)));
  return (f_log(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawskewx(CArrRef params) {
  FUNCTION_INJECTION(drawskewx);
  return (f_drawskewx(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_min(CArrRef params) {
  FUNCTION_INJECTION(min);
  int count = params.size();
  if (count <= 1) return (f_min(count, params.rvalAt(0)));
  return (f_min(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_curl_multi_getcontent(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_getcontent);
  return (f_curl_multi_getcontent(params.rvalAt(0)));
}
Variant i_drawskewy(CArrRef params) {
  FUNCTION_INJECTION(drawskewy);
  return (f_drawskewy(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_is_uploaded_file(CArrRef params) {
  FUNCTION_INJECTION(is_uploaded_file);
  return (f_is_uploaded_file(params.rvalAt(0)));
}
Variant i_magicksetresourcelimit(CArrRef params) {
  FUNCTION_INJECTION(magicksetresourcelimit);
  return (f_magicksetresourcelimit(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_date_timezone_get(CArrRef params) {
  FUNCTION_INJECTION(date_timezone_get);
  return (f_date_timezone_get(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_fwrite(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fwrite);
  return (f_hphp_splfileobject_fwrite(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_apache_get_rewrite_rules(CArrRef params) {
  FUNCTION_INJECTION(apache_get_rewrite_rules);
  return (f_apache_get_rewrite_rules());
}
Variant i_is_string(CArrRef params) {
  FUNCTION_INJECTION(is_string);
  return (f_is_string(params.rvalAt(0)));
}
Variant i_pcntl_wtermsig(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wtermsig);
  return (f_pcntl_wtermsig(params.rvalAt(0)));
}
Variant i_stream_context_get_default(CArrRef params) {
  FUNCTION_INJECTION(stream_context_get_default);
  int count = params.size();
  if (count <= 0) return (f_stream_context_get_default());
  return (f_stream_context_get_default(params.rvalAt(0)));
}
Variant i_drawpathlinetorelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathlinetorelative);
  return (f_drawpathlinetorelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_urlencode(CArrRef params) {
  FUNCTION_INJECTION(urlencode);
  return (f_urlencode(params.rvalAt(0)));
}
Variant i_mb_preferred_mime_name(CArrRef params) {
  FUNCTION_INJECTION(mb_preferred_mime_name);
  return (f_mb_preferred_mime_name(params.rvalAt(0)));
}
Variant i_pixelgetgreenquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetgreenquantum);
  return (f_pixelgetgreenquantum(params.rvalAt(0)));
}
Variant i_magicksetfilename(CArrRef params) {
  FUNCTION_INJECTION(magicksetfilename);
  int count = params.size();
  if (count <= 1) return (f_magicksetfilename(params.rvalAt(0)));
  return (f_magicksetfilename(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickappendimages(CArrRef params) {
  FUNCTION_INJECTION(magickappendimages);
  int count = params.size();
  if (count <= 1) return (f_magickappendimages(params.rvalAt(0)));
  return (f_magickappendimages(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pcntl_wifstopped(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wifstopped);
  return (f_pcntl_wifstopped(params.rvalAt(0)));
}
Variant i_mb_ereg_search(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search);
  int count = params.size();
  if (count <= 0) return (f_mb_ereg_search());
  if (count == 1) return (f_mb_ereg_search(params.rvalAt(0)));
  return (f_mb_ereg_search(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_rewind(CArrRef params) {
  FUNCTION_INJECTION(rewind);
  return (f_rewind(params.rvalAt(0)));
}
Variant i_chunk_split(CArrRef params) {
  FUNCTION_INJECTION(chunk_split);
  int count = params.size();
  if (count <= 1) return (f_chunk_split(params.rvalAt(0)));
  if (count == 2) return (f_chunk_split(params.rvalAt(0), params.rvalAt(1)));
  return (f_chunk_split(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mb_list_encodings_alias_names(CArrRef params) {
  FUNCTION_INJECTION(mb_list_encodings_alias_names);
  int count = params.size();
  if (count <= 0) return (f_mb_list_encodings_alias_names());
  return (f_mb_list_encodings_alias_names(params.rvalAt(0)));
}
Variant i_i18n_loc_set_attribute(CArrRef params) {
  FUNCTION_INJECTION(i18n_loc_set_attribute);
  return (f_i18n_loc_set_attribute(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelsynciterator(CArrRef params) {
  FUNCTION_INJECTION(pixelsynciterator);
  return (f_pixelsynciterator(params.rvalAt(0)));
}
Variant i_openssl_error_string(CArrRef params) {
  FUNCTION_INJECTION(openssl_error_string);
  return (f_openssl_error_string());
}
Variant i_ismagickwand(CArrRef params) {
  FUNCTION_INJECTION(ismagickwand);
  return (f_ismagickwand(params.rvalAt(0)));
}
Variant i_strrchr(CArrRef params) {
  FUNCTION_INJECTION(strrchr);
  return (f_strrchr(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_start_dtd_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_dtd_element);
  return (f_xmlwriter_start_dtd_element(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_str_ireplace(CArrRef params) {
  FUNCTION_INJECTION(str_ireplace);
  int count = params.size();
  if (count <= 3) return (f_str_ireplace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_str_ireplace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_magickpainttransparentimage(CArrRef params) {
  FUNCTION_INJECTION(magickpainttransparentimage);
  int count = params.size();
  if (count <= 2) return (f_magickpainttransparentimage(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_magickpainttransparentimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickpainttransparentimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawsettextundercolor(CArrRef params) {
  FUNCTION_INJECTION(drawsettextundercolor);
  return (f_drawsettextundercolor(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_hphp_splfileobject_getflags(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_getflags);
  return (f_hphp_splfileobject_getflags(params.rvalAt(0)));
}
Variant i_hphp_recursivedirectoryiterator_rewind(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_rewind);
  return (f_hphp_recursivedirectoryiterator_rewind(params.rvalAt(0)), null);
}
Variant i_magickgetstringwidth(CArrRef params) {
  FUNCTION_INJECTION(magickgetstringwidth);
  int count = params.size();
  if (count <= 3) return (f_magickgetstringwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgetstringwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_echo(CArrRef params) {
  FUNCTION_INJECTION(echo);
  int count = params.size();
  if (count <= 1) return (f_echo(count, params.rvalAt(0)), null);
  return (f_echo(count,params.rvalAt(0), params.slice(1, count - 1, false)), null);
}
Variant i_ldap_parse_reference(CArrRef params) {
  FUNCTION_INJECTION(ldap_parse_reference);
  return (f_ldap_parse_reference(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_ctype_xdigit(CArrRef params) {
  FUNCTION_INJECTION(ctype_xdigit);
  return (f_ctype_xdigit(params.rvalAt(0)));
}
Variant i_gmstrftime(CArrRef params) {
  FUNCTION_INJECTION(gmstrftime);
  int count = params.size();
  if (count <= 1) return (f_gmstrftime(params.rvalAt(0)));
  return (f_gmstrftime(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursiveiteratoriterator_next(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_next);
  return (f_hphp_recursiveiteratoriterator_next(params.rvalAt(0)), null);
}
Variant i_stream_socket_get_name(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_get_name);
  return (f_stream_socket_get_name(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_set_option(CArrRef params) {
  FUNCTION_INJECTION(socket_set_option);
  return (f_socket_set_option(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_array_multisort(CArrRef params) {
  FUNCTION_INJECTION(array_multisort);
  int count = params.size();
  if (count <= 1) return (f_array_multisort(count, ref(const_cast<Array&>(params).lvalAt(0))));
  return (f_array_multisort(count,ref(const_cast<Array&>(params).lvalAt(0)), params.slice(1, count - 1, false)));
}
Variant i_imagepsbbox(CArrRef params) {
  FUNCTION_INJECTION(imagepsbbox);
  int count = params.size();
  if (count <= 3) return (f_imagepsbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_imagepsbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_imagepsbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_imagepsbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_drawpathlinetoverticalabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathlinetoverticalabsolute);
  return (f_drawpathlinetoverticalabsolute(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mailparse_msg_get_structure(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_get_structure);
  return (f_mailparse_msg_get_structure(params.rvalAt(0)));
}
Variant i_mb_ereg(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg);
  int count = params.size();
  if (count <= 2) return (f_mb_ereg(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_ereg(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_decoct(CArrRef params) {
  FUNCTION_INJECTION(decoct);
  return (f_decoct(params.rvalAt(0)));
}
Variant i_xml_parse(CArrRef params) {
  FUNCTION_INJECTION(xml_parse);
  int count = params.size();
  if (count <= 2) return (f_xml_parse(params.rvalAt(0), params.rvalAt(1)));
  return (f_xml_parse(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xml_get_current_line_number(CArrRef params) {
  FUNCTION_INJECTION(xml_get_current_line_number);
  return (f_xml_get_current_line_number(params.rvalAt(0)));
}
Variant i_drawaffine(CArrRef params) {
  FUNCTION_INJECTION(drawaffine);
  return (f_drawaffine(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)), null);
}
Variant i_magicksetimagewhitepoint(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagewhitepoint);
  return (f_magicksetimagewhitepoint(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_gzclose(CArrRef params) {
  FUNCTION_INJECTION(gzclose);
  return (f_gzclose(params.rvalAt(0)));
}
Variant i_imagecolorat(CArrRef params) {
  FUNCTION_INJECTION(imagecolorat);
  return (f_imagecolorat(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetimageextrema(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageextrema);
  int count = params.size();
  if (count <= 1) return (f_magickgetimageextrema(params.rvalAt(0)));
  return (f_magickgetimageextrema(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ord(CArrRef params) {
  FUNCTION_INJECTION(ord);
  return (f_ord(params.rvalAt(0)));
}
Variant i_mktime(CArrRef params) {
  FUNCTION_INJECTION(mktime);
  int count = params.size();
  if (count <= 0) return (f_mktime());
  if (count == 1) return (f_mktime(params.rvalAt(0)));
  if (count == 2) return (f_mktime(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_mktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_mktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_sem_get(CArrRef params) {
  FUNCTION_INJECTION(sem_get);
  int count = params.size();
  if (count <= 1) return (f_sem_get(params.rvalAt(0)));
  if (count == 2) return (f_sem_get(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_sem_get(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_sem_get(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawsetstrokelinejoin(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokelinejoin);
  return (f_drawsetstrokelinejoin(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_array_intersect(CArrRef params) {
  FUNCTION_INJECTION(array_intersect);
  int count = params.size();
  if (count <= 2) return (f_array_intersect(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_intersect(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_mailparse_msg_extract_whole_part_file(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_extract_whole_part_file);
  int count = params.size();
  if (count <= 2) return (f_mailparse_msg_extract_whole_part_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_mailparse_msg_extract_whole_part_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mb_strrichr(CArrRef params) {
  FUNCTION_INJECTION(mb_strrichr);
  int count = params.size();
  if (count <= 2) return (f_mb_strrichr(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strrichr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strrichr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_socket_sendto(CArrRef params) {
  FUNCTION_INJECTION(socket_sendto);
  int count = params.size();
  if (count <= 5) return (f_socket_sendto(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_socket_sendto(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_mb_output_handler(CArrRef params) {
  FUNCTION_INJECTION(mb_output_handler);
  return (f_mb_output_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_fclose(CArrRef params) {
  FUNCTION_INJECTION(fclose);
  return (f_fclose(params.rvalAt(0)));
}
Variant i_drawpathcurvetoquadraticbeziersmoothabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbeziersmoothabsolute);
  return (f_drawpathcurvetoquadraticbeziersmoothabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_function_exists(CArrRef params) {
  FUNCTION_INJECTION(function_exists);
  return (f_function_exists(params.rvalAt(0)));
}
Variant i_oci_connect(CArrRef params) {
  FUNCTION_INJECTION(oci_connect);
  int count = params.size();
  if (count <= 2) return (f_oci_connect(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_oci_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_oci_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_oci_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_ctype_alpha(CArrRef params) {
  FUNCTION_INJECTION(ctype_alpha);
  return (f_ctype_alpha(params.rvalAt(0)));
}
Variant i_pos(CArrRef params) {
  FUNCTION_INJECTION(pos);
  return (f_pos(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_imagecolorexactalpha(CArrRef params) {
  FUNCTION_INJECTION(imagecolorexactalpha);
  return (f_imagecolorexactalpha(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_pow(CArrRef params) {
  FUNCTION_INJECTION(pow);
  return (f_pow(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelgetredquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetredquantum);
  return (f_pixelgetredquantum(params.rvalAt(0)));
}
Variant i_imagecolorsforindex(CArrRef params) {
  FUNCTION_INJECTION(imagecolorsforindex);
  return (f_imagecolorsforindex(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_libxml_set_streams_context(CArrRef params) {
  FUNCTION_INJECTION(libxml_set_streams_context);
  return (f_libxml_set_streams_context(params.rvalAt(0)), null);
}
Variant i_image_type_to_mime_type(CArrRef params) {
  FUNCTION_INJECTION(image_type_to_mime_type);
  return (f_image_type_to_mime_type(params.rvalAt(0)));
}
Variant i_socket_create(CArrRef params) {
  FUNCTION_INJECTION(socket_create);
  return (f_socket_create(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_write_pi(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_pi);
  return (f_xmlwriter_write_pi(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_posix_getppid(CArrRef params) {
  FUNCTION_INJECTION(posix_getppid);
  return (f_posix_getppid());
}
Variant i_oci_close(CArrRef params) {
  FUNCTION_INJECTION(oci_close);
  return (f_oci_close(params.rvalAt(0)));
}
Variant i_mb_stripos(CArrRef params) {
  FUNCTION_INJECTION(mb_stripos);
  int count = params.size();
  if (count <= 2) return (f_mb_stripos(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_stripos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_stripos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickpingimage(CArrRef params) {
  FUNCTION_INJECTION(magickpingimage);
  return (f_magickpingimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_bcpowmod(CArrRef params) {
  FUNCTION_INJECTION(bcpowmod);
  int count = params.size();
  if (count <= 3) return (f_bcpowmod(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_bcpowmod(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_timezone_offset_get(CArrRef params) {
  FUNCTION_INJECTION(timezone_offset_get);
  return (f_timezone_offset_get(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_getrandmax(CArrRef params) {
  FUNCTION_INJECTION(getrandmax);
  return (f_getrandmax());
}
Variant i_hphp_splfileobject_fseek(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fseek);
  return (f_hphp_splfileobject_fseek(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ctype_alnum(CArrRef params) {
  FUNCTION_INJECTION(ctype_alnum);
  return (f_ctype_alnum(params.rvalAt(0)));
}
Variant i_tan(CArrRef params) {
  FUNCTION_INJECTION(tan);
  return (f_tan(params.rvalAt(0)));
}
Variant i_set_exception_handler(CArrRef params) {
  FUNCTION_INJECTION(set_exception_handler);
  return (f_set_exception_handler(params.rvalAt(0)));
}
Variant i_imagegrabwindow(CArrRef params) {
  FUNCTION_INJECTION(imagegrabwindow);
  int count = params.size();
  if (count <= 1) return (f_imagegrabwindow(params.rvalAt(0)));
  return (f_imagegrabwindow(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickstereoimage(CArrRef params) {
  FUNCTION_INJECTION(magickstereoimage);
  return (f_magickstereoimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimagescene(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagescene);
  return (f_magickgetimagescene(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_isfile(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_isfile);
  return (f_hphp_splfileinfo_isfile(params.rvalAt(0)));
}
Variant i_openssl_csr_sign(CArrRef params) {
  FUNCTION_INJECTION(openssl_csr_sign);
  int count = params.size();
  if (count <= 4) return (f_openssl_csr_sign(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_openssl_csr_sign(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_openssl_csr_sign(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_openssl_pkcs12_export(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs12_export);
  int count = params.size();
  if (count <= 4) return (f_openssl_pkcs12_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
  return (f_openssl_pkcs12_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_magickgetquantumdepth(CArrRef params) {
  FUNCTION_INJECTION(magickgetquantumdepth);
  return (f_magickgetquantumdepth());
}
Variant i_socket_listen(CArrRef params) {
  FUNCTION_INJECTION(socket_listen);
  int count = params.size();
  if (count <= 1) return (f_socket_listen(params.rvalAt(0)));
  return (f_socket_listen(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_parse_str(CArrRef params) {
  FUNCTION_INJECTION(parse_str);
  int count = params.size();
  if (count <= 1) return (f_parse_str(params.rvalAt(0)), null);
  return (f_parse_str(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))), null);
}
Variant i_sin(CArrRef params) {
  FUNCTION_INJECTION(sin);
  return (f_sin(params.rvalAt(0)));
}
Variant i_cosh(CArrRef params) {
  FUNCTION_INJECTION(cosh);
  return (f_cosh(params.rvalAt(0)));
}
Variant i_copy(CArrRef params) {
  FUNCTION_INJECTION(copy);
  int count = params.size();
  if (count <= 2) return (f_copy(params.rvalAt(0), params.rvalAt(1)));
  return (f_copy(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagechar(CArrRef params) {
  FUNCTION_INJECTION(imagechar);
  return (f_imagechar(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_magicksetimagebackgroundcolor(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagebackgroundcolor);
  return (f_magicksetimagebackgroundcolor(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_mod_add(CArrRef params) {
  FUNCTION_INJECTION(ldap_mod_add);
  return (f_ldap_mod_add(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_fb_thrift_serialize(CArrRef params) {
  FUNCTION_INJECTION(fb_thrift_serialize);
  return (f_fb_thrift_serialize(params.rvalAt(0)));
}
Variant i_posix_ttyname(CArrRef params) {
  FUNCTION_INJECTION(posix_ttyname);
  return (f_posix_ttyname(params.rvalAt(0)));
}
Variant i_filectime(CArrRef params) {
  FUNCTION_INJECTION(filectime);
  return (f_filectime(params.rvalAt(0)));
}
Variant i_newpixelwand(CArrRef params) {
  FUNCTION_INJECTION(newpixelwand);
  int count = params.size();
  if (count <= 0) return (f_newpixelwand());
  return (f_newpixelwand(params.rvalAt(0)));
}
Variant i_pcntl_wait(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wait);
  int count = params.size();
  if (count <= 1) return (f_pcntl_wait(ref(const_cast<Array&>(params).lvalAt(0))));
  return (f_pcntl_wait(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_hypot(CArrRef params) {
  FUNCTION_INJECTION(hypot);
  return (f_hypot(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_parse_url(CArrRef params) {
  FUNCTION_INJECTION(parse_url);
  int count = params.size();
  if (count <= 1) return (f_parse_url(params.rvalAt(0)));
  return (f_parse_url(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickreadimageblob(CArrRef params) {
  FUNCTION_INJECTION(magickreadimageblob);
  return (f_magickreadimageblob(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_eregi(CArrRef params) {
  FUNCTION_INJECTION(eregi);
  int count = params.size();
  if (count <= 2) return (f_eregi(params.rvalAt(0), params.rvalAt(1)));
  return (f_eregi(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_pixelsetcolorcount(CArrRef params) {
  FUNCTION_INJECTION(pixelsetcolorcount);
  return (f_pixelsetcolorcount(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_drawpathcurvetoquadraticbezierrelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbezierrelative);
  return (f_drawpathcurvetoquadraticbezierrelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_posix_getgroups(CArrRef params) {
  FUNCTION_INJECTION(posix_getgroups);
  return (f_posix_getgroups());
}
Variant i_fileinode(CArrRef params) {
  FUNCTION_INJECTION(fileinode);
  return (f_fileinode(params.rvalAt(0)));
}
Variant i_magickgetnumberimages(CArrRef params) {
  FUNCTION_INJECTION(magickgetnumberimages);
  return (f_magickgetnumberimages(params.rvalAt(0)));
}
Variant i_magickgetimagesblob(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagesblob);
  return (f_magickgetimagesblob(params.rvalAt(0)));
}
Variant i_magickcontrastimage(CArrRef params) {
  FUNCTION_INJECTION(magickcontrastimage);
  return (f_magickcontrastimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pcntl_setpriority(CArrRef params) {
  FUNCTION_INJECTION(pcntl_setpriority);
  int count = params.size();
  if (count <= 1) return (f_pcntl_setpriority(params.rvalAt(0)));
  if (count == 2) return (f_pcntl_setpriority(params.rvalAt(0), params.rvalAt(1)));
  return (f_pcntl_setpriority(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawgetfontstretch(CArrRef params) {
  FUNCTION_INJECTION(drawgetfontstretch);
  return (f_drawgetfontstretch(params.rvalAt(0)));
}
Variant i_bcscale(CArrRef params) {
  FUNCTION_INJECTION(bcscale);
  return (f_bcscale(params.rvalAt(0)));
}
Variant i_imageconvolution(CArrRef params) {
  FUNCTION_INJECTION(imageconvolution);
  return (f_imageconvolution(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_utf8_decode(CArrRef params) {
  FUNCTION_INJECTION(utf8_decode);
  return (f_utf8_decode(params.rvalAt(0)));
}
Variant i_ldap_unbind(CArrRef params) {
  FUNCTION_INJECTION(ldap_unbind);
  return (f_ldap_unbind(params.rvalAt(0)));
}
Variant i_newpixelregioniterator(CArrRef params) {
  FUNCTION_INJECTION(newpixelregioniterator);
  return (f_newpixelregioniterator(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_array_intersect_assoc(CArrRef params) {
  FUNCTION_INJECTION(array_intersect_assoc);
  int count = params.size();
  if (count <= 2) return (f_array_intersect_assoc(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_intersect_assoc(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_ob_get_level(CArrRef params) {
  FUNCTION_INJECTION(ob_get_level);
  return (f_ob_get_level());
}
Variant i_hebrev(CArrRef params) {
  FUNCTION_INJECTION(hebrev);
  int count = params.size();
  if (count <= 1) return (f_hebrev(params.rvalAt(0)));
  return (f_hebrev(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_set_block(CArrRef params) {
  FUNCTION_INJECTION(socket_set_block);
  return (f_socket_set_block(params.rvalAt(0)));
}
Variant i_mcrypt_module_close(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_close);
  return (f_mcrypt_module_close(params.rvalAt(0)));
}
Variant i_mb_strwidth(CArrRef params) {
  FUNCTION_INJECTION(mb_strwidth);
  int count = params.size();
  if (count <= 1) return (f_mb_strwidth(params.rvalAt(0)));
  return (f_mb_strwidth(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_clonemagickwand(CArrRef params) {
  FUNCTION_INJECTION(clonemagickwand);
  return (f_clonemagickwand(params.rvalAt(0)));
}
Variant i_pixelgetred(CArrRef params) {
  FUNCTION_INJECTION(pixelgetred);
  return (f_pixelgetred(params.rvalAt(0)));
}
Variant i_ip2long(CArrRef params) {
  FUNCTION_INJECTION(ip2long);
  return (f_ip2long(params.rvalAt(0)));
}
Variant i_mb_stristr(CArrRef params) {
  FUNCTION_INJECTION(mb_stristr);
  int count = params.size();
  if (count <= 2) return (f_mb_stristr(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_stristr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_stristr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_array_diff_ukey(CArrRef params) {
  FUNCTION_INJECTION(array_diff_ukey);
  int count = params.size();
  if (count <= 3) return (f_array_diff_ukey(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_diff_ukey(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_isdrawingwand(CArrRef params) {
  FUNCTION_INJECTION(isdrawingwand);
  return (f_isdrawingwand(params.rvalAt(0)));
}
Variant i_magicksetimagemattecolor(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagemattecolor);
  return (f_magicksetimagemattecolor(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_closedir(CArrRef params) {
  FUNCTION_INJECTION(closedir);
  return (f_closedir(params.rvalAt(0)), null);
}
Variant i_fb_call_user_func_safe_return(CArrRef params) {
  FUNCTION_INJECTION(fb_call_user_func_safe_return);
  int count = params.size();
  if (count <= 2) return (f_fb_call_user_func_safe_return(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_fb_call_user_func_safe_return(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_magickwriteimagesfile(CArrRef params) {
  FUNCTION_INJECTION(magickwriteimagesfile);
  return (f_magickwriteimagesfile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickdescribeimage(CArrRef params) {
  FUNCTION_INJECTION(magickdescribeimage);
  return (f_magickdescribeimage(params.rvalAt(0)));
}
Variant i_imageftbbox(CArrRef params) {
  FUNCTION_INJECTION(imageftbbox);
  int count = params.size();
  if (count <= 4) return (f_imageftbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_imageftbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_magicksetlastiterator(CArrRef params) {
  FUNCTION_INJECTION(magicksetlastiterator);
  return (f_magicksetlastiterator(params.rvalAt(0)), null);
}
Variant i_hphp_output_global_state(CArrRef params) {
  FUNCTION_INJECTION(hphp_output_global_state);
  int count = params.size();
  if (count <= 0) return (f_hphp_output_global_state(), null);
  return (f_hphp_output_global_state(params.rvalAt(0)), null);
}
Variant i_imagefontheight(CArrRef params) {
  FUNCTION_INJECTION(imagefontheight);
  return (f_imagefontheight(params.rvalAt(0)));
}
Variant i_putenv(CArrRef params) {
  FUNCTION_INJECTION(putenv);
  return (f_putenv(params.rvalAt(0)));
}
Variant i_magickedgeimage(CArrRef params) {
  FUNCTION_INJECTION(magickedgeimage);
  return (f_magickedgeimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xml_error_string(CArrRef params) {
  FUNCTION_INJECTION(xml_error_string);
  return (f_xml_error_string(params.rvalAt(0)));
}
Variant i_array_rand(CArrRef params) {
  FUNCTION_INJECTION(array_rand);
  int count = params.size();
  if (count <= 1) return (f_array_rand(params.rvalAt(0)));
  return (f_array_rand(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_mod_del(CArrRef params) {
  FUNCTION_INJECTION(ldap_mod_del);
  return (f_ldap_mod_del(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_range(CArrRef params) {
  FUNCTION_INJECTION(range);
  int count = params.size();
  if (count <= 2) return (f_range(params.rvalAt(0), params.rvalAt(1)));
  return (f_range(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_levenshtein(CArrRef params) {
  FUNCTION_INJECTION(levenshtein);
  int count = params.size();
  if (count <= 2) return (f_levenshtein(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_levenshtein(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_levenshtein(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_levenshtein(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_curl_multi_close(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_close);
  return (f_curl_multi_close(params.rvalAt(0)), null);
}
Variant i_drawgetfillalpha(CArrRef params) {
  FUNCTION_INJECTION(drawgetfillalpha);
  return (f_drawgetfillalpha(params.rvalAt(0)));
}
Variant i_hash_hmac(CArrRef params) {
  FUNCTION_INJECTION(hash_hmac);
  int count = params.size();
  if (count <= 3) return (f_hash_hmac(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_hash_hmac(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_get_html_translation_table(CArrRef params) {
  FUNCTION_INJECTION(get_html_translation_table);
  int count = params.size();
  if (count <= 0) return (f_get_html_translation_table());
  if (count == 1) return (f_get_html_translation_table(params.rvalAt(0)));
  return (f_get_html_translation_table(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_user_error(CArrRef params) {
  FUNCTION_INJECTION(user_error);
  int count = params.size();
  if (count <= 1) return (f_user_error(params.rvalAt(0)));
  return (f_user_error(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_feof(CArrRef params) {
  FUNCTION_INJECTION(feof);
  return (f_feof(params.rvalAt(0)));
}
Variant i_filemtime(CArrRef params) {
  FUNCTION_INJECTION(filemtime);
  return (f_filemtime(params.rvalAt(0)));
}
Variant i_microtime(CArrRef params) {
  FUNCTION_INJECTION(microtime);
  int count = params.size();
  if (count <= 0) return (f_microtime());
  return (f_microtime(params.rvalAt(0)));
}
Variant i_zend_version(CArrRef params) {
  FUNCTION_INJECTION(zend_version);
  return (f_zend_version());
}
Variant i_openssl_x509_free(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_free);
  return (f_openssl_x509_free(params.rvalAt(0)), null);
}
Variant i_fb_call_user_func_safe(CArrRef params) {
  FUNCTION_INJECTION(fb_call_user_func_safe);
  int count = params.size();
  if (count <= 1) return (f_fb_call_user_func_safe(count, params.rvalAt(0)));
  return (f_fb_call_user_func_safe(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_var_export(CArrRef params) {
  FUNCTION_INJECTION(var_export);
  int count = params.size();
  if (count <= 1) return (f_var_export(params.rvalAt(0)));
  return (f_var_export(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_strcut(CArrRef params) {
  FUNCTION_INJECTION(mb_strcut);
  int count = params.size();
  if (count <= 2) return (f_mb_strcut(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strcut(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strcut(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xmlwriter_end_comment(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_comment);
  return (f_xmlwriter_end_comment(params.rvalAt(0)));
}
Variant i_xmlwriter_end_dtd_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_dtd_element);
  return (f_xmlwriter_end_dtd_element(params.rvalAt(0)));
}
Variant i_openssl_pkey_export_to_file(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_export_to_file);
  int count = params.size();
  if (count <= 2) return (f_openssl_pkey_export_to_file(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_openssl_pkey_export_to_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_openssl_pkey_export_to_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_oci_commit(CArrRef params) {
  FUNCTION_INJECTION(oci_commit);
  return (f_oci_commit(params.rvalAt(0)));
}
Variant i_imagecolorclosesthwb(CArrRef params) {
  FUNCTION_INJECTION(imagecolorclosesthwb);
  return (f_imagecolorclosesthwb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_ldap_get_attributes(CArrRef params) {
  FUNCTION_INJECTION(ldap_get_attributes);
  return (f_ldap_get_attributes(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_date_modify(CArrRef params) {
  FUNCTION_INJECTION(date_modify);
  return (f_date_modify(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_hphp_splfileinfo_setinfoclass(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_setinfoclass);
  return (f_hphp_splfileinfo_setinfoclass(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_umask(CArrRef params) {
  FUNCTION_INJECTION(umask);
  int count = params.size();
  if (count <= 0) return (f_umask());
  return (f_umask(params.rvalAt(0)));
}
Variant i_xml_get_current_column_number(CArrRef params) {
  FUNCTION_INJECTION(xml_get_current_column_number);
  return (f_xml_get_current_column_number(params.rvalAt(0)));
}
Variant i_pixelsetblue(CArrRef params) {
  FUNCTION_INJECTION(pixelsetblue);
  return (f_pixelsetblue(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mb_http_output(CArrRef params) {
  FUNCTION_INJECTION(mb_http_output);
  int count = params.size();
  if (count <= 0) return (f_mb_http_output());
  return (f_mb_http_output(params.rvalAt(0)));
}
Variant i_flock(CArrRef params) {
  FUNCTION_INJECTION(flock);
  int count = params.size();
  if (count <= 2) return (f_flock(params.rvalAt(0), params.rvalAt(1)));
  return (f_flock(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_hphp_splfileobject_ftell(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_ftell);
  return (f_hphp_splfileobject_ftell(params.rvalAt(0)));
}
Variant i_pcntl_wifexited(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wifexited);
  return (f_pcntl_wifexited(params.rvalAt(0)));
}
Variant i_magicksetformat(CArrRef params) {
  FUNCTION_INJECTION(magicksetformat);
  return (f_magicksetformat(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_map(CArrRef params) {
  FUNCTION_INJECTION(array_map);
  int count = params.size();
  if (count <= 2) return (f_array_map(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_map(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_magicksharpenimage(CArrRef params) {
  FUNCTION_INJECTION(magicksharpenimage);
  int count = params.size();
  if (count <= 3) return (f_magicksharpenimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magicksharpenimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_is_infinite(CArrRef params) {
  FUNCTION_INJECTION(is_infinite);
  return (f_is_infinite(params.rvalAt(0)));
}
Variant i_date_timezone_set(CArrRef params) {
  FUNCTION_INJECTION(date_timezone_set);
  return (f_date_timezone_set(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mb_ereg_search_init(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search_init);
  int count = params.size();
  if (count <= 1) return (f_mb_ereg_search_init(params.rvalAt(0)));
  if (count == 2) return (f_mb_ereg_search_init(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_ereg_search_init(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawcircle(CArrRef params) {
  FUNCTION_INJECTION(drawcircle);
  return (f_drawcircle(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_is_readable(CArrRef params) {
  FUNCTION_INJECTION(is_readable);
  return (f_is_readable(params.rvalAt(0)));
}
Variant i_image_type_to_extension(CArrRef params) {
  FUNCTION_INJECTION(image_type_to_extension);
  int count = params.size();
  if (count <= 1) return (f_image_type_to_extension(params.rvalAt(0)));
  return (f_image_type_to_extension(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_printf(CArrRef params) {
  FUNCTION_INJECTION(printf);
  int count = params.size();
  if (count <= 1) return (f_printf(count, params.rvalAt(0)));
  return (f_printf(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_magicksetimagecompression(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagecompression);
  return (f_magicksetimagecompression(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_decrypt(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_decrypt);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_decrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mcrypt_decrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_hphp_directoryiterator_next(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_next);
  return (f_hphp_directoryiterator_next(params.rvalAt(0)), null);
}
Variant i_natcasesort(CArrRef params) {
  FUNCTION_INJECTION(natcasesort);
  return (f_natcasesort(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_array_chunk(CArrRef params) {
  FUNCTION_INJECTION(array_chunk);
  int count = params.size();
  if (count <= 2) return (f_array_chunk(params.rvalAt(0), params.rvalAt(1)));
  return (f_array_chunk(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagefilledpolygon(CArrRef params) {
  FUNCTION_INJECTION(imagefilledpolygon);
  return (f_imagefilledpolygon(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawpoppattern(CArrRef params) {
  FUNCTION_INJECTION(drawpoppattern);
  return (f_drawpoppattern(params.rvalAt(0)), null);
}
Variant i_magickgetimagewidth(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagewidth);
  return (f_magickgetimagewidth(params.rvalAt(0)));
}
Variant i_drawgetfontfamily(CArrRef params) {
  FUNCTION_INJECTION(drawgetfontfamily);
  return (f_drawgetfontfamily(params.rvalAt(0)));
}
Variant i_dl(CArrRef params) {
  FUNCTION_INJECTION(dl);
  return (f_dl(params.rvalAt(0)));
}
Variant i_touch(CArrRef params) {
  FUNCTION_INJECTION(touch);
  int count = params.size();
  if (count <= 1) return (f_touch(params.rvalAt(0)));
  if (count == 2) return (f_touch(params.rvalAt(0), params.rvalAt(1)));
  return (f_touch(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_recursivedirectoryiterator___tostring(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator___tostring);
  return (f_hphp_recursivedirectoryiterator___tostring(params.rvalAt(0)));
}
Variant i_magicksetimagebordercolor(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagebordercolor);
  return (f_magicksetimagebordercolor(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_directoryiterator_rewind(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_rewind);
  return (f_hphp_directoryiterator_rewind(params.rvalAt(0)), null);
}
Variant i_magickspliceimage(CArrRef params) {
  FUNCTION_INJECTION(magickspliceimage);
  return (f_magickspliceimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_define(CArrRef params) {
  FUNCTION_INJECTION(define);
  int count = params.size();
  if (count <= 2) return (f_define(params.rvalAt(0), params.rvalAt(1)));
  return (f_define(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_headers_sent(CArrRef params) {
  FUNCTION_INJECTION(headers_sent);
  int count = params.size();
  if (count <= 0) return (f_headers_sent());
  if (count == 1) return (f_headers_sent(ref(const_cast<Array&>(params).lvalAt(0))));
  return (f_headers_sent(ref(const_cast<Array&>(params).lvalAt(0)), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_stream_context_get_options(CArrRef params) {
  FUNCTION_INJECTION(stream_context_get_options);
  return (f_stream_context_get_options(params.rvalAt(0)));
}
Variant i_file(CArrRef params) {
  FUNCTION_INJECTION(file);
  int count = params.size();
  if (count <= 1) return (f_file(params.rvalAt(0)));
  if (count == 2) return (f_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagecolorresolvealpha(CArrRef params) {
  FUNCTION_INJECTION(imagecolorresolvealpha);
  return (f_imagecolorresolvealpha(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_strtr(CArrRef params) {
  FUNCTION_INJECTION(strtr);
  int count = params.size();
  if (count <= 2) return (f_strtr(params.rvalAt(0), params.rvalAt(1)));
  return (f_strtr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_posix_strerror(CArrRef params) {
  FUNCTION_INJECTION(posix_strerror);
  return (f_posix_strerror(params.rvalAt(0)));
}
Variant i_libxml_use_internal_errors(CArrRef params) {
  FUNCTION_INJECTION(libxml_use_internal_errors);
  int count = params.size();
  if (count <= 0) return (f_libxml_use_internal_errors());
  return (f_libxml_use_internal_errors(params.rvalAt(0)));
}
Variant i_openssl_get_publickey(CArrRef params) {
  FUNCTION_INJECTION(openssl_get_publickey);
  return (f_openssl_get_publickey(params.rvalAt(0)));
}
Variant i_time_nanosleep(CArrRef params) {
  FUNCTION_INJECTION(time_nanosleep);
  return (f_time_nanosleep(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetimageunits(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageunits);
  return (f_magicksetimageunits(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_floor(CArrRef params) {
  FUNCTION_INJECTION(floor);
  return (f_floor(params.rvalAt(0)));
}
Variant i_array_pad(CArrRef params) {
  FUNCTION_INJECTION(array_pad);
  return (f_array_pad(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_sem_release(CArrRef params) {
  FUNCTION_INJECTION(sem_release);
  return (f_sem_release(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getctime(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getctime);
  return (f_hphp_splfileinfo_getctime(params.rvalAt(0)));
}
Variant i_highlight_string(CArrRef params) {
  FUNCTION_INJECTION(highlight_string);
  int count = params.size();
  if (count <= 1) return (f_highlight_string(params.rvalAt(0)));
  return (f_highlight_string(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_invoke(CArrRef params) {
  FUNCTION_INJECTION(hphp_invoke);
  return (f_hphp_invoke(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imageloadfont(CArrRef params) {
  FUNCTION_INJECTION(imageloadfont);
  return (f_imageloadfont(params.rvalAt(0)));
}
Variant i_xmlwriter_start_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_element);
  return (f_xmlwriter_start_element(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_localeconv(CArrRef params) {
  FUNCTION_INJECTION(localeconv);
  return (f_localeconv());
}
Variant i_exif_thumbnail(CArrRef params) {
  FUNCTION_INJECTION(exif_thumbnail);
  int count = params.size();
  if (count <= 1) return (f_exif_thumbnail(params.rvalAt(0)));
  if (count == 2) return (f_exif_thumbnail(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  if (count == 3) return (f_exif_thumbnail(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_exif_thumbnail(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_mysql_get_proto_info(CArrRef params) {
  FUNCTION_INJECTION(mysql_get_proto_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_get_proto_info());
  return (f_mysql_get_proto_info(params.rvalAt(0)));
}
Variant i_imagefontwidth(CArrRef params) {
  FUNCTION_INJECTION(imagefontwidth);
  return (f_imagefontwidth(params.rvalAt(0)));
}
Variant i_substr_compare(CArrRef params) {
  FUNCTION_INJECTION(substr_compare);
  int count = params.size();
  if (count <= 3) return (f_substr_compare(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_substr_compare(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_substr_compare(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_xbox_post_message(CArrRef params) {
  FUNCTION_INJECTION(xbox_post_message);
  int count = params.size();
  if (count <= 1) return (f_xbox_post_message(params.rvalAt(0)));
  return (f_xbox_post_message(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_fb_rename_function(CArrRef params) {
  FUNCTION_INJECTION(fb_rename_function);
  return (f_fb_rename_function(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_walk_recursive(CArrRef params) {
  FUNCTION_INJECTION(array_walk_recursive);
  int count = params.size();
  if (count <= 2) return (f_array_walk_recursive(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_array_walk_recursive(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mysql_list_processes(CArrRef params) {
  FUNCTION_INJECTION(mysql_list_processes);
  int count = params.size();
  if (count <= 0) return (f_mysql_list_processes());
  return (f_mysql_list_processes(params.rvalAt(0)));
}
Variant i_imagedashedline(CArrRef params) {
  FUNCTION_INJECTION(imagedashedline);
  return (f_imagedashedline(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_magickgetimagedelay(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagedelay);
  return (f_magickgetimagedelay(params.rvalAt(0)));
}
Variant i_pi(CArrRef params) {
  FUNCTION_INJECTION(pi);
  return (f_pi());
}
Variant i_mb_substr_count(CArrRef params) {
  FUNCTION_INJECTION(mb_substr_count);
  int count = params.size();
  if (count <= 2) return (f_mb_substr_count(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_substr_count(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_splfileinfo_getinode(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getinode);
  return (f_hphp_splfileinfo_getinode(params.rvalAt(0)));
}
Variant i_magickgettextdescent(CArrRef params) {
  FUNCTION_INJECTION(magickgettextdescent);
  int count = params.size();
  if (count <= 3) return (f_magickgettextdescent(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgettextdescent(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawsetstrokealpha(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokealpha);
  return (f_drawsetstrokealpha(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_apc_delete_file(CArrRef params) {
  FUNCTION_INJECTION(apc_delete_file);
  int count = params.size();
  if (count <= 1) return (f_apc_delete_file(params.rvalAt(0)));
  return (f_apc_delete_file(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_strrpos(CArrRef params) {
  FUNCTION_INJECTION(strrpos);
  int count = params.size();
  if (count <= 2) return (f_strrpos(params.rvalAt(0), params.rvalAt(1)));
  return (f_strrpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_array_diff_assoc(CArrRef params) {
  FUNCTION_INJECTION(array_diff_assoc);
  int count = params.size();
  if (count <= 2) return (f_array_diff_assoc(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_diff_assoc(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_magickclippathimage(CArrRef params) {
  FUNCTION_INJECTION(magickclippathimage);
  return (f_magickclippathimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_write_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_element);
  int count = params.size();
  if (count <= 2) return (f_xmlwriter_write_element(params.rvalAt(0), params.rvalAt(1)));
  return (f_xmlwriter_write_element(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ascii2ebcdic(CArrRef params) {
  FUNCTION_INJECTION(ascii2ebcdic);
  return (f_ascii2ebcdic(params.rvalAt(0)));
}
Variant i_ereg(CArrRef params) {
  FUNCTION_INJECTION(ereg);
  int count = params.size();
  if (count <= 2) return (f_ereg(params.rvalAt(0), params.rvalAt(1)));
  return (f_ereg(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_curl_multi_info_read(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_info_read);
  int count = params.size();
  if (count <= 1) return (f_curl_multi_info_read(params.rvalAt(0)));
  return (f_curl_multi_info_read(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_oci_field_size(CArrRef params) {
  FUNCTION_INJECTION(oci_field_size);
  return (f_oci_field_size(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickthresholdimage(CArrRef params) {
  FUNCTION_INJECTION(magickthresholdimage);
  int count = params.size();
  if (count <= 2) return (f_magickthresholdimage(params.rvalAt(0), params.rvalAt(1)));
  return (f_magickthresholdimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_msg_remove_queue(CArrRef params) {
  FUNCTION_INJECTION(msg_remove_queue);
  return (f_msg_remove_queue(params.rvalAt(0)));
}
Variant i_mb_strlen(CArrRef params) {
  FUNCTION_INJECTION(mb_strlen);
  int count = params.size();
  if (count <= 1) return (f_mb_strlen(params.rvalAt(0)));
  return (f_mb_strlen(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetclippath(CArrRef params) {
  FUNCTION_INJECTION(drawgetclippath);
  return (f_drawgetclippath(params.rvalAt(0)));
}
Variant i_imagecopy(CArrRef params) {
  FUNCTION_INJECTION(imagecopy);
  return (f_imagecopy(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_pixelsetcolor(CArrRef params) {
  FUNCTION_INJECTION(pixelsetcolor);
  return (f_pixelsetcolor(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_time_sleep_until(CArrRef params) {
  FUNCTION_INJECTION(time_sleep_until);
  return (f_time_sleep_until(params.rvalAt(0)));
}
Variant i_mb_ereg_replace(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_replace);
  int count = params.size();
  if (count <= 3) return (f_mb_ereg_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_ereg_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_openssl_csr_get_public_key(CArrRef params) {
  FUNCTION_INJECTION(openssl_csr_get_public_key);
  return (f_openssl_csr_get_public_key(params.rvalAt(0)));
}
Variant i_magickfximage(CArrRef params) {
  FUNCTION_INJECTION(magickfximage);
  int count = params.size();
  if (count <= 2) return (f_magickfximage(params.rvalAt(0), params.rvalAt(1)));
  return (f_magickfximage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_tmpfile(CArrRef params) {
  FUNCTION_INJECTION(tmpfile);
  return (f_tmpfile());
}
Variant i_hash(CArrRef params) {
  FUNCTION_INJECTION(hash);
  int count = params.size();
  if (count <= 2) return (f_hash(params.rvalAt(0), params.rvalAt(1)));
  return (f_hash(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_uasort(CArrRef params) {
  FUNCTION_INJECTION(uasort);
  return (f_uasort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_pixelgetalpha(CArrRef params) {
  FUNCTION_INJECTION(pixelgetalpha);
  return (f_pixelgetalpha(params.rvalAt(0)));
}
Variant i_drawsettextencoding(CArrRef params) {
  FUNCTION_INJECTION(drawsettextencoding);
  return (f_drawsettextencoding(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_apache_request_headers(CArrRef params) {
  FUNCTION_INJECTION(apache_request_headers);
  return (f_apache_request_headers());
}
Variant i_is_subclass_of(CArrRef params) {
  FUNCTION_INJECTION(is_subclass_of);
  return (f_is_subclass_of(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelgetmagentaquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetmagentaquantum);
  return (f_pixelgetmagentaquantum(params.rvalAt(0)));
}
Variant i_hphp_get_static_property(CArrRef params) {
  FUNCTION_INJECTION(hphp_get_static_property);
  return (f_hphp_get_static_property(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_pop(CArrRef params) {
  FUNCTION_INJECTION(array_pop);
  return (f_array_pop(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_magickgetimagecolors(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagecolors);
  return (f_magickgetimagecolors(params.rvalAt(0)));
}
Variant i_class_exists(CArrRef params) {
  FUNCTION_INJECTION(class_exists);
  int count = params.size();
  if (count <= 1) return (f_class_exists(params.rvalAt(0)));
  return (f_class_exists(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_getallheaders(CArrRef params) {
  FUNCTION_INJECTION(getallheaders);
  return (f_getallheaders());
}
Variant i_get_extension_funcs(CArrRef params) {
  FUNCTION_INJECTION(get_extension_funcs);
  return (f_get_extension_funcs(params.rvalAt(0)));
}
Variant i_imagecolordeallocate(CArrRef params) {
  FUNCTION_INJECTION(imagecolordeallocate);
  return (f_imagecolordeallocate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_closelog(CArrRef params) {
  FUNCTION_INJECTION(closelog);
  return (f_closelog(), null);
}
Variant i_drawpathlinetoabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathlinetoabsolute);
  return (f_drawpathlinetoabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_mcrypt_enc_get_iv_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_get_iv_size);
  return (f_mcrypt_enc_get_iv_size(params.rvalAt(0)));
}
Variant i_json_decode(CArrRef params) {
  FUNCTION_INJECTION(json_decode);
  int count = params.size();
  if (count <= 1) return (f_json_decode(params.rvalAt(0)));
  if (count == 2) return (f_json_decode(params.rvalAt(0), params.rvalAt(1)));
  return (f_json_decode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_preg_replace(CArrRef params) {
  FUNCTION_INJECTION(preg_replace);
  int count = params.size();
  if (count <= 3) return (f_preg_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_preg_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_preg_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4))));
}
Variant i_hphp_splfileinfo_getmtime(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getmtime);
  return (f_hphp_splfileinfo_getmtime(params.rvalAt(0)));
}
Variant i_fmod(CArrRef params) {
  FUNCTION_INJECTION(fmod);
  return (f_fmod(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_curl_errno(CArrRef params) {
  FUNCTION_INJECTION(curl_errno);
  return (f_curl_errno(params.rvalAt(0)));
}
Variant i_pagelet_server_task_start(CArrRef params) {
  FUNCTION_INJECTION(pagelet_server_task_start);
  int count = params.size();
  if (count <= 1) return (f_pagelet_server_task_start(params.rvalAt(0)));
  if (count == 2) return (f_pagelet_server_task_start(params.rvalAt(0), params.rvalAt(1)));
  return (f_pagelet_server_task_start(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hash_init(CArrRef params) {
  FUNCTION_INJECTION(hash_init);
  int count = params.size();
  if (count <= 1) return (f_hash_init(params.rvalAt(0)));
  if (count == 2) return (f_hash_init(params.rvalAt(0), params.rvalAt(1)));
  return (f_hash_init(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mb_strripos(CArrRef params) {
  FUNCTION_INJECTION(mb_strripos);
  int count = params.size();
  if (count <= 2) return (f_mb_strripos(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strripos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strripos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mysql_fetch_row(CArrRef params) {
  FUNCTION_INJECTION(mysql_fetch_row);
  return (f_mysql_fetch_row(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_setcsvcontrol(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_setcsvcontrol);
  return (f_hphp_splfileobject_setcsvcontrol(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_ob_get_flush(CArrRef params) {
  FUNCTION_INJECTION(ob_get_flush);
  return (f_ob_get_flush());
}
Variant i_curl_error(CArrRef params) {
  FUNCTION_INJECTION(curl_error);
  return (f_curl_error(params.rvalAt(0)));
}
Variant i_oci_new_connect(CArrRef params) {
  FUNCTION_INJECTION(oci_new_connect);
  int count = params.size();
  if (count <= 2) return (f_oci_new_connect(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_oci_new_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_oci_new_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_oci_new_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_set_magic_quotes_runtime(CArrRef params) {
  FUNCTION_INJECTION(set_magic_quotes_runtime);
  return (f_set_magic_quotes_runtime(params.rvalAt(0)));
}
Variant i_magickcharcoalimage(CArrRef params) {
  FUNCTION_INJECTION(magickcharcoalimage);
  return (f_magickcharcoalimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_scandir(CArrRef params) {
  FUNCTION_INJECTION(scandir);
  int count = params.size();
  if (count <= 1) return (f_scandir(params.rvalAt(0)));
  if (count == 2) return (f_scandir(params.rvalAt(0), params.rvalAt(1)));
  return (f_scandir(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickmosaicimages(CArrRef params) {
  FUNCTION_INJECTION(magickmosaicimages);
  return (f_magickmosaicimages(params.rvalAt(0)));
}
Variant i_timezone_transitions_get(CArrRef params) {
  FUNCTION_INJECTION(timezone_transitions_get);
  return (f_timezone_transitions_get(params.rvalAt(0)));
}
Variant i_drawsetfontweight(CArrRef params) {
  FUNCTION_INJECTION(drawsetfontweight);
  return (f_drawsetfontweight(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_popdrawingwand(CArrRef params) {
  FUNCTION_INJECTION(popdrawingwand);
  return (f_popdrawingwand(params.rvalAt(0)), null);
}
Variant i_socket_shutdown(CArrRef params) {
  FUNCTION_INJECTION(socket_shutdown);
  int count = params.size();
  if (count <= 1) return (f_socket_shutdown(params.rvalAt(0)));
  return (f_socket_shutdown(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_create_iv(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_create_iv);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_create_iv(params.rvalAt(0)));
  return (f_mcrypt_create_iv(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_eval(CArrRef params) {
  FUNCTION_INJECTION(eval);
  return (f_eval(params.rvalAt(0)));
}
Variant i_bindec(CArrRef params) {
  FUNCTION_INJECTION(bindec);
  return (f_bindec(params.rvalAt(0)));
}
Variant i_fileperms(CArrRef params) {
  FUNCTION_INJECTION(fileperms);
  return (f_fileperms(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_fstat(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fstat);
  return (f_hphp_splfileobject_fstat(params.rvalAt(0)));
}
Variant i_unserialize(CArrRef params) {
  FUNCTION_INJECTION(unserialize);
  return (f_unserialize(params.rvalAt(0)));
}
Variant i_ldap_t61_to_8859(CArrRef params) {
  FUNCTION_INJECTION(ldap_t61_to_8859);
  return (f_ldap_t61_to_8859(params.rvalAt(0)));
}
Variant i_urldecode(CArrRef params) {
  FUNCTION_INJECTION(urldecode);
  return (f_urldecode(params.rvalAt(0)));
}
Variant i_magickannotateimage(CArrRef params) {
  FUNCTION_INJECTION(magickannotateimage);
  return (f_magickannotateimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_mailparse_msg_create(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_create);
  return (f_mailparse_msg_create());
}
Variant i_oci_field_type_raw(CArrRef params) {
  FUNCTION_INJECTION(oci_field_type_raw);
  return (f_oci_field_type_raw(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apache_get_modules(CArrRef params) {
  FUNCTION_INJECTION(apache_get_modules);
  return (f_apache_get_modules());
}
Variant i_drawellipse(CArrRef params) {
  FUNCTION_INJECTION(drawellipse);
  return (f_drawellipse(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)), null);
}
Variant i_xmlwriter_write_element_ns(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_element_ns);
  int count = params.size();
  if (count <= 4) return (f_xmlwriter_write_element_ns(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_xmlwriter_write_element_ns(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_magicksetcompressionquality(CArrRef params) {
  FUNCTION_INJECTION(magicksetcompressionquality);
  return (f_magicksetcompressionquality(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickaddnoiseimage(CArrRef params) {
  FUNCTION_INJECTION(magickaddnoiseimage);
  return (f_magickaddnoiseimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimagewhitepoint(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagewhitepoint);
  return (f_magickgetimagewhitepoint(params.rvalAt(0)));
}
Variant i_magickseparateimagechannel(CArrRef params) {
  FUNCTION_INJECTION(magickseparateimagechannel);
  return (f_magickseparateimagechannel(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_push(CArrRef params) {
  FUNCTION_INJECTION(array_push);
  int count = params.size();
  if (count <= 2) return (f_array_push(count, ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_array_push(count,ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_flush(CArrRef params) {
  FUNCTION_INJECTION(flush);
  return (f_flush(), null);
}
Variant i_connection_aborted(CArrRef params) {
  FUNCTION_INJECTION(connection_aborted);
  return (f_connection_aborted());
}
Variant i_uksort(CArrRef params) {
  FUNCTION_INJECTION(uksort);
  return (f_uksort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_mysql_set_timeout(CArrRef params) {
  FUNCTION_INJECTION(mysql_set_timeout);
  int count = params.size();
  if (count <= 0) return (f_mysql_set_timeout());
  if (count == 1) return (f_mysql_set_timeout(params.rvalAt(0)));
  return (f_mysql_set_timeout(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hash_update_stream(CArrRef params) {
  FUNCTION_INJECTION(hash_update_stream);
  int count = params.size();
  if (count <= 2) return (f_hash_update_stream(params.rvalAt(0), params.rvalAt(1)));
  return (f_hash_update_stream(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ob_start(CArrRef params) {
  FUNCTION_INJECTION(ob_start);
  int count = params.size();
  if (count <= 0) return (f_ob_start());
  if (count == 1) return (f_ob_start(params.rvalAt(0)));
  if (count == 2) return (f_ob_start(params.rvalAt(0), params.rvalAt(1)));
  return (f_ob_start(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mysql_get_host_info(CArrRef params) {
  FUNCTION_INJECTION(mysql_get_host_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_get_host_info());
  return (f_mysql_get_host_info(params.rvalAt(0)));
}
Variant i_mb_language(CArrRef params) {
  FUNCTION_INJECTION(mb_language);
  int count = params.size();
  if (count <= 0) return (f_mb_language());
  return (f_mb_language(params.rvalAt(0)));
}
Variant i_pixelgetnextiteratorrow(CArrRef params) {
  FUNCTION_INJECTION(pixelgetnextiteratorrow);
  return (f_pixelgetnextiteratorrow(params.rvalAt(0)));
}
Variant i_ldap_next_reference(CArrRef params) {
  FUNCTION_INJECTION(ldap_next_reference);
  return (f_ldap_next_reference(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_get_status(CArrRef params) {
  FUNCTION_INJECTION(socket_get_status);
  return (f_socket_get_status(params.rvalAt(0)));
}
Variant i_checkdnsrr(CArrRef params) {
  FUNCTION_INJECTION(checkdnsrr);
  int count = params.size();
  if (count <= 1) return (f_checkdnsrr(params.rvalAt(0)));
  return (f_checkdnsrr(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_openssl_verify(CArrRef params) {
  FUNCTION_INJECTION(openssl_verify);
  int count = params.size();
  if (count <= 3) return (f_openssl_verify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_openssl_verify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_curl_exec(CArrRef params) {
  FUNCTION_INJECTION(curl_exec);
  return (f_curl_exec(params.rvalAt(0)));
}
Variant i_magickgetexceptiontype(CArrRef params) {
  FUNCTION_INJECTION(magickgetexceptiontype);
  return (f_magickgetexceptiontype(params.rvalAt(0)));
}
Variant i_array_sum(CArrRef params) {
  FUNCTION_INJECTION(array_sum);
  return (f_array_sum(params.rvalAt(0)));
}
Variant i_unregister_tick_function(CArrRef params) {
  FUNCTION_INJECTION(unregister_tick_function);
  return (f_unregister_tick_function(params.rvalAt(0)), null);
}
Variant i_newpixelwandarray(CArrRef params) {
  FUNCTION_INJECTION(newpixelwandarray);
  return (f_newpixelwandarray(params.rvalAt(0)));
}
Variant i_magickgetversion(CArrRef params) {
  FUNCTION_INJECTION(magickgetversion);
  return (f_magickgetversion());
}
Variant i_imagelayereffect(CArrRef params) {
  FUNCTION_INJECTION(imagelayereffect);
  return (f_imagelayereffect(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apache_reset_timeout(CArrRef params) {
  FUNCTION_INJECTION(apache_reset_timeout);
  return (f_apache_reset_timeout());
}
Variant i_glob(CArrRef params) {
  FUNCTION_INJECTION(glob);
  int count = params.size();
  if (count <= 1) return (f_glob(params.rvalAt(0)));
  return (f_glob(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_exec(CArrRef params) {
  FUNCTION_INJECTION(exec);
  int count = params.size();
  if (count <= 1) return (f_exec(params.rvalAt(0)));
  if (count == 2) return (f_exec(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_exec(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_apd_continue(CArrRef params) {
  FUNCTION_INJECTION(apd_continue);
  return (f_apd_continue());
}
Variant i_magickgetimagedepth(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagedepth);
  int count = params.size();
  if (count <= 1) return (f_magickgetimagedepth(params.rvalAt(0)));
  return (f_magickgetimagedepth(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pclose(CArrRef params) {
  FUNCTION_INJECTION(pclose);
  return (f_pclose(params.rvalAt(0)));
}
Variant i_get_parent_class(CArrRef params) {
  FUNCTION_INJECTION(get_parent_class);
  int count = params.size();
  if (count <= 0) return (f_get_parent_class());
  return (f_get_parent_class(params.rvalAt(0)));
}
Variant i_mb_strpos(CArrRef params) {
  FUNCTION_INJECTION(mb_strpos);
  int count = params.size();
  if (count <= 2) return (f_mb_strpos(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xmlwriter_write_dtd_attlist(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_dtd_attlist);
  return (f_xmlwriter_write_dtd_attlist(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xml_set_element_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_element_handler);
  return (f_xml_set_element_handler(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawgetstrokeopacity(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokeopacity);
  return (f_drawgetstrokeopacity(params.rvalAt(0)));
}
Variant i_ldap_get_entries(CArrRef params) {
  FUNCTION_INJECTION(ldap_get_entries);
  return (f_ldap_get_entries(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ob_iconv_handler(CArrRef params) {
  FUNCTION_INJECTION(ob_iconv_handler);
  return (f_ob_iconv_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pathinfo(CArrRef params) {
  FUNCTION_INJECTION(pathinfo);
  int count = params.size();
  if (count <= 1) return (f_pathinfo(params.rvalAt(0)));
  return (f_pathinfo(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickaffinetransformimage(CArrRef params) {
  FUNCTION_INJECTION(magickaffinetransformimage);
  return (f_magickaffinetransformimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ob_get_status(CArrRef params) {
  FUNCTION_INJECTION(ob_get_status);
  int count = params.size();
  if (count <= 0) return (f_ob_get_status());
  return (f_ob_get_status(params.rvalAt(0)));
}
Variant i_exit(CArrRef params) {
  FUNCTION_INJECTION(exit);
  int count = params.size();
  if (count <= 0) return (f_exit());
  return (f_exit(params.rvalAt(0)));
}
Variant i_apc_sma_info(CArrRef params) {
  FUNCTION_INJECTION(apc_sma_info);
  int count = params.size();
  if (count <= 0) return (f_apc_sma_info());
  return (f_apc_sma_info(params.rvalAt(0)));
}
Variant i_ldap_bind(CArrRef params) {
  FUNCTION_INJECTION(ldap_bind);
  int count = params.size();
  if (count <= 1) return (f_ldap_bind(params.rvalAt(0)));
  if (count == 2) return (f_ldap_bind(params.rvalAt(0), params.rvalAt(1)));
  return (f_ldap_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelsetbluequantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetbluequantum);
  return (f_pixelsetbluequantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickreadimagefile(CArrRef params) {
  FUNCTION_INJECTION(magickreadimagefile);
  return (f_magickreadimagefile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ebcdic2ascii(CArrRef params) {
  FUNCTION_INJECTION(ebcdic2ascii);
  return (f_ebcdic2ascii(params.rvalAt(0)));
}
Variant i_mysql_real_escape_string(CArrRef params) {
  FUNCTION_INJECTION(mysql_real_escape_string);
  int count = params.size();
  if (count <= 1) return (f_mysql_real_escape_string(params.rvalAt(0)));
  return (f_mysql_real_escape_string(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickframeimage(CArrRef params) {
  FUNCTION_INJECTION(magickframeimage);
  return (f_magickframeimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_pixelgetblue(CArrRef params) {
  FUNCTION_INJECTION(pixelgetblue);
  return (f_pixelgetblue(params.rvalAt(0)));
}
Variant i_imagefill(CArrRef params) {
  FUNCTION_INJECTION(imagefill);
  return (f_imagefill(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hphp_set_property(CArrRef params) {
  FUNCTION_INJECTION(hphp_set_property);
  return (f_hphp_set_property(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_oci_execute(CArrRef params) {
  FUNCTION_INJECTION(oci_execute);
  int count = params.size();
  if (count <= 1) return (f_oci_execute(params.rvalAt(0)));
  return (f_oci_execute(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_cancel(CArrRef params) {
  FUNCTION_INJECTION(oci_cancel);
  return (f_oci_cancel(params.rvalAt(0)));
}
Variant i_readgzfile(CArrRef params) {
  FUNCTION_INJECTION(readgzfile);
  int count = params.size();
  if (count <= 1) return (f_readgzfile(params.rvalAt(0)));
  return (f_readgzfile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksampleimage(CArrRef params) {
  FUNCTION_INJECTION(magicksampleimage);
  return (f_magicksampleimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mysql_escape_string(CArrRef params) {
  FUNCTION_INJECTION(mysql_escape_string);
  return (f_mysql_escape_string(params.rvalAt(0)));
}
Variant i_idn_to_utf8(CArrRef params) {
  FUNCTION_INJECTION(idn_to_utf8);
  int count = params.size();
  if (count <= 1) return (f_idn_to_utf8(params.rvalAt(0)));
  return (f_idn_to_utf8(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_sql_regcase(CArrRef params) {
  FUNCTION_INJECTION(sql_regcase);
  return (f_sql_regcase(params.rvalAt(0)));
}
Variant i_in_array(CArrRef params) {
  FUNCTION_INJECTION(in_array);
  int count = params.size();
  if (count <= 2) return (f_in_array(params.rvalAt(0), params.rvalAt(1)));
  return (f_in_array(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawpathcurvetoquadraticbezierabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbezierabsolute);
  return (f_drawpathcurvetoquadraticbezierabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_apache_getenv(CArrRef params) {
  FUNCTION_INJECTION(apache_getenv);
  int count = params.size();
  if (count <= 1) return (f_apache_getenv(params.rvalAt(0)));
  return (f_apache_getenv(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_set_timeout(CArrRef params) {
  FUNCTION_INJECTION(socket_set_timeout);
  int count = params.size();
  if (count <= 2) return (f_socket_set_timeout(params.rvalAt(0), params.rvalAt(1)));
  return (f_socket_set_timeout(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_bin2hex(CArrRef params) {
  FUNCTION_INJECTION(bin2hex);
  return (f_bin2hex(params.rvalAt(0)));
}
Variant i_error_get_last(CArrRef params) {
  FUNCTION_INJECTION(error_get_last);
  return (f_error_get_last());
}
Variant i_is_link(CArrRef params) {
  FUNCTION_INJECTION(is_link);
  return (f_is_link(params.rvalAt(0)));
}
Variant i_set_file_buffer(CArrRef params) {
  FUNCTION_INJECTION(set_file_buffer);
  return (f_set_file_buffer(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetimageredprimary(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageredprimary);
  return (f_magicksetimageredprimary(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_i18n_loc_set_default(CArrRef params) {
  FUNCTION_INJECTION(i18n_loc_set_default);
  return (f_i18n_loc_set_default(params.rvalAt(0)));
}
Variant i_ftok(CArrRef params) {
  FUNCTION_INJECTION(ftok);
  return (f_ftok(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_list_fields(CArrRef params) {
  FUNCTION_INJECTION(mysql_list_fields);
  int count = params.size();
  if (count <= 2) return (f_mysql_list_fields(params.rvalAt(0), params.rvalAt(1)));
  return (f_mysql_list_fields(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stream_wrapper_register(CArrRef params) {
  FUNCTION_INJECTION(stream_wrapper_register);
  return (f_stream_wrapper_register(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelsetredquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetredquantum);
  return (f_pixelsetredquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_xhprof_disable(CArrRef params) {
  FUNCTION_INJECTION(xhprof_disable);
  return (f_xhprof_disable());
}
Variant i_magickgammaimage(CArrRef params) {
  FUNCTION_INJECTION(magickgammaimage);
  int count = params.size();
  if (count <= 2) return (f_magickgammaimage(params.rvalAt(0), params.rvalAt(1)));
  return (f_magickgammaimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelsetcyan(CArrRef params) {
  FUNCTION_INJECTION(pixelsetcyan);
  return (f_pixelsetcyan(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mb_decode_mimeheader(CArrRef params) {
  FUNCTION_INJECTION(mb_decode_mimeheader);
  return (f_mb_decode_mimeheader(params.rvalAt(0)));
}
Variant i_htmlentities(CArrRef params) {
  FUNCTION_INJECTION(htmlentities);
  int count = params.size();
  if (count <= 1) return (f_htmlentities(params.rvalAt(0)));
  if (count == 2) return (f_htmlentities(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_htmlentities(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_htmlentities(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_rad2deg(CArrRef params) {
  FUNCTION_INJECTION(rad2deg);
  return (f_rad2deg(params.rvalAt(0)));
}
Variant i_xmlwriter_start_dtd(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_dtd);
  int count = params.size();
  if (count <= 2) return (f_xmlwriter_start_dtd(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_xmlwriter_start_dtd(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_xmlwriter_start_dtd(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawpathstart(CArrRef params) {
  FUNCTION_INJECTION(drawpathstart);
  return (f_drawpathstart(params.rvalAt(0)), null);
}
Variant i_proc_nice(CArrRef params) {
  FUNCTION_INJECTION(proc_nice);
  return (f_proc_nice(params.rvalAt(0)));
}
Variant i_hphp_thread_is_warmup_enabled(CArrRef params) {
  FUNCTION_INJECTION(hphp_thread_is_warmup_enabled);
  return (f_hphp_thread_is_warmup_enabled());
}
Variant i_imagepsslantfont(CArrRef params) {
  FUNCTION_INJECTION(imagepsslantfont);
  return (f_imagepsslantfont(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimagemattecolor(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagemattecolor);
  return (f_magickgetimagemattecolor(params.rvalAt(0)));
}
Variant i_mb_strstr(CArrRef params) {
  FUNCTION_INJECTION(mb_strstr);
  int count = params.size();
  if (count <= 2) return (f_mb_strstr(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strstr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strstr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_pixelgetblack(CArrRef params) {
  FUNCTION_INJECTION(pixelgetblack);
  return (f_pixelgetblack(params.rvalAt(0)));
}
Variant i_mysql_field_table(CArrRef params) {
  FUNCTION_INJECTION(mysql_field_table);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_table(params.rvalAt(0)));
  return (f_mysql_field_table(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetimagescene(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagescene);
  return (f_magicksetimagescene(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimagerenderingintent(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagerenderingintent);
  return (f_magickgetimagerenderingintent(params.rvalAt(0)));
}
Variant i_setlocale(CArrRef params) {
  FUNCTION_INJECTION(setlocale);
  int count = params.size();
  if (count <= 2) return (f_setlocale(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_setlocale(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_drawpushclippath(CArrRef params) {
  FUNCTION_INJECTION(drawpushclippath);
  return (f_drawpushclippath(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_drawpopclippath(CArrRef params) {
  FUNCTION_INJECTION(drawpopclippath);
  return (f_drawpopclippath(params.rvalAt(0)), null);
}
Variant i_nl2br(CArrRef params) {
  FUNCTION_INJECTION(nl2br);
  return (f_nl2br(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getperms(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getperms);
  return (f_hphp_splfileinfo_getperms(params.rvalAt(0)));
}
Variant i_drawsetfillopacity(CArrRef params) {
  FUNCTION_INJECTION(drawsetfillopacity);
  return (f_drawsetfillopacity(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mb_substitute_character(CArrRef params) {
  FUNCTION_INJECTION(mb_substitute_character);
  int count = params.size();
  if (count <= 0) return (f_mb_substitute_character());
  return (f_mb_substitute_character(params.rvalAt(0)));
}
Variant i_setrawcookie(CArrRef params) {
  FUNCTION_INJECTION(setrawcookie);
  int count = params.size();
  if (count <= 1) return (f_setrawcookie(params.rvalAt(0)));
  if (count == 2) return (f_setrawcookie(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_setrawcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_setrawcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_setrawcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_setrawcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_setrawcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_evhttp_get(CArrRef params) {
  FUNCTION_INJECTION(evhttp_get);
  int count = params.size();
  if (count <= 1) return (f_evhttp_get(params.rvalAt(0)));
  if (count == 2) return (f_evhttp_get(params.rvalAt(0), params.rvalAt(1)));
  return (f_evhttp_get(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_getimagesize(CArrRef params) {
  FUNCTION_INJECTION(getimagesize);
  int count = params.size();
  if (count <= 1) return (f_getimagesize(params.rvalAt(0)));
  return (f_getimagesize(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_ldap_modify(CArrRef params) {
  FUNCTION_INJECTION(ldap_modify);
  return (f_ldap_modify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ldap_search(CArrRef params) {
  FUNCTION_INJECTION(ldap_search);
  int count = params.size();
  if (count <= 3) return (f_ldap_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_ldap_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_ldap_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_ldap_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  if (count == 7) return (f_ldap_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
  return (f_ldap_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_strcasecmp(CArrRef params) {
  FUNCTION_INJECTION(strcasecmp);
  return (f_strcasecmp(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimagesignature(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagesignature);
  return (f_magickgetimagesignature(params.rvalAt(0)));
}
Variant i_get_class_methods(CArrRef params) {
  FUNCTION_INJECTION(get_class_methods);
  return (f_get_class_methods(params.rvalAt(0)));
}
Variant i_fopen(CArrRef params) {
  FUNCTION_INJECTION(fopen);
  int count = params.size();
  if (count <= 2) return (f_fopen(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_fopen(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_fopen(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mcrypt_generic_end(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_generic_end);
  return (f_mcrypt_generic_end(params.rvalAt(0)));
}
Variant i_openssl_pkey_free(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_free);
  return (f_openssl_pkey_free(params.rvalAt(0)), null);
}
Variant i_readlink(CArrRef params) {
  FUNCTION_INJECTION(readlink);
  return (f_readlink(params.rvalAt(0)));
}
Variant i_magickechoimagesblob(CArrRef params) {
  FUNCTION_INJECTION(magickechoimagesblob);
  return (f_magickechoimagesblob(params.rvalAt(0)));
}
Variant i_mailparse_msg_parse(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_parse);
  return (f_mailparse_msg_parse(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_text(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_text);
  return (f_xmlwriter_text(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelsetindex(CArrRef params) {
  FUNCTION_INJECTION(pixelsetindex);
  return (f_pixelsetindex(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_php_sapi_name(CArrRef params) {
  FUNCTION_INJECTION(php_sapi_name);
  return (f_php_sapi_name());
}
Variant i_mcrypt_enc_get_key_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_get_key_size);
  return (f_mcrypt_enc_get_key_size(params.rvalAt(0)));
}
Variant i_mysql_num_fields(CArrRef params) {
  FUNCTION_INJECTION(mysql_num_fields);
  return (f_mysql_num_fields(params.rvalAt(0)));
}
Variant i_magicksteganoimage(CArrRef params) {
  FUNCTION_INJECTION(magicksteganoimage);
  return (f_magicksteganoimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magicksetfirstiterator(CArrRef params) {
  FUNCTION_INJECTION(magicksetfirstiterator);
  return (f_magicksetfirstiterator(params.rvalAt(0)), null);
}
Variant i_pixelgetcolorasstring(CArrRef params) {
  FUNCTION_INJECTION(pixelgetcolorasstring);
  return (f_pixelgetcolorasstring(params.rvalAt(0)));
}
Variant i_magickremoveimage(CArrRef params) {
  FUNCTION_INJECTION(magickremoveimage);
  return (f_magickremoveimage(params.rvalAt(0)));
}
Variant i_file_exists(CArrRef params) {
  FUNCTION_INJECTION(file_exists);
  return (f_file_exists(params.rvalAt(0)));
}
Variant i_call_user_func_array(CArrRef params) {
  FUNCTION_INJECTION(call_user_func_array);
  return (f_call_user_func_array(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_restore_include_path(CArrRef params) {
  FUNCTION_INJECTION(restore_include_path);
  return (f_restore_include_path(), null);
}
Variant i_drawgettextundercolor(CArrRef params) {
  FUNCTION_INJECTION(drawgettextundercolor);
  return (f_drawgettextundercolor(params.rvalAt(0)));
}
Variant i_array_shift(CArrRef params) {
  FUNCTION_INJECTION(array_shift);
  return (f_array_shift(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_magicksetimageformat(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageformat);
  return (f_magicksetimageformat(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_open_memory(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_open_memory);
  return (f_xmlwriter_open_memory());
}
Variant i_drawsetstrokemiterlimit(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokemiterlimit);
  return (f_drawsetstrokemiterlimit(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mb_convert_kana(CArrRef params) {
  FUNCTION_INJECTION(mb_convert_kana);
  int count = params.size();
  if (count <= 1) return (f_mb_convert_kana(params.rvalAt(0)));
  if (count == 2) return (f_mb_convert_kana(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_convert_kana(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_token_name(CArrRef params) {
  FUNCTION_INJECTION(token_name);
  return (f_token_name(params.rvalAt(0)));
}
Variant i_preg_quote(CArrRef params) {
  FUNCTION_INJECTION(preg_quote);
  int count = params.size();
  if (count <= 1) return (f_preg_quote(params.rvalAt(0)));
  return (f_preg_quote(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_service_thread_started(CArrRef params) {
  FUNCTION_INJECTION(hphp_service_thread_started);
  return (f_hphp_service_thread_started(), null);
}
Variant i_magickconvolveimage(CArrRef params) {
  FUNCTION_INJECTION(magickconvolveimage);
  int count = params.size();
  if (count <= 2) return (f_magickconvolveimage(params.rvalAt(0), params.rvalAt(1)));
  return (f_magickconvolveimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_curl_getinfo(CArrRef params) {
  FUNCTION_INJECTION(curl_getinfo);
  int count = params.size();
  if (count <= 1) return (f_curl_getinfo(params.rvalAt(0)));
  return (f_curl_getinfo(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pfsockopen(CArrRef params) {
  FUNCTION_INJECTION(pfsockopen);
  int count = params.size();
  if (count <= 1) return (f_pfsockopen(params.rvalAt(0)));
  if (count == 2) return (f_pfsockopen(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_pfsockopen(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_pfsockopen(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
  return (f_pfsockopen(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3)), params.rvalAt(4)));
}
Variant i_ucfirst(CArrRef params) {
  FUNCTION_INJECTION(ucfirst);
  return (f_ucfirst(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_isreadable(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_isreadable);
  return (f_hphp_splfileinfo_isreadable(params.rvalAt(0)));
}
Variant i_chroot(CArrRef params) {
  FUNCTION_INJECTION(chroot);
  return (f_chroot(params.rvalAt(0)));
}
Variant i_chdir(CArrRef params) {
  FUNCTION_INJECTION(chdir);
  return (f_chdir(params.rvalAt(0)));
}
Variant i_socket_write(CArrRef params) {
  FUNCTION_INJECTION(socket_write);
  int count = params.size();
  if (count <= 2) return (f_socket_write(params.rvalAt(0), params.rvalAt(1)));
  return (f_socket_write(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stream_bucket_new(CArrRef params) {
  FUNCTION_INJECTION(stream_bucket_new);
  return (f_stream_bucket_new(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickflipimage(CArrRef params) {
  FUNCTION_INJECTION(magickflipimage);
  return (f_magickflipimage(params.rvalAt(0)));
}
Variant i_timezone_identifiers_list(CArrRef params) {
  FUNCTION_INJECTION(timezone_identifiers_list);
  return (f_timezone_identifiers_list());
}
Variant i_array_diff_key(CArrRef params) {
  FUNCTION_INJECTION(array_diff_key);
  int count = params.size();
  if (count <= 2) return (f_array_diff_key(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_diff_key(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_fread(CArrRef params) {
  FUNCTION_INJECTION(fread);
  return (f_fread(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_override_function(CArrRef params) {
  FUNCTION_INJECTION(override_function);
  return (f_override_function(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_long(CArrRef params) {
  FUNCTION_INJECTION(is_long);
  return (f_is_long(params.rvalAt(0)));
}
Variant i_pixelsetred(CArrRef params) {
  FUNCTION_INJECTION(pixelsetred);
  return (f_pixelsetred(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mailparse_uudecode_all(CArrRef params) {
  FUNCTION_INJECTION(mailparse_uudecode_all);
  return (f_mailparse_uudecode_all(params.rvalAt(0)));
}
Variant i_drawsetvectorgraphics(CArrRef params) {
  FUNCTION_INJECTION(drawsetvectorgraphics);
  return (f_drawsetvectorgraphics(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_parse(CArrRef params) {
  FUNCTION_INJECTION(oci_parse);
  return (f_oci_parse(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ctype_upper(CArrRef params) {
  FUNCTION_INJECTION(ctype_upper);
  return (f_ctype_upper(params.rvalAt(0)));
}
Variant i_get_declared_classes(CArrRef params) {
  FUNCTION_INJECTION(get_declared_classes);
  return (f_get_declared_classes());
}
Variant i_drawgetstrokelinejoin(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokelinejoin);
  return (f_drawgetstrokelinejoin(params.rvalAt(0)));
}
Variant i_popen(CArrRef params) {
  FUNCTION_INJECTION(popen);
  return (f_popen(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_next_entry(CArrRef params) {
  FUNCTION_INJECTION(ldap_next_entry);
  return (f_ldap_next_entry(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mailparse_msg_parse_file(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_parse_file);
  return (f_mailparse_msg_parse_file(params.rvalAt(0)));
}
Variant i_get_loaded_extensions(CArrRef params) {
  FUNCTION_INJECTION(get_loaded_extensions);
  int count = params.size();
  if (count <= 0) return (f_get_loaded_extensions());
  return (f_get_loaded_extensions(params.rvalAt(0)));
}
Variant i_magickdrawimage(CArrRef params) {
  FUNCTION_INJECTION(magickdrawimage);
  return (f_magickdrawimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_cbc(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_cbc);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_cbc(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mcrypt_cbc(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_imagecreatetruecolor(CArrRef params) {
  FUNCTION_INJECTION(imagecreatetruecolor);
  return (f_imagecreatetruecolor(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_inet_ntop(CArrRef params) {
  FUNCTION_INJECTION(inet_ntop);
  return (f_inet_ntop(params.rvalAt(0)));
}
Variant i_magickreadimage(CArrRef params) {
  FUNCTION_INJECTION(magickreadimage);
  return (f_magickreadimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_curl_init(CArrRef params) {
  FUNCTION_INJECTION(curl_init);
  int count = params.size();
  if (count <= 0) return (f_curl_init());
  return (f_curl_init(params.rvalAt(0)));
}
Variant i_mcrypt_cfb(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_cfb);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_cfb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mcrypt_cfb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_set_time_limit(CArrRef params) {
  FUNCTION_INJECTION(set_time_limit);
  return (f_set_time_limit(params.rvalAt(0)), null);
}
Variant i_libxml_get_errors(CArrRef params) {
  FUNCTION_INJECTION(libxml_get_errors);
  return (f_libxml_get_errors());
}
Variant i_get_magic_quotes_gpc(CArrRef params) {
  FUNCTION_INJECTION(get_magic_quotes_gpc);
  return (f_get_magic_quotes_gpc());
}
Variant i_proc_get_status(CArrRef params) {
  FUNCTION_INJECTION(proc_get_status);
  return (f_proc_get_status(params.rvalAt(0)));
}
Variant i_log10(CArrRef params) {
  FUNCTION_INJECTION(log10);
  return (f_log10(params.rvalAt(0)));
}
Variant i_hphp_directoryiterator_seek(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_seek);
  return (f_hphp_directoryiterator_seek(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_ldap_get_values(CArrRef params) {
  FUNCTION_INJECTION(ldap_get_values);
  return (f_ldap_get_values(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_soap_fault(CArrRef params) {
  FUNCTION_INJECTION(is_soap_fault);
  return (f_is_soap_fault(params.rvalAt(0)));
}
Variant i_magickgetimagechannelmean(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagechannelmean);
  return (f_magickgetimagechannelmean(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_disk_total_space(CArrRef params) {
  FUNCTION_INJECTION(disk_total_space);
  return (f_disk_total_space(params.rvalAt(0)));
}
Variant i_imagegd(CArrRef params) {
  FUNCTION_INJECTION(imagegd);
  int count = params.size();
  if (count <= 1) return (f_imagegd(params.rvalAt(0)));
  return (f_imagegd(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_set_blocking(CArrRef params) {
  FUNCTION_INJECTION(socket_set_blocking);
  return (f_socket_set_blocking(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_mknod(CArrRef params) {
  FUNCTION_INJECTION(posix_mknod);
  int count = params.size();
  if (count <= 2) return (f_posix_mknod(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_posix_mknod(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_posix_mknod(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_apc_define_constants(CArrRef params) {
  FUNCTION_INJECTION(apc_define_constants);
  int count = params.size();
  if (count <= 2) return (f_apc_define_constants(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_apc_define_constants(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_apc_define_constants(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_posix_kill(CArrRef params) {
  FUNCTION_INJECTION(posix_kill);
  return (f_posix_kill(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetstrokealpha(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokealpha);
  return (f_drawgetstrokealpha(params.rvalAt(0)));
}
Variant i_mcrypt_get_block_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_get_block_size);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_get_block_size(params.rvalAt(0)));
  return (f_mcrypt_get_block_size(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickmorphimages(CArrRef params) {
  FUNCTION_INJECTION(magickmorphimages);
  return (f_magickmorphimages(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_getlastmod(CArrRef params) {
  FUNCTION_INJECTION(getlastmod);
  return (f_getlastmod());
}
Variant i_magickquantizeimage(CArrRef params) {
  FUNCTION_INJECTION(magickquantizeimage);
  return (f_magickquantizeimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_imagesavealpha(CArrRef params) {
  FUNCTION_INJECTION(imagesavealpha);
  return (f_imagesavealpha(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsetfontfamily(CArrRef params) {
  FUNCTION_INJECTION(drawsetfontfamily);
  return (f_drawsetfontfamily(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsettextantialias(CArrRef params) {
  FUNCTION_INJECTION(drawsettextantialias);
  int count = params.size();
  if (count <= 1) return (f_drawsettextantialias(params.rvalAt(0)), null);
  return (f_drawsettextantialias(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_pixelsetgreenquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetgreenquantum);
  return (f_pixelsetgreenquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_bcsqrt(CArrRef params) {
  FUNCTION_INJECTION(bcsqrt);
  int count = params.size();
  if (count <= 1) return (f_bcsqrt(params.rvalAt(0)));
  return (f_bcsqrt(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pcntl_signal(CArrRef params) {
  FUNCTION_INJECTION(pcntl_signal);
  int count = params.size();
  if (count <= 2) return (f_pcntl_signal(params.rvalAt(0), params.rvalAt(1)));
  return (f_pcntl_signal(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mcrypt_ecb(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_ecb);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_ecb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mcrypt_ecb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_pixelsetcyanquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetcyanquantum);
  return (f_pixelsetcyanquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_array_walk(CArrRef params) {
  FUNCTION_INJECTION(array_walk);
  int count = params.size();
  if (count <= 2) return (f_array_walk(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_array_walk(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_getmxrr(CArrRef params) {
  FUNCTION_INJECTION(getmxrr);
  int count = params.size();
  if (count <= 2) return (f_getmxrr(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_getmxrr(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_magickqueryfonts(CArrRef params) {
  FUNCTION_INJECTION(magickqueryfonts);
  return (f_magickqueryfonts(params.rvalAt(0)));
}
Variant i_floatval(CArrRef params) {
  FUNCTION_INJECTION(floatval);
  return (f_floatval(params.rvalAt(0)));
}
Variant i_xml_set_object(CArrRef params) {
  FUNCTION_INJECTION(xml_set_object);
  return (f_xml_set_object(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_ctype_print(CArrRef params) {
  FUNCTION_INJECTION(ctype_print);
  return (f_ctype_print(params.rvalAt(0)));
}
Variant i_gzwrite(CArrRef params) {
  FUNCTION_INJECTION(gzwrite);
  int count = params.size();
  if (count <= 2) return (f_gzwrite(params.rvalAt(0), params.rvalAt(1)));
  return (f_gzwrite(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_splfileinfo___tostring(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo___tostring);
  return (f_hphp_splfileinfo___tostring(params.rvalAt(0)));
}
Variant i_magickaddimage(CArrRef params) {
  FUNCTION_INJECTION(magickaddimage);
  return (f_magickaddimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_clearstatcache(CArrRef params) {
  FUNCTION_INJECTION(clearstatcache);
  return (f_clearstatcache(), null);
}
Variant i_chgrp(CArrRef params) {
  FUNCTION_INJECTION(chgrp);
  return (f_chgrp(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_virtual(CArrRef params) {
  FUNCTION_INJECTION(virtual);
  return (f_virtual(params.rvalAt(0)));
}
Variant i_reset(CArrRef params) {
  FUNCTION_INJECTION(reset);
  return (f_reset(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_oci_field_type(CArrRef params) {
  FUNCTION_INJECTION(oci_field_type);
  return (f_oci_field_type(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_set_include_path(CArrRef params) {
  FUNCTION_INJECTION(set_include_path);
  return (f_set_include_path(params.rvalAt(0)));
}
Variant i_hphp_recursivedirectoryiterator_next(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_next);
  return (f_hphp_recursivedirectoryiterator_next(params.rvalAt(0)), null);
}
Variant i_openssl_x509_export(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_export);
  int count = params.size();
  if (count <= 2) return (f_openssl_x509_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_openssl_x509_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
}
Variant i_magickcolorizeimage(CArrRef params) {
  FUNCTION_INJECTION(magickcolorizeimage);
  return (f_magickcolorizeimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagettftext(CArrRef params) {
  FUNCTION_INJECTION(imagettftext);
  return (f_imagettftext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_mb_strrchr(CArrRef params) {
  FUNCTION_INJECTION(mb_strrchr);
  int count = params.size();
  if (count <= 2) return (f_mb_strrchr(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strrchr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strrchr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickgetimageprofile(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageprofile);
  return (f_magickgetimageprofile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_file_put_contents(CArrRef params) {
  FUNCTION_INJECTION(file_put_contents);
  int count = params.size();
  if (count <= 2) return (f_file_put_contents(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_file_put_contents(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_file_put_contents(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_iconv_mime_encode(CArrRef params) {
  FUNCTION_INJECTION(iconv_mime_encode);
  int count = params.size();
  if (count <= 2) return (f_iconv_mime_encode(params.rvalAt(0), params.rvalAt(1)));
  return (f_iconv_mime_encode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_log1p(CArrRef params) {
  FUNCTION_INJECTION(log1p);
  return (f_log1p(params.rvalAt(0)));
}
Variant i_fwrite(CArrRef params) {
  FUNCTION_INJECTION(fwrite);
  int count = params.size();
  if (count <= 2) return (f_fwrite(params.rvalAt(0), params.rvalAt(1)));
  return (f_fwrite(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_atan2(CArrRef params) {
  FUNCTION_INJECTION(atan2);
  return (f_atan2(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_is_a(CArrRef params) {
  FUNCTION_INJECTION(is_a);
  return (f_is_a(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_idate(CArrRef params) {
  FUNCTION_INJECTION(idate);
  int count = params.size();
  if (count <= 1) return (f_idate(params.rvalAt(0)));
  return (f_idate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_initgroups(CArrRef params) {
  FUNCTION_INJECTION(posix_initgroups);
  return (f_posix_initgroups(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_arsort(CArrRef params) {
  FUNCTION_INJECTION(arsort);
  int count = params.size();
  if (count <= 1) return (f_arsort(ref(const_cast<Array&>(params).lvalAt(0))));
  if (count == 2) return (f_arsort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_arsort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_gethostbyaddr(CArrRef params) {
  FUNCTION_INJECTION(gethostbyaddr);
  return (f_gethostbyaddr(params.rvalAt(0)));
}
Variant i_apc_delete(CArrRef params) {
  FUNCTION_INJECTION(apc_delete);
  int count = params.size();
  if (count <= 1) return (f_apc_delete(params.rvalAt(0)));
  return (f_apc_delete(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicklevelimage(CArrRef params) {
  FUNCTION_INJECTION(magicklevelimage);
  int count = params.size();
  if (count <= 4) return (f_magicklevelimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_magicklevelimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_openssl_x509_parse(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_parse);
  int count = params.size();
  if (count <= 1) return (f_openssl_x509_parse(params.rvalAt(0)));
  return (f_openssl_x509_parse(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickcommentimage(CArrRef params) {
  FUNCTION_INJECTION(magickcommentimage);
  return (f_magickcommentimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileinfo_islink(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_islink);
  return (f_hphp_splfileinfo_islink(params.rvalAt(0)));
}
Variant i_magicksetimagedelay(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagedelay);
  return (f_magicksetimagedelay(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickposterizeimage(CArrRef params) {
  FUNCTION_INJECTION(magickposterizeimage);
  return (f_magickposterizeimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stream_socket_accept(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_accept);
  int count = params.size();
  if (count <= 1) return (f_stream_socket_accept(params.rvalAt(0)));
  if (count == 2) return (f_stream_socket_accept(params.rvalAt(0), params.rvalAt(1)));
  return (f_stream_socket_accept(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_magickqueryconfigureoption(CArrRef params) {
  FUNCTION_INJECTION(magickqueryconfigureoption);
  return (f_magickqueryconfigureoption(params.rvalAt(0)));
}
Variant i_magickevaluateimage(CArrRef params) {
  FUNCTION_INJECTION(magickevaluateimage);
  int count = params.size();
  if (count <= 3) return (f_magickevaluateimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickevaluateimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_imagesx(CArrRef params) {
  FUNCTION_INJECTION(imagesx);
  return (f_imagesx(params.rvalAt(0)));
}
Variant i_imagesy(CArrRef params) {
  FUNCTION_INJECTION(imagesy);
  return (f_imagesy(params.rvalAt(0)));
}
Variant i_mysql_get_client_info(CArrRef params) {
  FUNCTION_INJECTION(mysql_get_client_info);
  return (f_mysql_get_client_info());
}
Variant i_fb_crossall_query(CArrRef params) {
  FUNCTION_INJECTION(fb_crossall_query);
  int count = params.size();
  if (count <= 1) return (f_fb_crossall_query(params.rvalAt(0)));
  if (count == 2) return (f_fb_crossall_query(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_fb_crossall_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_fb_crossall_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_fb_crossall_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_fb_crossall_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_fseek(CArrRef params) {
  FUNCTION_INJECTION(fseek);
  int count = params.size();
  if (count <= 2) return (f_fseek(params.rvalAt(0), params.rvalAt(1)));
  return (f_fseek(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_apc_compile_file(CArrRef params) {
  FUNCTION_INJECTION(apc_compile_file);
  int count = params.size();
  if (count <= 1) return (f_apc_compile_file(params.rvalAt(0)));
  if (count == 2) return (f_apc_compile_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_apc_compile_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magicksetpassphrase(CArrRef params) {
  FUNCTION_INJECTION(magicksetpassphrase);
  return (f_magicksetpassphrase(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_info(CArrRef params) {
  FUNCTION_INJECTION(mysql_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_info());
  return (f_mysql_info(params.rvalAt(0)));
}
Variant i_is_writable(CArrRef params) {
  FUNCTION_INJECTION(is_writable);
  return (f_is_writable(params.rvalAt(0)));
}
Variant i_magickrotateimage(CArrRef params) {
  FUNCTION_INJECTION(magickrotateimage);
  return (f_magickrotateimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_fgetcsv(CArrRef params) {
  FUNCTION_INJECTION(fgetcsv);
  int count = params.size();
  if (count <= 1) return (f_fgetcsv(params.rvalAt(0)));
  if (count == 2) return (f_fgetcsv(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_fgetcsv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_fgetcsv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_oci_fetch_array(CArrRef params) {
  FUNCTION_INJECTION(oci_fetch_array);
  int count = params.size();
  if (count <= 1) return (f_oci_fetch_array(params.rvalAt(0)));
  return (f_oci_fetch_array(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickcolorfloodfillimage(CArrRef params) {
  FUNCTION_INJECTION(magickcolorfloodfillimage);
  return (f_magickcolorfloodfillimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_atanh(CArrRef params) {
  FUNCTION_INJECTION(atanh);
  return (f_atanh(params.rvalAt(0)));
}
Variant i_imagecopyresized(CArrRef params) {
  FUNCTION_INJECTION(imagecopyresized);
  return (f_imagecopyresized(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8), params.rvalAt(9)));
}
Variant i_fpassthru(CArrRef params) {
  FUNCTION_INJECTION(fpassthru);
  return (f_fpassthru(params.rvalAt(0)));
}
Variant i_magickblackthresholdimage(CArrRef params) {
  FUNCTION_INJECTION(magickblackthresholdimage);
  return (f_magickblackthresholdimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_encrypt(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_encrypt);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_encrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mcrypt_encrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_magicksetimagegreenprimary(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagegreenprimary);
  return (f_magicksetimagegreenprimary(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_start_attribute_ns(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_attribute_ns);
  return (f_xmlwriter_start_attribute_ns(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickgetimageinterlacescheme(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageinterlacescheme);
  return (f_magickgetimageinterlacescheme(params.rvalAt(0)));
}
Variant i_apache_child_terminate(CArrRef params) {
  FUNCTION_INJECTION(apache_child_terminate);
  return (f_apache_child_terminate());
}
Variant i_array_merge_recursive(CArrRef params) {
  FUNCTION_INJECTION(array_merge_recursive);
  int count = params.size();
  if (count <= 1) return (f_array_merge_recursive(count, params.rvalAt(0)));
  return (f_array_merge_recursive(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_array_uintersect(CArrRef params) {
  FUNCTION_INJECTION(array_uintersect);
  int count = params.size();
  if (count <= 3) return (f_array_uintersect(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_uintersect(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_xml_set_unparsed_entity_decl_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_unparsed_entity_decl_handler);
  return (f_xml_set_unparsed_entity_decl_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ob_get_contents(CArrRef params) {
  FUNCTION_INJECTION(ob_get_contents);
  return (f_ob_get_contents());
}
Variant i_pixelgetcyan(CArrRef params) {
  FUNCTION_INJECTION(pixelgetcyan);
  return (f_pixelgetcyan(params.rvalAt(0)));
}
Variant i_stream_select(CArrRef params) {
  FUNCTION_INJECTION(stream_select);
  int count = params.size();
  if (count <= 4) return (f_stream_select(ref(const_cast<Array&>(params).lvalAt(0)), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  return (f_stream_select(ref(const_cast<Array&>(params).lvalAt(0)), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_get_resource_type(CArrRef params) {
  FUNCTION_INJECTION(get_resource_type);
  return (f_get_resource_type(params.rvalAt(0)));
}
Variant i_dangling_server_proxy_old_request(CArrRef params) {
  FUNCTION_INJECTION(dangling_server_proxy_old_request);
  return (f_dangling_server_proxy_old_request());
}
Variant i_magickgetimagefilename(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagefilename);
  return (f_magickgetimagefilename(params.rvalAt(0)));
}
Variant i_exif_tagname(CArrRef params) {
  FUNCTION_INJECTION(exif_tagname);
  return (f_exif_tagname(params.rvalAt(0)));
}
Variant i_drawsetfillalpha(CArrRef params) {
  FUNCTION_INJECTION(drawsetfillalpha);
  return (f_drawsetfillalpha(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mb_convert_encoding(CArrRef params) {
  FUNCTION_INJECTION(mb_convert_encoding);
  int count = params.size();
  if (count <= 2) return (f_mb_convert_encoding(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_convert_encoding(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_wandgetexceptionstring(CArrRef params) {
  FUNCTION_INJECTION(wandgetexceptionstring);
  return (f_wandgetexceptionstring(params.rvalAt(0)));
}
Variant i_proc_open(CArrRef params) {
  FUNCTION_INJECTION(proc_open);
  int count = params.size();
  if (count <= 3) return (f_proc_open(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_proc_open(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  if (count == 5) return (f_proc_open(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
  return (f_proc_open(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_hphp_splfileobject_fgetss(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fgetss);
  return (f_hphp_splfileobject_fgetss(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_clearpixeliterator(CArrRef params) {
  FUNCTION_INJECTION(clearpixeliterator);
  return (f_clearpixeliterator(params.rvalAt(0)), null);
}
Variant i_socket_server(CArrRef params) {
  FUNCTION_INJECTION(socket_server);
  int count = params.size();
  if (count <= 1) return (f_socket_server(params.rvalAt(0)));
  if (count == 2) return (f_socket_server(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_socket_server(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_socket_server(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_magickremoveimageprofile(CArrRef params) {
  FUNCTION_INJECTION(magickremoveimageprofile);
  return (f_magickremoveimageprofile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_write_dtd_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_dtd_element);
  return (f_xmlwriter_write_dtd_element(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawpushdefs(CArrRef params) {
  FUNCTION_INJECTION(drawpushdefs);
  return (f_drawpushdefs(params.rvalAt(0)), null);
}
Variant i_image2wbmp(CArrRef params) {
  FUNCTION_INJECTION(image2wbmp);
  int count = params.size();
  if (count <= 1) return (f_image2wbmp(params.rvalAt(0)));
  if (count == 2) return (f_image2wbmp(params.rvalAt(0), params.rvalAt(1)));
  return (f_image2wbmp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_join(CArrRef params) {
  FUNCTION_INJECTION(join);
  int count = params.size();
  if (count <= 1) return (f_join(params.rvalAt(0)));
  return (f_join(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetimage(CArrRef params) {
  FUNCTION_INJECTION(magicksetimage);
  return (f_magicksetimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_openssl_free_key(CArrRef params) {
  FUNCTION_INJECTION(openssl_free_key);
  return (f_openssl_free_key(params.rvalAt(0)), null);
}
Variant i_preg_grep(CArrRef params) {
  FUNCTION_INJECTION(preg_grep);
  int count = params.size();
  if (count <= 2) return (f_preg_grep(params.rvalAt(0), params.rvalAt(1)));
  return (f_preg_grep(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_float(CArrRef params) {
  FUNCTION_INJECTION(is_float);
  return (f_is_float(params.rvalAt(0)));
}
Variant i_stream_socket_pair(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_pair);
  return (f_stream_socket_pair(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_get_required_files(CArrRef params) {
  FUNCTION_INJECTION(get_required_files);
  return (f_get_required_files());
}
Variant i_mysql_fetch_field(CArrRef params) {
  FUNCTION_INJECTION(mysql_fetch_field);
  int count = params.size();
  if (count <= 1) return (f_mysql_fetch_field(params.rvalAt(0)));
  return (f_mysql_fetch_field(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_chmod(CArrRef params) {
  FUNCTION_INJECTION(chmod);
  return (f_chmod(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgettextascent(CArrRef params) {
  FUNCTION_INJECTION(magickgettextascent);
  int count = params.size();
  if (count <= 3) return (f_magickgettextascent(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgettextascent(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mb_regex_encoding(CArrRef params) {
  FUNCTION_INJECTION(mb_regex_encoding);
  int count = params.size();
  if (count <= 0) return (f_mb_regex_encoding());
  return (f_mb_regex_encoding(params.rvalAt(0)));
}
Variant i_mail(CArrRef params) {
  FUNCTION_INJECTION(mail);
  int count = params.size();
  if (count <= 3) return (f_mail(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mail(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mail(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_mcrypt_enc_self_test(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_self_test);
  return (f_mcrypt_enc_self_test(params.rvalAt(0)));
}
Variant i_ignore_user_abort(CArrRef params) {
  FUNCTION_INJECTION(ignore_user_abort);
  int count = params.size();
  if (count <= 0) return (f_ignore_user_abort());
  return (f_ignore_user_abort(params.rvalAt(0)));
}
Variant i_oci_field_is_null(CArrRef params) {
  FUNCTION_INJECTION(oci_field_is_null);
  return (f_oci_field_is_null(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagesetthickness(CArrRef params) {
  FUNCTION_INJECTION(imagesetthickness);
  return (f_imagesetthickness(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_str_pad(CArrRef params) {
  FUNCTION_INJECTION(str_pad);
  int count = params.size();
  if (count <= 2) return (f_str_pad(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_str_pad(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_str_pad(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_openssl_pkcs7_decrypt(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs7_decrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_pkcs7_decrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_openssl_pkcs7_decrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_pagelet_server_task_result(CArrRef params) {
  FUNCTION_INJECTION(pagelet_server_task_result);
  return (f_pagelet_server_task_result(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_asinh(CArrRef params) {
  FUNCTION_INJECTION(asinh);
  return (f_asinh(params.rvalAt(0)));
}
Variant i_mailparse_msg_extract_part(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_extract_part);
  int count = params.size();
  if (count <= 2) return (f_mailparse_msg_extract_part(params.rvalAt(0), params.rvalAt(1)), null);
  return (f_mailparse_msg_extract_part(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_magickgetimagecompose(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagecompose);
  return (f_magickgetimagecompose(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getpath(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getpath);
  return (f_hphp_splfileinfo_getpath(params.rvalAt(0)));
}
Variant i_magickcropimage(CArrRef params) {
  FUNCTION_INJECTION(magickcropimage);
  return (f_magickcropimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_ob_gzhandler(CArrRef params) {
  FUNCTION_INJECTION(ob_gzhandler);
  return (f_ob_gzhandler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawcomment(CArrRef params) {
  FUNCTION_INJECTION(drawcomment);
  return (f_drawcomment(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_call_user_method(CArrRef params) {
  FUNCTION_INJECTION(call_user_method);
  int count = params.size();
  if (count <= 2) return (f_call_user_method(count, params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_call_user_method(count,params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.slice(2, count - 2, false)));
}
Variant i_mb_split(CArrRef params) {
  FUNCTION_INJECTION(mb_split);
  int count = params.size();
  if (count <= 2) return (f_mb_split(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_split(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagepolygon(CArrRef params) {
  FUNCTION_INJECTION(imagepolygon);
  return (f_imagepolygon(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mysql_field_name(CArrRef params) {
  FUNCTION_INJECTION(mysql_field_name);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_name(params.rvalAt(0)));
  return (f_mysql_field_name(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_fputs(CArrRef params) {
  FUNCTION_INJECTION(fputs);
  int count = params.size();
  if (count <= 2) return (f_fputs(params.rvalAt(0), params.rvalAt(1)));
  return (f_fputs(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagecolorallocatealpha(CArrRef params) {
  FUNCTION_INJECTION(imagecolorallocatealpha);
  return (f_imagecolorallocatealpha(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_substr_count(CArrRef params) {
  FUNCTION_INJECTION(substr_count);
  int count = params.size();
  if (count <= 2) return (f_substr_count(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_substr_count(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_substr_count(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_ldap_first_reference(CArrRef params) {
  FUNCTION_INJECTION(ldap_first_reference);
  return (f_ldap_first_reference(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_clock_settime(CArrRef params) {
  FUNCTION_INJECTION(clock_settime);
  return (f_clock_settime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ftruncate(CArrRef params) {
  FUNCTION_INJECTION(ftruncate);
  return (f_ftruncate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_curl_version(CArrRef params) {
  FUNCTION_INJECTION(curl_version);
  int count = params.size();
  if (count <= 0) return (f_curl_version());
  return (f_curl_version(params.rvalAt(0)));
}
Variant i_pixelgetbluequantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetbluequantum);
  return (f_pixelgetbluequantum(params.rvalAt(0)));
}
Variant i_print(CArrRef params) {
  FUNCTION_INJECTION(print);
  return (f_print(params.rvalAt(0)));
}
Variant i_mysql_unbuffered_query(CArrRef params) {
  FUNCTION_INJECTION(mysql_unbuffered_query);
  int count = params.size();
  if (count <= 1) return (f_mysql_unbuffered_query(params.rvalAt(0)));
  return (f_mysql_unbuffered_query(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursiveiteratoriterator___construct(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator___construct);
  return (f_hphp_recursiveiteratoriterator___construct(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hash_final(CArrRef params) {
  FUNCTION_INJECTION(hash_final);
  int count = params.size();
  if (count <= 1) return (f_hash_final(params.rvalAt(0)));
  return (f_hash_final(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagecolorresolve(CArrRef params) {
  FUNCTION_INJECTION(imagecolorresolve);
  return (f_imagecolorresolve(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_date_date_set(CArrRef params) {
  FUNCTION_INJECTION(date_date_set);
  return (f_date_date_set(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_pixelsetyellow(CArrRef params) {
  FUNCTION_INJECTION(pixelsetyellow);
  return (f_pixelsetyellow(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_inet_pton(CArrRef params) {
  FUNCTION_INJECTION(inet_pton);
  return (f_inet_pton(params.rvalAt(0)));
}
Variant i_mcrypt_get_key_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_get_key_size);
  return (f_mcrypt_get_key_size(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsettextalignment(CArrRef params) {
  FUNCTION_INJECTION(drawsettextalignment);
  return (f_drawsettextalignment(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickgetimageredprimary(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageredprimary);
  return (f_magickgetimageredprimary(params.rvalAt(0)));
}
Variant i_addslashes(CArrRef params) {
  FUNCTION_INJECTION(addslashes);
  return (f_addslashes(params.rvalAt(0)));
}
Variant i_ldap_count_entries(CArrRef params) {
  FUNCTION_INJECTION(ldap_count_entries);
  return (f_ldap_count_entries(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ereg_replace(CArrRef params) {
  FUNCTION_INJECTION(ereg_replace);
  return (f_ereg_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_recursivedirectoryiterator_getchildren(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_getchildren);
  return (f_hphp_recursivedirectoryiterator_getchildren(params.rvalAt(0)));
}
Variant i_drawrender(CArrRef params) {
  FUNCTION_INJECTION(drawrender);
  return (f_drawrender(params.rvalAt(0)));
}
Variant i_magickgetversionnumber(CArrRef params) {
  FUNCTION_INJECTION(magickgetversionnumber);
  return (f_magickgetversionnumber());
}
Variant i_array_splice(CArrRef params) {
  FUNCTION_INJECTION(array_splice);
  int count = params.size();
  if (count <= 2) return (f_array_splice(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  if (count == 3) return (f_array_splice(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_splice(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_oci_new_descriptor(CArrRef params) {
  FUNCTION_INJECTION(oci_new_descriptor);
  int count = params.size();
  if (count <= 1) return (f_oci_new_descriptor(params.rvalAt(0)));
  return (f_oci_new_descriptor(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ftell(CArrRef params) {
  FUNCTION_INJECTION(ftell);
  return (f_ftell(params.rvalAt(0)));
}
Variant i_magicksetimagedepth(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagedepth);
  int count = params.size();
  if (count <= 2) return (f_magicksetimagedepth(params.rvalAt(0), params.rvalAt(1)));
  return (f_magicksetimagedepth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_apc_load_constants(CArrRef params) {
  FUNCTION_INJECTION(apc_load_constants);
  int count = params.size();
  if (count <= 1) return (f_apc_load_constants(params.rvalAt(0)));
  if (count == 2) return (f_apc_load_constants(params.rvalAt(0), params.rvalAt(1)));
  return (f_apc_load_constants(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i___halt_compiler(CArrRef params) {
  FUNCTION_INJECTION(__halt_compiler);
  return (f___halt_compiler(), null);
}
Variant i_magicklabelimage(CArrRef params) {
  FUNCTION_INJECTION(magicklabelimage);
  return (f_magicklabelimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_log(CArrRef params) {
  FUNCTION_INJECTION(hphp_log);
  return (f_hphp_log(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_stream_get_contents(CArrRef params) {
  FUNCTION_INJECTION(stream_get_contents);
  int count = params.size();
  if (count <= 1) return (f_stream_get_contents(params.rvalAt(0)));
  if (count == 2) return (f_stream_get_contents(params.rvalAt(0), params.rvalAt(1)));
  return (f_stream_get_contents(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagecreatefromjpeg(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromjpeg);
  return (f_imagecreatefromjpeg(params.rvalAt(0)));
}
Variant i_chown(CArrRef params) {
  FUNCTION_INJECTION(chown);
  return (f_chown(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hash_hmac_file(CArrRef params) {
  FUNCTION_INJECTION(hash_hmac_file);
  int count = params.size();
  if (count <= 3) return (f_hash_hmac_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_hash_hmac_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickechoimageblob(CArrRef params) {
  FUNCTION_INJECTION(magickechoimageblob);
  return (f_magickechoimageblob(params.rvalAt(0)));
}
Variant i_link(CArrRef params) {
  FUNCTION_INJECTION(link);
  return (f_link(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_fb_utf8ize(CArrRef params) {
  FUNCTION_INJECTION(fb_utf8ize);
  return (f_fb_utf8ize(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_drawsetfillpatternurl(CArrRef params) {
  FUNCTION_INJECTION(drawsetfillpatternurl);
  return (f_drawsetfillpatternurl(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_iconv(CArrRef params) {
  FUNCTION_INJECTION(iconv);
  return (f_iconv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_highlight_file(CArrRef params) {
  FUNCTION_INJECTION(highlight_file);
  int count = params.size();
  if (count <= 1) return (f_highlight_file(params.rvalAt(0)));
  return (f_highlight_file(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_iconv_mime_decode_headers(CArrRef params) {
  FUNCTION_INJECTION(iconv_mime_decode_headers);
  int count = params.size();
  if (count <= 1) return (f_iconv_mime_decode_headers(params.rvalAt(0)));
  if (count == 2) return (f_iconv_mime_decode_headers(params.rvalAt(0), params.rvalAt(1)));
  return (f_iconv_mime_decode_headers(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ini_get_all(CArrRef params) {
  FUNCTION_INJECTION(ini_get_all);
  int count = params.size();
  if (count <= 0) return (f_ini_get_all());
  return (f_ini_get_all(params.rvalAt(0)));
}
Variant i_ldap_get_values_len(CArrRef params) {
  FUNCTION_INJECTION(ldap_get_values_len);
  return (f_ldap_get_values_len(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_splfileinfo_getrealpath(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getrealpath);
  return (f_hphp_splfileinfo_getrealpath(params.rvalAt(0)));
}
Variant i_openssl_pkcs7_verify(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs7_verify);
  int count = params.size();
  if (count <= 2) return (f_openssl_pkcs7_verify(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_openssl_pkcs7_verify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_openssl_pkcs7_verify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_openssl_pkcs7_verify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_openssl_pkcs7_verify(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_hphp_directoryiterator_current(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_current);
  return (f_hphp_directoryiterator_current(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_fgetcsv(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fgetcsv);
  return (f_hphp_splfileobject_fgetcsv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_stream_socket_recvfrom(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_recvfrom);
  int count = params.size();
  if (count <= 2) return (f_stream_socket_recvfrom(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_socket_recvfrom(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_socket_recvfrom(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawgetcliprule(CArrRef params) {
  FUNCTION_INJECTION(drawgetcliprule);
  return (f_drawgetcliprule(params.rvalAt(0)));
}
Variant i_apc_filehits(CArrRef params) {
  FUNCTION_INJECTION(apc_filehits);
  return (f_apc_filehits());
}
Variant i_pixelgetexceptionstring(CArrRef params) {
  FUNCTION_INJECTION(pixelgetexceptionstring);
  return (f_pixelgetexceptionstring(params.rvalAt(0)));
}
Variant i_mcrypt_ofb(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_ofb);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_ofb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mcrypt_ofb(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_imageantialias(CArrRef params) {
  FUNCTION_INJECTION(imageantialias);
  return (f_imageantialias(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileinfo_openfile(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_openfile);
  return (f_hphp_splfileinfo_openfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_idn_to_ascii(CArrRef params) {
  FUNCTION_INJECTION(idn_to_ascii);
  int count = params.size();
  if (count <= 1) return (f_idn_to_ascii(params.rvalAt(0)));
  return (f_idn_to_ascii(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_error_log(CArrRef params) {
  FUNCTION_INJECTION(error_log);
  int count = params.size();
  if (count <= 1) return (f_error_log(params.rvalAt(0)));
  if (count == 2) return (f_error_log(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_error_log(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_error_log(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hash_update(CArrRef params) {
  FUNCTION_INJECTION(hash_update);
  return (f_hash_update(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ob_flush(CArrRef params) {
  FUNCTION_INJECTION(ob_flush);
  return (f_ob_flush(), null);
}
Variant i_md5_file(CArrRef params) {
  FUNCTION_INJECTION(md5_file);
  int count = params.size();
  if (count <= 1) return (f_md5_file(params.rvalAt(0)));
  return (f_md5_file(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetexception(CArrRef params) {
  FUNCTION_INJECTION(drawgetexception);
  return (f_drawgetexception(params.rvalAt(0)));
}
Variant i_file_get_contents(CArrRef params) {
  FUNCTION_INJECTION(file_get_contents);
  int count = params.size();
  if (count <= 1) return (f_file_get_contents(params.rvalAt(0)));
  if (count == 2) return (f_file_get_contents(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_file_get_contents(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_file_get_contents(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_file_get_contents(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_uniqid(CArrRef params) {
  FUNCTION_INJECTION(uniqid);
  int count = params.size();
  if (count <= 0) return (f_uniqid());
  if (count == 1) return (f_uniqid(params.rvalAt(0)));
  return (f_uniqid(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_strncasecmp(CArrRef params) {
  FUNCTION_INJECTION(strncasecmp);
  return (f_strncasecmp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magicksetimagepixels(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagepixels);
  return (f_magicksetimagepixels(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_drawgetfillopacity(CArrRef params) {
  FUNCTION_INJECTION(drawgetfillopacity);
  return (f_drawgetfillopacity(params.rvalAt(0)));
}
Variant i_xml_parser_create_ns(CArrRef params) {
  FUNCTION_INJECTION(xml_parser_create_ns);
  int count = params.size();
  if (count <= 0) return (f_xml_parser_create_ns());
  if (count == 1) return (f_xml_parser_create_ns(params.rvalAt(0)));
  return (f_xml_parser_create_ns(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_fetch_assoc(CArrRef params) {
  FUNCTION_INJECTION(oci_fetch_assoc);
  return (f_oci_fetch_assoc(params.rvalAt(0)));
}
Variant i_ldap_delete(CArrRef params) {
  FUNCTION_INJECTION(ldap_delete);
  return (f_ldap_delete(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_fnmatch(CArrRef params) {
  FUNCTION_INJECTION(fnmatch);
  int count = params.size();
  if (count <= 2) return (f_fnmatch(params.rvalAt(0), params.rvalAt(1)));
  return (f_fnmatch(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_splfileobject_eof(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_eof);
  return (f_hphp_splfileobject_eof(params.rvalAt(0)));
}
Variant i_metaphone(CArrRef params) {
  FUNCTION_INJECTION(metaphone);
  int count = params.size();
  if (count <= 1) return (f_metaphone(params.rvalAt(0)));
  return (f_metaphone(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_errno(CArrRef params) {
  FUNCTION_INJECTION(mysql_errno);
  int count = params.size();
  if (count <= 0) return (f_mysql_errno());
  return (f_mysql_errno(params.rvalAt(0)));
}
Variant i_stream_wrapper_unregister(CArrRef params) {
  FUNCTION_INJECTION(stream_wrapper_unregister);
  return (f_stream_wrapper_unregister(params.rvalAt(0)));
}
Variant i_magickcyclecolormapimage(CArrRef params) {
  FUNCTION_INJECTION(magickcyclecolormapimage);
  return (f_magickcyclecolormapimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursiveiteratoriterator_current(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_current);
  return (f_hphp_recursiveiteratoriterator_current(params.rvalAt(0)));
}
Variant i_restore_error_handler(CArrRef params) {
  FUNCTION_INJECTION(restore_error_handler);
  return (f_restore_error_handler());
}
Variant i_hphp_recursivedirectoryiterator___construct(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator___construct);
  return (f_hphp_recursivedirectoryiterator___construct(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magicksetimagevirtualpixelmethod(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagevirtualpixelmethod);
  return (f_magicksetimagevirtualpixelmethod(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_getpeername(CArrRef params) {
  FUNCTION_INJECTION(socket_getpeername);
  int count = params.size();
  if (count <= 2) return (f_socket_getpeername(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_socket_getpeername(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_mysql_error(CArrRef params) {
  FUNCTION_INJECTION(mysql_error);
  int count = params.size();
  if (count <= 0) return (f_mysql_error());
  return (f_mysql_error(params.rvalAt(0)));
}
Variant i_drawtranslate(CArrRef params) {
  FUNCTION_INJECTION(drawtranslate);
  return (f_drawtranslate(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_mysql_list_dbs(CArrRef params) {
  FUNCTION_INJECTION(mysql_list_dbs);
  int count = params.size();
  if (count <= 0) return (f_mysql_list_dbs());
  return (f_mysql_list_dbs(params.rvalAt(0)));
}
Variant i_imagefilter(CArrRef params) {
  FUNCTION_INJECTION(imagefilter);
  int count = params.size();
  if (count <= 2) return (f_imagefilter(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_imagefilter(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_imagefilter(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_imagefilter(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_imagefilter(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_base64_encode(CArrRef params) {
  FUNCTION_INJECTION(base64_encode);
  return (f_base64_encode(params.rvalAt(0)));
}
Variant i_is_null(CArrRef params) {
  FUNCTION_INJECTION(is_null);
  return (f_is_null(params.rvalAt(0)));
}
Variant i_octdec(CArrRef params) {
  FUNCTION_INJECTION(octdec);
  return (f_octdec(params.rvalAt(0)));
}
Variant i_oci_fetch(CArrRef params) {
  FUNCTION_INJECTION(oci_fetch);
  return (f_oci_fetch(params.rvalAt(0)));
}
Variant i_drawsetclippath(CArrRef params) {
  FUNCTION_INJECTION(drawsetclippath);
  return (f_drawsetclippath(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickconstituteimage(CArrRef params) {
  FUNCTION_INJECTION(magickconstituteimage);
  return (f_magickconstituteimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_pcntl_wexitstatus(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wexitstatus);
  return (f_pcntl_wexitstatus(params.rvalAt(0)));
}
Variant i_apache_setenv(CArrRef params) {
  FUNCTION_INJECTION(apache_setenv);
  int count = params.size();
  if (count <= 2) return (f_apache_setenv(params.rvalAt(0), params.rvalAt(1)));
  return (f_apache_setenv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_clonedrawingwand(CArrRef params) {
  FUNCTION_INJECTION(clonedrawingwand);
  return (f_clonedrawingwand(params.rvalAt(0)));
}
Variant i_ob_get_clean(CArrRef params) {
  FUNCTION_INJECTION(ob_get_clean);
  return (f_ob_get_clean());
}
Variant i_expm1(CArrRef params) {
  FUNCTION_INJECTION(expm1);
  return (f_expm1(params.rvalAt(0)));
}
Variant i_ldap_first_entry(CArrRef params) {
  FUNCTION_INJECTION(ldap_first_entry);
  return (f_ldap_first_entry(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_curl_multi_select(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_select);
  int count = params.size();
  if (count <= 1) return (f_curl_multi_select(params.rvalAt(0)));
  return (f_curl_multi_select(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickswirlimage(CArrRef params) {
  FUNCTION_INJECTION(magickswirlimage);
  return (f_magickswirlimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_ereg_search_regs(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search_regs);
  int count = params.size();
  if (count <= 0) return (f_mb_ereg_search_regs());
  if (count == 1) return (f_mb_ereg_search_regs(params.rvalAt(0)));
  return (f_mb_ereg_search_regs(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_errno(CArrRef params) {
  FUNCTION_INJECTION(ldap_errno);
  return (f_ldap_errno(params.rvalAt(0)));
}
Variant i_mysql_get_server_info(CArrRef params) {
  FUNCTION_INJECTION(mysql_get_server_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_get_server_info());
  return (f_mysql_get_server_info(params.rvalAt(0)));
}
Variant i_mailparse_rfc822_parse_addresses(CArrRef params) {
  FUNCTION_INJECTION(mailparse_rfc822_parse_addresses);
  return (f_mailparse_rfc822_parse_addresses(params.rvalAt(0)));
}
Variant i_magickgetimagemimetype(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagemimetype);
  return (f_magickgetimagemimetype(params.rvalAt(0)));
}
Variant i_soundex(CArrRef params) {
  FUNCTION_INJECTION(soundex);
  return (f_soundex(params.rvalAt(0)));
}
Variant i_magickgetimageformat(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageformat);
  return (f_magickgetimageformat(params.rvalAt(0)));
}
Variant i_mcrypt_module_get_supported_key_sizes(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_get_supported_key_sizes);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_get_supported_key_sizes(params.rvalAt(0)));
  return (f_mcrypt_module_get_supported_key_sizes(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_preg_replace_callback(CArrRef params) {
  FUNCTION_INJECTION(preg_replace_callback);
  int count = params.size();
  if (count <= 3) return (f_preg_replace_callback(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_preg_replace_callback(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_preg_replace_callback(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4))));
}
Variant i_ldap_error(CArrRef params) {
  FUNCTION_INJECTION(ldap_error);
  return (f_ldap_error(params.rvalAt(0)));
}
Variant i_xmlwriter_full_end_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_full_end_element);
  return (f_xmlwriter_full_end_element(params.rvalAt(0)));
}
Variant i_ctype_graph(CArrRef params) {
  FUNCTION_INJECTION(ctype_graph);
  return (f_ctype_graph(params.rvalAt(0)));
}
Variant i_asort(CArrRef params) {
  FUNCTION_INJECTION(asort);
  int count = params.size();
  if (count <= 1) return (f_asort(ref(const_cast<Array&>(params).lvalAt(0))));
  if (count == 2) return (f_asort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_asort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_apd_echo(CArrRef params) {
  FUNCTION_INJECTION(apd_echo);
  return (f_apd_echo(params.rvalAt(0)));
}
Variant i_rewinddir(CArrRef params) {
  FUNCTION_INJECTION(rewinddir);
  return (f_rewinddir(params.rvalAt(0)), null);
}
Variant i_ob_implicit_flush(CArrRef params) {
  FUNCTION_INJECTION(ob_implicit_flush);
  int count = params.size();
  if (count <= 0) return (f_ob_implicit_flush(), null);
  return (f_ob_implicit_flush(params.rvalAt(0)), null);
}
Variant i_pcntl_signal_dispatch(CArrRef params) {
  FUNCTION_INJECTION(pcntl_signal_dispatch);
  return (f_pcntl_signal_dispatch());
}
Variant i_pixelgetiteratorexceptionstring(CArrRef params) {
  FUNCTION_INJECTION(pixelgetiteratorexceptionstring);
  return (f_pixelgetiteratorexceptionstring(params.rvalAt(0)));
}
Variant i_stream_socket_client(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_client);
  int count = params.size();
  if (count <= 1) return (f_stream_socket_client(params.rvalAt(0)));
  if (count == 2) return (f_stream_socket_client(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  if (count == 3) return (f_stream_socket_client(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_stream_socket_client(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  if (count == 5) return (f_stream_socket_client(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
  return (f_stream_socket_client(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_drawsetstrokedasharray(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokedasharray);
  int count = params.size();
  if (count <= 1) return (f_drawsetstrokedasharray(params.rvalAt(0)), null);
  return (f_drawsetstrokedasharray(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mysql_free_result(CArrRef params) {
  FUNCTION_INJECTION(mysql_free_result);
  return (f_mysql_free_result(params.rvalAt(0)));
}
Variant i_is_real(CArrRef params) {
  FUNCTION_INJECTION(is_real);
  return (f_is_real(params.rvalAt(0)));
}
Variant i_mcrypt_enc_is_block_algorithm_mode(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_is_block_algorithm_mode);
  return (f_mcrypt_enc_is_block_algorithm_mode(params.rvalAt(0)));
}
Variant i_array_slice(CArrRef params) {
  FUNCTION_INJECTION(array_slice);
  int count = params.size();
  if (count <= 2) return (f_array_slice(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_array_slice(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_slice(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_count_chars(CArrRef params) {
  FUNCTION_INJECTION(count_chars);
  int count = params.size();
  if (count <= 1) return (f_count_chars(params.rvalAt(0)));
  return (f_count_chars(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileobject_getmaxlinelen(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_getmaxlinelen);
  return (f_hphp_splfileobject_getmaxlinelen(params.rvalAt(0)));
}
Variant i_array_uintersect_uassoc(CArrRef params) {
  FUNCTION_INJECTION(array_uintersect_uassoc);
  int count = params.size();
  if (count <= 4) return (f_array_uintersect_uassoc(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_array_uintersect_uassoc(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.slice(4, count - 4, false)));
}
Variant i_oci_free_statement(CArrRef params) {
  FUNCTION_INJECTION(oci_free_statement);
  return (f_oci_free_statement(params.rvalAt(0)));
}
Variant i_drawsetstrokewidth(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokewidth);
  return (f_drawsetstrokewidth(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_posix_mkfifo(CArrRef params) {
  FUNCTION_INJECTION(posix_mkfifo);
  return (f_posix_mkfifo(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_count_values(CArrRef params) {
  FUNCTION_INJECTION(array_count_values);
  return (f_array_count_values(params.rvalAt(0)));
}
Variant i_pixelgetexception(CArrRef params) {
  FUNCTION_INJECTION(pixelgetexception);
  return (f_pixelgetexception(params.rvalAt(0)));
}
Variant i_mkdir(CArrRef params) {
  FUNCTION_INJECTION(mkdir);
  int count = params.size();
  if (count <= 1) return (f_mkdir(params.rvalAt(0)));
  if (count == 2) return (f_mkdir(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mkdir(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mkdir(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magicksetsize(CArrRef params) {
  FUNCTION_INJECTION(magicksetsize);
  return (f_magicksetsize(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_debug_zval_dump(CArrRef params) {
  FUNCTION_INJECTION(debug_zval_dump);
  return (f_debug_zval_dump(params.rvalAt(0)), null);
}
Variant i_iconv_substr(CArrRef params) {
  FUNCTION_INJECTION(iconv_substr);
  int count = params.size();
  if (count <= 2) return (f_iconv_substr(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_iconv_substr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_iconv_substr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xml_set_external_entity_ref_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_external_entity_ref_handler);
  return (f_xml_set_external_entity_ref_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_decode_numericentity(CArrRef params) {
  FUNCTION_INJECTION(mb_decode_numericentity);
  int count = params.size();
  if (count <= 2) return (f_mb_decode_numericentity(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_decode_numericentity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_ldap_next_attribute(CArrRef params) {
  FUNCTION_INJECTION(ldap_next_attribute);
  return (f_ldap_next_attribute(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileobject_fflush(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fflush);
  return (f_hphp_splfileobject_fflush(params.rvalAt(0)));
}
Variant i_imagejpeg(CArrRef params) {
  FUNCTION_INJECTION(imagejpeg);
  int count = params.size();
  if (count <= 1) return (f_imagejpeg(params.rvalAt(0)));
  if (count == 2) return (f_imagejpeg(params.rvalAt(0), params.rvalAt(1)));
  return (f_imagejpeg(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagesetbrush(CArrRef params) {
  FUNCTION_INJECTION(imagesetbrush);
  return (f_imagesetbrush(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_strtoupper(CArrRef params) {
  FUNCTION_INJECTION(mb_strtoupper);
  int count = params.size();
  if (count <= 1) return (f_mb_strtoupper(params.rvalAt(0)));
  return (f_mb_strtoupper(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_usleep(CArrRef params) {
  FUNCTION_INJECTION(usleep);
  return (f_usleep(params.rvalAt(0)), null);
}
Variant i_mb_strrpos(CArrRef params) {
  FUNCTION_INJECTION(mb_strrpos);
  int count = params.size();
  if (count <= 2) return (f_mb_strrpos(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_strrpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_strrpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_extract(CArrRef params) {
  FUNCTION_INJECTION(extract);
  int count = params.size();
  if (count <= 1) return (f_extract(params.rvalAt(0)));
  if (count == 2) return (f_extract(params.rvalAt(0), params.rvalAt(1)));
  return (f_extract(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_get_browser(CArrRef params) {
  FUNCTION_INJECTION(get_browser);
  int count = params.size();
  if (count <= 0) return (f_get_browser());
  if (count == 1) return (f_get_browser(params.rvalAt(0)));
  return (f_get_browser(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_html_entity_decode(CArrRef params) {
  FUNCTION_INJECTION(html_entity_decode);
  int count = params.size();
  if (count <= 1) return (f_html_entity_decode(params.rvalAt(0)));
  if (count == 2) return (f_html_entity_decode(params.rvalAt(0), params.rvalAt(1)));
  return (f_html_entity_decode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_preg_split(CArrRef params) {
  FUNCTION_INJECTION(preg_split);
  int count = params.size();
  if (count <= 2) return (f_preg_split(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_preg_split(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_preg_split(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickpreviewimages(CArrRef params) {
  FUNCTION_INJECTION(magickpreviewimages);
  return (f_magickpreviewimages(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_zend_logo_guid(CArrRef params) {
  FUNCTION_INJECTION(zend_logo_guid);
  return (f_zend_logo_guid());
}
Variant i_magickgetimagesize(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagesize);
  return (f_magickgetimagesize(params.rvalAt(0)));
}
Variant i_apd_set_browser_trace(CArrRef params) {
  FUNCTION_INJECTION(apd_set_browser_trace);
  return (f_apd_set_browser_trace(), null);
}
Variant i_xhprof_sample_enable(CArrRef params) {
  FUNCTION_INJECTION(xhprof_sample_enable);
  return (f_xhprof_sample_enable(), null);
}
Variant i_hphp_splfileobject_key(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_key);
  return (f_hphp_splfileobject_key(params.rvalAt(0)));
}
Variant i_mb_http_input(CArrRef params) {
  FUNCTION_INJECTION(mb_http_input);
  int count = params.size();
  if (count <= 0) return (f_mb_http_input());
  return (f_mb_http_input(params.rvalAt(0)));
}
Variant i_gzinflate(CArrRef params) {
  FUNCTION_INJECTION(gzinflate);
  int count = params.size();
  if (count <= 1) return (f_gzinflate(params.rvalAt(0)));
  return (f_gzinflate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_openssl_pkcs7_sign(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs7_sign);
  int count = params.size();
  if (count <= 5) return (f_openssl_pkcs7_sign(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_openssl_pkcs7_sign(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_openssl_pkcs7_sign(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_assert(CArrRef params) {
  FUNCTION_INJECTION(assert);
  return (f_assert(params.rvalAt(0)));
}
Variant i_stream_get_wrappers(CArrRef params) {
  FUNCTION_INJECTION(stream_get_wrappers);
  return (f_stream_get_wrappers());
}
Variant i_gzfile(CArrRef params) {
  FUNCTION_INJECTION(gzfile);
  int count = params.size();
  if (count <= 1) return (f_gzfile(params.rvalAt(0)));
  return (f_gzfile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_field_precision(CArrRef params) {
  FUNCTION_INJECTION(oci_field_precision);
  return (f_oci_field_precision(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_stream_socket_sendto(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_sendto);
  int count = params.size();
  if (count <= 2) return (f_stream_socket_sendto(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_socket_sendto(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_socket_sendto(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_gzpassthru(CArrRef params) {
  FUNCTION_INJECTION(gzpassthru);
  return (f_gzpassthru(params.rvalAt(0)));
}
Variant i_stream_bucket_make_writeable(CArrRef params) {
  FUNCTION_INJECTION(stream_bucket_make_writeable);
  return (f_stream_bucket_make_writeable(params.rvalAt(0)));
}
Variant i_posix_setegid(CArrRef params) {
  FUNCTION_INJECTION(posix_setegid);
  return (f_posix_setegid(params.rvalAt(0)));
}
Variant i_drawgetexceptionstring(CArrRef params) {
  FUNCTION_INJECTION(drawgetexceptionstring);
  return (f_drawgetexceptionstring(params.rvalAt(0)));
}
Variant i_hash_algos(CArrRef params) {
  FUNCTION_INJECTION(hash_algos);
  return (f_hash_algos());
}
Variant i_drawsetstrokeantialias(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokeantialias);
  int count = params.size();
  if (count <= 1) return (f_drawsetstrokeantialias(params.rvalAt(0)), null);
  return (f_drawsetstrokeantialias(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_destroypixelwand(CArrRef params) {
  FUNCTION_INJECTION(destroypixelwand);
  return (f_destroypixelwand(params.rvalAt(0)), null);
}
Variant i_fstat(CArrRef params) {
  FUNCTION_INJECTION(fstat);
  return (f_fstat(params.rvalAt(0)));
}
Variant i_magicksetimageresolution(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageresolution);
  return (f_magicksetimageresolution(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mysql_db_name(CArrRef params) {
  FUNCTION_INJECTION(mysql_db_name);
  int count = params.size();
  if (count <= 2) return (f_mysql_db_name(params.rvalAt(0), params.rvalAt(1)));
  return (f_mysql_db_name(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_finite(CArrRef params) {
  FUNCTION_INJECTION(is_finite);
  return (f_is_finite(params.rvalAt(0)));
}
Variant i_pixelgetyellowquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetyellowquantum);
  return (f_pixelgetyellowquantum(params.rvalAt(0)));
}
Variant i_ksort(CArrRef params) {
  FUNCTION_INJECTION(ksort);
  int count = params.size();
  if (count <= 1) return (f_ksort(ref(const_cast<Array&>(params).lvalAt(0))));
  return (f_ksort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_thrift_protocol_read_binary(CArrRef params) {
  FUNCTION_INJECTION(thrift_protocol_read_binary);
  return (f_thrift_protocol_read_binary(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_get_included_files(CArrRef params) {
  FUNCTION_INJECTION(get_included_files);
  return (f_get_included_files());
}
Variant i_strip_tags(CArrRef params) {
  FUNCTION_INJECTION(strip_tags);
  int count = params.size();
  if (count <= 1) return (f_strip_tags(params.rvalAt(0)));
  return (f_strip_tags(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_ereg_search_getpos(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search_getpos);
  return (f_mb_ereg_search_getpos());
}
Variant i_pixelgetcyanquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetcyanquantum);
  return (f_pixelgetcyanquantum(params.rvalAt(0)));
}
Variant i_oci_define_by_name(CArrRef params) {
  FUNCTION_INJECTION(oci_define_by_name);
  int count = params.size();
  if (count <= 3) return (f_oci_define_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_oci_define_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
}
Variant i_magickgetexception(CArrRef params) {
  FUNCTION_INJECTION(magickgetexception);
  return (f_magickgetexception(params.rvalAt(0)));
}
Variant i_ctype_punct(CArrRef params) {
  FUNCTION_INJECTION(ctype_punct);
  return (f_ctype_punct(params.rvalAt(0)));
}
Variant i_next(CArrRef params) {
  FUNCTION_INJECTION(next);
  return (f_next(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_shm_detach(CArrRef params) {
  FUNCTION_INJECTION(shm_detach);
  return (f_shm_detach(params.rvalAt(0)));
}
Variant i_shm_attach(CArrRef params) {
  FUNCTION_INJECTION(shm_attach);
  int count = params.size();
  if (count <= 1) return (f_shm_attach(params.rvalAt(0)));
  if (count == 2) return (f_shm_attach(params.rvalAt(0), params.rvalAt(1)));
  return (f_shm_attach(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickflattenimages(CArrRef params) {
  FUNCTION_INJECTION(magickflattenimages);
  return (f_magickflattenimages(params.rvalAt(0)));
}
Variant i_similar_text(CArrRef params) {
  FUNCTION_INJECTION(similar_text);
  int count = params.size();
  if (count <= 2) return (f_similar_text(params.rvalAt(0), params.rvalAt(1)));
  return (f_similar_text(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_imagecreatefromgd2part(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromgd2part);
  return (f_imagecreatefromgd2part(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_iconv_get_encoding(CArrRef params) {
  FUNCTION_INJECTION(iconv_get_encoding);
  int count = params.size();
  if (count <= 0) return (f_iconv_get_encoding());
  return (f_iconv_get_encoding(params.rvalAt(0)));
}
Variant i_getmyinode(CArrRef params) {
  FUNCTION_INJECTION(getmyinode);
  return (f_getmyinode());
}
Variant i_gzgetc(CArrRef params) {
  FUNCTION_INJECTION(gzgetc);
  return (f_gzgetc(params.rvalAt(0)));
}
Variant i_hphp_set_static_property(CArrRef params) {
  FUNCTION_INJECTION(hphp_set_static_property);
  return (f_hphp_set_static_property(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_unlink(CArrRef params) {
  FUNCTION_INJECTION(unlink);
  int count = params.size();
  if (count <= 1) return (f_unlink(params.rvalAt(0)));
  return (f_unlink(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_module_open(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_open);
  return (f_mcrypt_module_open(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_token_get_all(CArrRef params) {
  FUNCTION_INJECTION(token_get_all);
  return (f_token_get_all(params.rvalAt(0)));
}
Variant i_base_convert(CArrRef params) {
  FUNCTION_INJECTION(base_convert);
  return (f_base_convert(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_gethostbynamel(CArrRef params) {
  FUNCTION_INJECTION(gethostbynamel);
  return (f_gethostbynamel(params.rvalAt(0)));
}
Variant i_var_dump(CArrRef params) {
  FUNCTION_INJECTION(var_dump);
  int count = params.size();
  if (count <= 1) return (f_var_dump(count, params.rvalAt(0)), null);
  return (f_var_dump(count,params.rvalAt(0), params.slice(1, count - 1, false)), null);
}
Variant i_xmlwriter_start_attribute(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_attribute);
  return (f_xmlwriter_start_attribute(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pack(CArrRef params) {
  FUNCTION_INJECTION(pack);
  int count = params.size();
  if (count <= 1) return (f_pack(count, params.rvalAt(0)));
  return (f_pack(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_gzgets(CArrRef params) {
  FUNCTION_INJECTION(gzgets);
  int count = params.size();
  if (count <= 1) return (f_gzgets(params.rvalAt(0)));
  return (f_gzgets(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apache_get_version(CArrRef params) {
  FUNCTION_INJECTION(apache_get_version);
  return (f_apache_get_version());
}
Variant i_array_intersect_uassoc(CArrRef params) {
  FUNCTION_INJECTION(array_intersect_uassoc);
  int count = params.size();
  if (count <= 3) return (f_array_intersect_uassoc(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_intersect_uassoc(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_basename(CArrRef params) {
  FUNCTION_INJECTION(basename);
  int count = params.size();
  if (count <= 1) return (f_basename(params.rvalAt(0)));
  return (f_basename(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_krsort(CArrRef params) {
  FUNCTION_INJECTION(krsort);
  int count = params.size();
  if (count <= 1) return (f_krsort(ref(const_cast<Array&>(params).lvalAt(0))));
  return (f_krsort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_clock_gettime(CArrRef params) {
  FUNCTION_INJECTION(clock_gettime);
  return (f_clock_gettime(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_pushdrawingwand(CArrRef params) {
  FUNCTION_INJECTION(pushdrawingwand);
  return (f_pushdrawingwand(params.rvalAt(0)), null);
}
Variant i_imageline(CArrRef params) {
  FUNCTION_INJECTION(imageline);
  return (f_imageline(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_socket_read(CArrRef params) {
  FUNCTION_INJECTION(socket_read);
  int count = params.size();
  if (count <= 2) return (f_socket_read(params.rvalAt(0), params.rvalAt(1)));
  return (f_socket_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_write_dtd_entity(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_dtd_entity);
  int count = params.size();
  if (count <= 3) return (f_xmlwriter_write_dtd_entity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_xmlwriter_write_dtd_entity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_xmlwriter_write_dtd_entity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_xmlwriter_write_dtd_entity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_xmlwriter_write_dtd_entity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_mysql_tablename(CArrRef params) {
  FUNCTION_INJECTION(mysql_tablename);
  return (f_mysql_tablename(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickwriteimage(CArrRef params) {
  FUNCTION_INJECTION(magickwriteimage);
  return (f_magickwriteimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mcrypt_module_get_algo_key_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_get_algo_key_size);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_get_algo_key_size(params.rvalAt(0)));
  return (f_mcrypt_module_get_algo_key_size(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hash_update_file(CArrRef params) {
  FUNCTION_INJECTION(hash_update_file);
  int count = params.size();
  if (count <= 2) return (f_hash_update_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_hash_update_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickembossimage(CArrRef params) {
  FUNCTION_INJECTION(magickembossimage);
  return (f_magickembossimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_gzencode(CArrRef params) {
  FUNCTION_INJECTION(gzencode);
  int count = params.size();
  if (count <= 1) return (f_gzencode(params.rvalAt(0)));
  if (count == 2) return (f_gzencode(params.rvalAt(0), params.rvalAt(1)));
  return (f_gzencode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_checkdate(CArrRef params) {
  FUNCTION_INJECTION(checkdate);
  return (f_checkdate(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickimplodeimage(CArrRef params) {
  FUNCTION_INJECTION(magickimplodeimage);
  return (f_magickimplodeimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimageindex(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageindex);
  return (f_magickgetimageindex(params.rvalAt(0)));
}
Variant i_ctype_lower(CArrRef params) {
  FUNCTION_INJECTION(ctype_lower);
  return (f_ctype_lower(params.rvalAt(0)));
}
Variant i_imagepsloadfont(CArrRef params) {
  FUNCTION_INJECTION(imagepsloadfont);
  return (f_imagepsloadfont(params.rvalAt(0)));
}
Variant i_iconv_mime_decode(CArrRef params) {
  FUNCTION_INJECTION(iconv_mime_decode);
  int count = params.size();
  if (count <= 1) return (f_iconv_mime_decode(params.rvalAt(0)));
  if (count == 2) return (f_iconv_mime_decode(params.rvalAt(0), params.rvalAt(1)));
  return (f_iconv_mime_decode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_recursiveiteratoriterator_key(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_key);
  return (f_hphp_recursiveiteratoriterator_key(params.rvalAt(0)));
}
Variant i_mcrypt_module_is_block_algorithm(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_is_block_algorithm);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_is_block_algorithm(params.rvalAt(0)));
  return (f_mcrypt_module_is_block_algorithm(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_wandgetexception(CArrRef params) {
  FUNCTION_INJECTION(wandgetexception);
  return (f_wandgetexception(params.rvalAt(0)));
}
Variant i_fsockopen(CArrRef params) {
  FUNCTION_INJECTION(fsockopen);
  int count = params.size();
  if (count <= 1) return (f_fsockopen(params.rvalAt(0)));
  if (count == 2) return (f_fsockopen(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_fsockopen(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_fsockopen(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
  return (f_fsockopen(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3)), params.rvalAt(4)));
}
Variant i_usort(CArrRef params) {
  FUNCTION_INJECTION(usort);
  return (f_usort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_pixelsetiteratorrow(CArrRef params) {
  FUNCTION_INJECTION(pixelsetiteratorrow);
  return (f_pixelsetiteratorrow(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileinfo_iswritable(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_iswritable);
  return (f_hphp_splfileinfo_iswritable(params.rvalAt(0)));
}
Variant i_ldap_get_option(CArrRef params) {
  FUNCTION_INJECTION(ldap_get_option);
  return (f_ldap_get_option(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_socket_recv(CArrRef params) {
  FUNCTION_INJECTION(socket_recv);
  return (f_socket_recv(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_sys_getloadavg(CArrRef params) {
  FUNCTION_INJECTION(sys_getloadavg);
  return (f_sys_getloadavg());
}
Variant i_evhttp_async_post(CArrRef params) {
  FUNCTION_INJECTION(evhttp_async_post);
  int count = params.size();
  if (count <= 2) return (f_evhttp_async_post(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_evhttp_async_post(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_evhttp_async_post(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hphp_recursivedirectoryiterator_seek(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_seek);
  return (f_hphp_recursivedirectoryiterator_seek(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_array_values(CArrRef params) {
  FUNCTION_INJECTION(array_values);
  return (f_array_values(params.rvalAt(0)));
}
Variant i_ctype_digit(CArrRef params) {
  FUNCTION_INJECTION(ctype_digit);
  return (f_ctype_digit(params.rvalAt(0)));
}
Variant i_ob_get_length(CArrRef params) {
  FUNCTION_INJECTION(ob_get_length);
  return (f_ob_get_length());
}
Variant i_magicksolarizeimage(CArrRef params) {
  FUNCTION_INJECTION(magicksolarizeimage);
  return (f_magicksolarizeimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ob_list_handlers(CArrRef params) {
  FUNCTION_INJECTION(ob_list_handlers);
  return (f_ob_list_handlers());
}
Variant i_array_uintersect_assoc(CArrRef params) {
  FUNCTION_INJECTION(array_uintersect_assoc);
  int count = params.size();
  if (count <= 3) return (f_array_uintersect_assoc(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_uintersect_assoc(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_openssl_x509_read(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_read);
  return (f_openssl_x509_read(params.rvalAt(0)));
}
Variant i_magickgetimagecolormapcolor(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagecolormapcolor);
  return (f_magickgetimagecolormapcolor(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileobject_getcvscontrol(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_getcvscontrol);
  return (f_hphp_splfileobject_getcvscontrol(params.rvalAt(0)));
}
Variant i_settype(CArrRef params) {
  FUNCTION_INJECTION(settype);
  return (f_settype(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
}
Variant i_posix_access(CArrRef params) {
  FUNCTION_INJECTION(posix_access);
  int count = params.size();
  if (count <= 1) return (f_posix_access(params.rvalAt(0)));
  return (f_posix_access(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_explode(CArrRef params) {
  FUNCTION_INJECTION(explode);
  int count = params.size();
  if (count <= 2) return (f_explode(params.rvalAt(0), params.rvalAt(1)));
  return (f_explode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_fb_load_local_databases(CArrRef params) {
  FUNCTION_INJECTION(fb_load_local_databases);
  return (f_fb_load_local_databases(params.rvalAt(0)), null);
}
Variant i_imagecreatefromgd(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromgd);
  return (f_imagecreatefromgd(params.rvalAt(0)));
}
Variant i_proc_close(CArrRef params) {
  FUNCTION_INJECTION(proc_close);
  return (f_proc_close(params.rvalAt(0)));
}
Variant i_magickgaussianblurimage(CArrRef params) {
  FUNCTION_INJECTION(magickgaussianblurimage);
  int count = params.size();
  if (count <= 3) return (f_magickgaussianblurimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgaussianblurimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_apd_set_session_trace_socket(CArrRef params) {
  FUNCTION_INJECTION(apd_set_session_trace_socket);
  return (f_apd_set_session_trace_socket(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_openssl_pkcs12_export_to_file(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs12_export_to_file);
  int count = params.size();
  if (count <= 4) return (f_openssl_pkcs12_export_to_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_openssl_pkcs12_export_to_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_mailparse_msg_free(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_free);
  return (f_mailparse_msg_free(params.rvalAt(0)));
}
Variant i_openssl_private_decrypt(CArrRef params) {
  FUNCTION_INJECTION(openssl_private_decrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_private_decrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_private_decrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hphp_get_extension_info(CArrRef params) {
  FUNCTION_INJECTION(hphp_get_extension_info);
  return (f_hphp_get_extension_info(params.rvalAt(0)));
}
Variant i_output_add_rewrite_var(CArrRef params) {
  FUNCTION_INJECTION(output_add_rewrite_var);
  return (f_output_add_rewrite_var(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_write_cdata(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_cdata);
  return (f_xmlwriter_write_cdata(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_list_mime_names(CArrRef params) {
  FUNCTION_INJECTION(mb_list_mime_names);
  int count = params.size();
  if (count <= 0) return (f_mb_list_mime_names());
  return (f_mb_list_mime_names(params.rvalAt(0)));
}
Variant i_ispixelwand(CArrRef params) {
  FUNCTION_INJECTION(ispixelwand);
  return (f_ispixelwand(params.rvalAt(0)));
}
Variant i_xmlwriter_end_dtd(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_dtd);
  return (f_xmlwriter_end_dtd(params.rvalAt(0)));
}
Variant i_curl_close(CArrRef params) {
  FUNCTION_INJECTION(curl_close);
  return (f_curl_close(params.rvalAt(0)), null);
}
Variant i_array_udiff(CArrRef params) {
  FUNCTION_INJECTION(array_udiff);
  int count = params.size();
  if (count <= 3) return (f_array_udiff(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_udiff(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_stream_context_create(CArrRef params) {
  FUNCTION_INJECTION(stream_context_create);
  int count = params.size();
  if (count <= 0) return (f_stream_context_create());
  if (count == 1) return (f_stream_context_create(params.rvalAt(0)));
  return (f_stream_context_create(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetstrokedashoffset(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokedashoffset);
  return (f_drawgetstrokedashoffset(params.rvalAt(0)));
}
Variant i_openssl_pkey_get_public(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_get_public);
  return (f_openssl_pkey_get_public(params.rvalAt(0)));
}
Variant i_interface_exists(CArrRef params) {
  FUNCTION_INJECTION(interface_exists);
  int count = params.size();
  if (count <= 1) return (f_interface_exists(params.rvalAt(0)));
  return (f_interface_exists(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_directoryiterator___construct(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator___construct);
  return (f_hphp_directoryiterator___construct(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpathmovetorelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathmovetorelative);
  return (f_drawpathmovetorelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_apache_get_config(CArrRef params) {
  FUNCTION_INJECTION(apache_get_config);
  return (f_apache_get_config());
}
Variant i_curl_copy_handle(CArrRef params) {
  FUNCTION_INJECTION(curl_copy_handle);
  return (f_curl_copy_handle(params.rvalAt(0)));
}
Variant i_drawgetvectorgraphics(CArrRef params) {
  FUNCTION_INJECTION(drawgetvectorgraphics);
  return (f_drawgetvectorgraphics(params.rvalAt(0)));
}
Variant i_drawpathfinish(CArrRef params) {
  FUNCTION_INJECTION(drawpathfinish);
  return (f_drawpathfinish(params.rvalAt(0)), null);
}
Variant i_png2wbmp(CArrRef params) {
  FUNCTION_INJECTION(png2wbmp);
  return (f_png2wbmp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_drawmatte(CArrRef params) {
  FUNCTION_INJECTION(drawmatte);
  return (f_drawmatte(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_imagecolormatch(CArrRef params) {
  FUNCTION_INJECTION(imagecolormatch);
  return (f_imagecolormatch(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawrectangle(CArrRef params) {
  FUNCTION_INJECTION(drawrectangle);
  return (f_drawrectangle(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_fb_parallel_query(CArrRef params) {
  FUNCTION_INJECTION(fb_parallel_query);
  int count = params.size();
  if (count <= 1) return (f_fb_parallel_query(params.rvalAt(0)));
  if (count == 2) return (f_fb_parallel_query(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_fb_parallel_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_fb_parallel_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_fb_parallel_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_fb_parallel_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_fb_parallel_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_mcrypt_enc_get_block_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_get_block_size);
  return (f_mcrypt_enc_get_block_size(params.rvalAt(0)));
}
Variant i_stream_context_set_option(CArrRef params) {
  FUNCTION_INJECTION(stream_context_set_option);
  int count = params.size();
  if (count <= 2) return (f_stream_context_set_option(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_context_set_option(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_context_set_option(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawpathcurvetorelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetorelative);
  return (f_drawpathcurvetorelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)), null);
}
Variant i_phpcredits(CArrRef params) {
  FUNCTION_INJECTION(phpcredits);
  int count = params.size();
  if (count <= 0) return (f_phpcredits());
  return (f_phpcredits(params.rvalAt(0)));
}
Variant i_drawgetfillrule(CArrRef params) {
  FUNCTION_INJECTION(drawgetfillrule);
  return (f_drawgetfillrule(params.rvalAt(0)));
}
Variant i_xmlwriter_end_cdata(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_cdata);
  return (f_xmlwriter_end_cdata(params.rvalAt(0)));
}
Variant i_magickgetversionstring(CArrRef params) {
  FUNCTION_INJECTION(magickgetversionstring);
  return (f_magickgetversionstring());
}
Variant i_pcntl_fork(CArrRef params) {
  FUNCTION_INJECTION(pcntl_fork);
  return (f_pcntl_fork());
}
Variant i_doubleval(CArrRef params) {
  FUNCTION_INJECTION(doubleval);
  return (f_doubleval(params.rvalAt(0)));
}
Variant i_assert_options(CArrRef params) {
  FUNCTION_INJECTION(assert_options);
  int count = params.size();
  if (count <= 1) return (f_assert_options(params.rvalAt(0)));
  return (f_assert_options(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickhasnextimage(CArrRef params) {
  FUNCTION_INJECTION(magickhasnextimage);
  return (f_magickhasnextimage(params.rvalAt(0)));
}
Variant i_rmdir(CArrRef params) {
  FUNCTION_INJECTION(rmdir);
  int count = params.size();
  if (count <= 1) return (f_rmdir(params.rvalAt(0)));
  return (f_rmdir(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetstrokelinecap(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokelinecap);
  return (f_drawgetstrokelinecap(params.rvalAt(0)));
}
Variant i_oci_statement_type(CArrRef params) {
  FUNCTION_INJECTION(oci_statement_type);
  return (f_oci_statement_type(params.rvalAt(0)));
}
Variant i_magickscaleimage(CArrRef params) {
  FUNCTION_INJECTION(magickscaleimage);
  return (f_magickscaleimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelgetblackquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetblackquantum);
  return (f_pixelgetblackquantum(params.rvalAt(0)));
}
Variant i_magicknewimage(CArrRef params) {
  FUNCTION_INJECTION(magicknewimage);
  int count = params.size();
  if (count <= 3) return (f_magicknewimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magicknewimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_destroypixelwands(CArrRef params) {
  FUNCTION_INJECTION(destroypixelwands);
  return (f_destroypixelwands(params.rvalAt(0)), null);
}
Variant i_shm_remove(CArrRef params) {
  FUNCTION_INJECTION(shm_remove);
  return (f_shm_remove(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_setflags(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_setflags);
  return (f_hphp_splfileobject_setflags(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_date_sun_info(CArrRef params) {
  FUNCTION_INJECTION(date_sun_info);
  return (f_date_sun_info(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_directoryiterator_valid(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_valid);
  return (f_hphp_directoryiterator_valid(params.rvalAt(0)));
}
Variant i_magickresizeimage(CArrRef params) {
  FUNCTION_INJECTION(magickresizeimage);
  return (f_magickresizeimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_parse_ini_file(CArrRef params) {
  FUNCTION_INJECTION(parse_ini_file);
  int count = params.size();
  if (count <= 1) return (f_parse_ini_file(params.rvalAt(0)));
  return (f_parse_ini_file(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_stream_get_meta_data(CArrRef params) {
  FUNCTION_INJECTION(stream_get_meta_data);
  return (f_stream_get_meta_data(params.rvalAt(0)));
}
Variant i_imagepsencodefont(CArrRef params) {
  FUNCTION_INJECTION(imagepsencodefont);
  return (f_imagepsencodefont(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_set_option(CArrRef params) {
  FUNCTION_INJECTION(ldap_set_option);
  return (f_ldap_set_option(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetsize(CArrRef params) {
  FUNCTION_INJECTION(magickgetsize);
  return (f_magickgetsize(params.rvalAt(0)));
}
Variant i_memory_get_peak_usage(CArrRef params) {
  FUNCTION_INJECTION(memory_get_peak_usage);
  int count = params.size();
  if (count <= 0) return (f_memory_get_peak_usage());
  return (f_memory_get_peak_usage(params.rvalAt(0)));
}
Variant i_pcntl_exec(CArrRef params) {
  FUNCTION_INJECTION(pcntl_exec);
  int count = params.size();
  if (count <= 1) return (f_pcntl_exec(params.rvalAt(0)), null);
  if (count == 2) return (f_pcntl_exec(params.rvalAt(0), params.rvalAt(1)), null);
  return (f_pcntl_exec(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_xmlwriter_set_indent_string(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_set_indent_string);
  return (f_xmlwriter_set_indent_string(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_php_strip_whitespace(CArrRef params) {
  FUNCTION_INJECTION(php_strip_whitespace);
  return (f_php_strip_whitespace(params.rvalAt(0)));
}
Variant i_strcoll(CArrRef params) {
  FUNCTION_INJECTION(strcoll);
  return (f_strcoll(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_send(CArrRef params) {
  FUNCTION_INJECTION(socket_send);
  return (f_socket_send(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_zlib_get_coding_type(CArrRef params) {
  FUNCTION_INJECTION(zlib_get_coding_type);
  return (f_zlib_get_coding_type());
}
Variant i_hphp_splfileobject_fscanf(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fscanf);
  return (f_hphp_splfileobject_fscanf(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mb_ereg_search_getregs(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search_getregs);
  return (f_mb_ereg_search_getregs());
}
Variant i_mb_eregi(CArrRef params) {
  FUNCTION_INJECTION(mb_eregi);
  int count = params.size();
  if (count <= 2) return (f_mb_eregi(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_eregi(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_pixelgetgreen(CArrRef params) {
  FUNCTION_INJECTION(pixelgetgreen);
  return (f_pixelgetgreen(params.rvalAt(0)));
}
Variant i_mysql_client_encoding(CArrRef params) {
  FUNCTION_INJECTION(mysql_client_encoding);
  int count = params.size();
  if (count <= 0) return (f_mysql_client_encoding());
  return (f_mysql_client_encoding(params.rvalAt(0)));
}
Variant i_zend_thread_id(CArrRef params) {
  FUNCTION_INJECTION(zend_thread_id);
  return (f_zend_thread_id());
}
Variant i_ldap_mod_replace(CArrRef params) {
  FUNCTION_INJECTION(ldap_mod_replace);
  return (f_ldap_mod_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stream_filter_prepend(CArrRef params) {
  FUNCTION_INJECTION(stream_filter_prepend);
  int count = params.size();
  if (count <= 2) return (f_stream_filter_prepend(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_filter_prepend(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_filter_prepend(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_substr(CArrRef params) {
  FUNCTION_INJECTION(substr);
  int count = params.size();
  if (count <= 2) return (f_substr(params.rvalAt(0), params.rvalAt(1)));
  return (f_substr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickcombineimages(CArrRef params) {
  FUNCTION_INJECTION(magickcombineimages);
  return (f_magickcombineimages(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelgetexceptiontype(CArrRef params) {
  FUNCTION_INJECTION(pixelgetexceptiontype);
  return (f_pixelgetexceptiontype(params.rvalAt(0)));
}
Variant i_unpack(CArrRef params) {
  FUNCTION_INJECTION(unpack);
  return (f_unpack(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileinfo_isdir(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_isdir);
  return (f_hphp_splfileinfo_isdir(params.rvalAt(0)));
}
Variant i_magickgetimagepixels(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagepixels);
  return (f_magickgetimagepixels(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_array_product(CArrRef params) {
  FUNCTION_INJECTION(array_product);
  return (f_array_product(params.rvalAt(0)));
}
Variant i_substr_replace(CArrRef params) {
  FUNCTION_INJECTION(substr_replace);
  int count = params.size();
  if (count <= 3) return (f_substr_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_substr_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_oci_bind_array_by_name(CArrRef params) {
  FUNCTION_INJECTION(oci_bind_array_by_name);
  int count = params.size();
  if (count <= 4) return (f_oci_bind_array_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  if (count == 5) return (f_oci_bind_array_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
  return (f_oci_bind_array_by_name(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_xmlwriter_write_dtd(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_dtd);
  int count = params.size();
  if (count <= 2) return (f_xmlwriter_write_dtd(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_xmlwriter_write_dtd(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_xmlwriter_write_dtd(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_xmlwriter_write_dtd(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_mysql_select_db(CArrRef params) {
  FUNCTION_INJECTION(mysql_select_db);
  int count = params.size();
  if (count <= 1) return (f_mysql_select_db(params.rvalAt(0)));
  return (f_mysql_select_db(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_use_soap_error_handler(CArrRef params) {
  FUNCTION_INJECTION(use_soap_error_handler);
  int count = params.size();
  if (count <= 0) return (f_use_soap_error_handler());
  return (f_use_soap_error_handler(params.rvalAt(0)));
}
Variant i_debug_backtrace(CArrRef params) {
  FUNCTION_INJECTION(debug_backtrace);
  return (f_debug_backtrace());
}
Variant i_drawpathcurvetosmoothrelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetosmoothrelative);
  return (f_drawpathcurvetosmoothrelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_mailparse_determine_best_xfer_encoding(CArrRef params) {
  FUNCTION_INJECTION(mailparse_determine_best_xfer_encoding);
  return (f_mailparse_determine_best_xfer_encoding(params.rvalAt(0)));
}
Variant i_imagettfbbox(CArrRef params) {
  FUNCTION_INJECTION(imagettfbbox);
  return (f_imagettfbbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mb_internal_encoding(CArrRef params) {
  FUNCTION_INJECTION(mb_internal_encoding);
  int count = params.size();
  if (count <= 0) return (f_mb_internal_encoding());
  return (f_mb_internal_encoding(params.rvalAt(0)));
}
Variant i_msg_get_queue(CArrRef params) {
  FUNCTION_INJECTION(msg_get_queue);
  int count = params.size();
  if (count <= 1) return (f_msg_get_queue(params.rvalAt(0)));
  return (f_msg_get_queue(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_getegid(CArrRef params) {
  FUNCTION_INJECTION(posix_getegid);
  return (f_posix_getegid());
}
Variant i_magickmedianfilterimage(CArrRef params) {
  FUNCTION_INJECTION(magickmedianfilterimage);
  return (f_magickmedianfilterimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xbox_task_result(CArrRef params) {
  FUNCTION_INJECTION(xbox_task_result);
  return (f_xbox_task_result(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_mcrypt_generic_deinit(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_generic_deinit);
  return (f_mcrypt_generic_deinit(params.rvalAt(0)));
}
Variant i_method_exists(CArrRef params) {
  FUNCTION_INJECTION(method_exists);
  return (f_method_exists(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_money_format(CArrRef params) {
  FUNCTION_INJECTION(money_format);
  return (f_money_format(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_clearmagickwand(CArrRef params) {
  FUNCTION_INJECTION(clearmagickwand);
  return (f_clearmagickwand(params.rvalAt(0)), null);
}
Variant i_array_udiff_assoc(CArrRef params) {
  FUNCTION_INJECTION(array_udiff_assoc);
  int count = params.size();
  if (count <= 3) return (f_array_udiff_assoc(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_udiff_assoc(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_xml_parser_free(CArrRef params) {
  FUNCTION_INJECTION(xml_parser_free);
  return (f_xml_parser_free(params.rvalAt(0)));
}
Variant i_is_resource(CArrRef params) {
  FUNCTION_INJECTION(is_resource);
  return (f_is_resource(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getsize(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getsize);
  return (f_hphp_splfileinfo_getsize(params.rvalAt(0)));
}
Variant i_posix_seteuid(CArrRef params) {
  FUNCTION_INJECTION(posix_seteuid);
  return (f_posix_seteuid(params.rvalAt(0)));
}
Variant i_magicksetinterlacescheme(CArrRef params) {
  FUNCTION_INJECTION(magicksetinterlacescheme);
  return (f_magicksetinterlacescheme(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_str_shuffle(CArrRef params) {
  FUNCTION_INJECTION(str_shuffle);
  return (f_str_shuffle(params.rvalAt(0)));
}
Variant i_mcrypt_enc_is_block_algorithm(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_is_block_algorithm);
  return (f_mcrypt_enc_is_block_algorithm(params.rvalAt(0)));
}
Variant i_magickgetcopyright(CArrRef params) {
  FUNCTION_INJECTION(magickgetcopyright);
  return (f_magickgetcopyright());
}
Variant i_magickstripimage(CArrRef params) {
  FUNCTION_INJECTION(magickstripimage);
  return (f_magickstripimage(params.rvalAt(0)));
}
Variant i_base64_decode(CArrRef params) {
  FUNCTION_INJECTION(base64_decode);
  int count = params.size();
  if (count <= 1) return (f_base64_decode(params.rvalAt(0)));
  return (f_base64_decode(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_rand(CArrRef params) {
  FUNCTION_INJECTION(rand);
  int count = params.size();
  if (count <= 0) return (f_rand());
  if (count == 1) return (f_rand(params.rvalAt(0)));
  return (f_rand(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_crc32(CArrRef params) {
  FUNCTION_INJECTION(crc32);
  return (f_crc32(params.rvalAt(0)));
}
Variant i_stream_encoding(CArrRef params) {
  FUNCTION_INJECTION(stream_encoding);
  int count = params.size();
  if (count <= 1) return (f_stream_encoding(params.rvalAt(0)));
  return (f_stream_encoding(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetstrokedasharray(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokedasharray);
  return (f_drawgetstrokedasharray(params.rvalAt(0)));
}
Variant i_magickgetimagedispose(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagedispose);
  return (f_magickgetimagedispose(params.rvalAt(0)));
}
Variant i_drawpopdefs(CArrRef params) {
  FUNCTION_INJECTION(drawpopdefs);
  return (f_drawpopdefs(params.rvalAt(0)), null);
}
Variant i_xml_parser_create(CArrRef params) {
  FUNCTION_INJECTION(xml_parser_create);
  int count = params.size();
  if (count <= 0) return (f_xml_parser_create());
  return (f_xml_parser_create(params.rvalAt(0)));
}
Variant i_pcntl_wifsignaled(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wifsignaled);
  return (f_pcntl_wifsignaled(params.rvalAt(0)));
}
Variant i_openssl_pkcs7_encrypt(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs7_encrypt);
  int count = params.size();
  if (count <= 4) return (f_openssl_pkcs7_encrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_openssl_pkcs7_encrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_openssl_pkcs7_encrypt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_read_exif_data(CArrRef params) {
  FUNCTION_INJECTION(read_exif_data);
  int count = params.size();
  if (count <= 1) return (f_read_exif_data(params.rvalAt(0)));
  if (count == 2) return (f_read_exif_data(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_read_exif_data(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_read_exif_data(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawsetstrokeopacity(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokeopacity);
  return (f_drawsetstrokeopacity(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_drawroundrectangle(CArrRef params) {
  FUNCTION_INJECTION(drawroundrectangle);
  return (f_drawroundrectangle(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)), null);
}
Variant i_hphp_directoryiterator_isdot(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_isdot);
  return (f_hphp_directoryiterator_isdot(params.rvalAt(0)));
}
Variant i_drawgetstrokewidth(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokewidth);
  return (f_drawgetstrokewidth(params.rvalAt(0)));
}
Variant i_date_create(CArrRef params) {
  FUNCTION_INJECTION(date_create);
  int count = params.size();
  if (count <= 0) return (f_date_create());
  if (count == 1) return (f_date_create(params.rvalAt(0)));
  return (f_date_create(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_strcspn(CArrRef params) {
  FUNCTION_INJECTION(strcspn);
  int count = params.size();
  if (count <= 2) return (f_strcspn(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_strcspn(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_strcspn(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawgetclipunits(CArrRef params) {
  FUNCTION_INJECTION(drawgetclipunits);
  return (f_drawgetclipunits(params.rvalAt(0)));
}
Variant i_ldap_sasl_bind(CArrRef params) {
  FUNCTION_INJECTION(ldap_sasl_bind);
  int count = params.size();
  if (count <= 1) return (f_ldap_sasl_bind(params.rvalAt(0)));
  if (count == 2) return (f_ldap_sasl_bind(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_ldap_sasl_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_ldap_sasl_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_ldap_sasl_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_ldap_sasl_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_ldap_sasl_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_sem_acquire(CArrRef params) {
  FUNCTION_INJECTION(sem_acquire);
  return (f_sem_acquire(params.rvalAt(0)));
}
Variant i_socket_strerror(CArrRef params) {
  FUNCTION_INJECTION(socket_strerror);
  return (f_socket_strerror(params.rvalAt(0)));
}
Variant i_magickgetstringheight(CArrRef params) {
  FUNCTION_INJECTION(magickgetstringheight);
  int count = params.size();
  if (count <= 3) return (f_magickgetstringheight(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgetstringheight(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_rawurlencode(CArrRef params) {
  FUNCTION_INJECTION(rawurlencode);
  return (f_rawurlencode(params.rvalAt(0)));
}
Variant i_strtotime(CArrRef params) {
  FUNCTION_INJECTION(strtotime);
  int count = params.size();
  if (count <= 1) return (f_strtotime(params.rvalAt(0)));
  return (f_strtotime(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursivedirectoryiterator_getsubpath(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_getsubpath);
  return (f_hphp_recursivedirectoryiterator_getsubpath(params.rvalAt(0)));
}
Variant i_apc_clear_cache(CArrRef params) {
  FUNCTION_INJECTION(apc_clear_cache);
  int count = params.size();
  if (count <= 0) return (f_apc_clear_cache());
  return (f_apc_clear_cache(params.rvalAt(0)));
}
Variant i_dirname(CArrRef params) {
  FUNCTION_INJECTION(dirname);
  return (f_dirname(params.rvalAt(0)));
}
Variant i_strnatcasecmp(CArrRef params) {
  FUNCTION_INJECTION(strnatcasecmp);
  return (f_strnatcasecmp(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetsamplingfactors(CArrRef params) {
  FUNCTION_INJECTION(magicksetsamplingfactors);
  return (f_magicksetsamplingfactors(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_openssl_pkey_get_private(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_get_private);
  int count = params.size();
  if (count <= 1) return (f_openssl_pkey_get_private(params.rvalAt(0)));
  return (f_openssl_pkey_get_private(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickaverageimages(CArrRef params) {
  FUNCTION_INJECTION(magickaverageimages);
  return (f_magickaverageimages(params.rvalAt(0)));
}
Variant i_iconv_strrpos(CArrRef params) {
  FUNCTION_INJECTION(iconv_strrpos);
  int count = params.size();
  if (count <= 2) return (f_iconv_strrpos(params.rvalAt(0), params.rvalAt(1)));
  return (f_iconv_strrpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawsetviewbox(CArrRef params) {
  FUNCTION_INJECTION(drawsetviewbox);
  return (f_drawsetviewbox(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_magicksetimagecompressionquality(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagecompressionquality);
  return (f_magicksetimagecompressionquality(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_ping(CArrRef params) {
  FUNCTION_INJECTION(mysql_ping);
  int count = params.size();
  if (count <= 0) return (f_mysql_ping());
  return (f_mysql_ping(params.rvalAt(0)));
}
Variant i_xml_get_current_byte_index(CArrRef params) {
  FUNCTION_INJECTION(xml_get_current_byte_index);
  return (f_xml_get_current_byte_index(params.rvalAt(0)));
}
Variant i_magicktransformimage(CArrRef params) {
  FUNCTION_INJECTION(magicktransformimage);
  return (f_magicktransformimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawgetstrokeantialias(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokeantialias);
  return (f_drawgetstrokeantialias(params.rvalAt(0)));
}
Variant i_ini_alter(CArrRef params) {
  FUNCTION_INJECTION(ini_alter);
  return (f_ini_alter(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_get_class(CArrRef params) {
  FUNCTION_INJECTION(get_class);
  int count = params.size();
  if (count <= 0) return (f_get_class());
  return (f_get_class(params.rvalAt(0)));
}
Variant i_magicksetimageprofile(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageprofile);
  return (f_magicksetimageprofile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mysql_field_seek(CArrRef params) {
  FUNCTION_INJECTION(mysql_field_seek);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_seek(params.rvalAt(0)));
  return (f_mysql_field_seek(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetfontsize(CArrRef params) {
  FUNCTION_INJECTION(drawgetfontsize);
  return (f_drawgetfontsize(params.rvalAt(0)));
}
Variant i_mysql_num_rows(CArrRef params) {
  FUNCTION_INJECTION(mysql_num_rows);
  return (f_mysql_num_rows(params.rvalAt(0)));
}
Variant i_hphp_recursiveiteratoriterator_rewind(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_rewind);
  return (f_hphp_recursiveiteratoriterator_rewind(params.rvalAt(0)), null);
}
Variant i_magickgetimageresolution(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageresolution);
  return (f_magickgetimageresolution(params.rvalAt(0)));
}
Variant i_array_diff(CArrRef params) {
  FUNCTION_INJECTION(array_diff);
  int count = params.size();
  if (count <= 2) return (f_array_diff(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_diff(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_xmlwriter_open_uri(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_open_uri);
  return (f_xmlwriter_open_uri(params.rvalAt(0)));
}
Variant i_magickgetimagetype(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagetype);
  return (f_magickgetimagetype(params.rvalAt(0)));
}
Variant i_simplexml_load_string(CArrRef params) {
  FUNCTION_INJECTION(simplexml_load_string);
  int count = params.size();
  if (count <= 1) return (f_simplexml_load_string(params.rvalAt(0)));
  if (count == 2) return (f_simplexml_load_string(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_simplexml_load_string(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_simplexml_load_string(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_simplexml_load_string(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_magickunsharpmaskimage(CArrRef params) {
  FUNCTION_INJECTION(magickunsharpmaskimage);
  int count = params.size();
  if (count <= 5) return (f_magickunsharpmaskimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_magickunsharpmaskimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_quoted_printable_encode(CArrRef params) {
  FUNCTION_INJECTION(quoted_printable_encode);
  return (f_quoted_printable_encode(params.rvalAt(0)));
}
Variant i_gettype(CArrRef params) {
  FUNCTION_INJECTION(gettype);
  return (f_gettype(params.rvalAt(0)));
}
Variant i_magickgetimagebackgroundcolor(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagebackgroundcolor);
  return (f_magickgetimagebackgroundcolor(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_setmaxlinelen(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_setmaxlinelen);
  return (f_hphp_splfileobject_setmaxlinelen(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_array_intersect_key(CArrRef params) {
  FUNCTION_INJECTION(array_intersect_key);
  int count = params.size();
  if (count <= 2) return (f_array_intersect_key(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_array_intersect_key(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_array_change_key_case(CArrRef params) {
  FUNCTION_INJECTION(array_change_key_case);
  int count = params.size();
  if (count <= 1) return (f_array_change_key_case(params.rvalAt(0)));
  return (f_array_change_key_case(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_first_attribute(CArrRef params) {
  FUNCTION_INJECTION(ldap_first_attribute);
  return (f_ldap_first_attribute(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_gettimeofday(CArrRef params) {
  FUNCTION_INJECTION(gettimeofday);
  int count = params.size();
  if (count <= 0) return (f_gettimeofday());
  return (f_gettimeofday(params.rvalAt(0)));
}
Variant i_xmlwriter_end_element(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_element);
  return (f_xmlwriter_end_element(params.rvalAt(0)));
}
Variant i_drawpoint(CArrRef params) {
  FUNCTION_INJECTION(drawpoint);
  return (f_drawpoint(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_oci_fetch_object(CArrRef params) {
  FUNCTION_INJECTION(oci_fetch_object);
  return (f_oci_fetch_object(params.rvalAt(0)));
}
Variant i_strnatcmp(CArrRef params) {
  FUNCTION_INJECTION(strnatcmp);
  return (f_strnatcmp(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_property_exists(CArrRef params) {
  FUNCTION_INJECTION(property_exists);
  return (f_property_exists(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_rollback(CArrRef params) {
  FUNCTION_INJECTION(oci_rollback);
  return (f_oci_rollback(params.rvalAt(0)));
}
Variant i_mysql_affected_rows(CArrRef params) {
  FUNCTION_INJECTION(mysql_affected_rows);
  int count = params.size();
  if (count <= 0) return (f_mysql_affected_rows());
  return (f_mysql_affected_rows(params.rvalAt(0)));
}
Variant i_magickdespeckleimage(CArrRef params) {
  FUNCTION_INJECTION(magickdespeckleimage);
  return (f_magickdespeckleimage(params.rvalAt(0)));
}
Variant i_imagecopymergegray(CArrRef params) {
  FUNCTION_INJECTION(imagecopymergegray);
  return (f_imagecopymergegray(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8)));
}
Variant i_ctype_cntrl(CArrRef params) {
  FUNCTION_INJECTION(ctype_cntrl);
  return (f_ctype_cntrl(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_next(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_next);
  return (f_hphp_splfileobject_next(params.rvalAt(0)), null);
}
Variant i_is_array(CArrRef params) {
  FUNCTION_INJECTION(is_array);
  return (f_is_array(params.rvalAt(0)));
}
Variant i_rename(CArrRef params) {
  FUNCTION_INJECTION(rename);
  int count = params.size();
  if (count <= 2) return (f_rename(params.rvalAt(0), params.rvalAt(1)));
  return (f_rename(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_date_format(CArrRef params) {
  FUNCTION_INJECTION(date_format);
  return (f_date_format(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileobject_fgetc(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fgetc);
  return (f_hphp_splfileobject_fgetc(params.rvalAt(0)));
}
Variant i_magickshaveimage(CArrRef params) {
  FUNCTION_INJECTION(magickshaveimage);
  return (f_magickshaveimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_output_memory(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_output_memory);
  int count = params.size();
  if (count <= 1) return (f_xmlwriter_output_memory(params.rvalAt(0)));
  return (f_xmlwriter_output_memory(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ob_end_flush(CArrRef params) {
  FUNCTION_INJECTION(ob_end_flush);
  return (f_ob_end_flush());
}
Variant i_magickwhitethresholdimage(CArrRef params) {
  FUNCTION_INJECTION(magickwhitethresholdimage);
  return (f_magickwhitethresholdimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpolyline(CArrRef params) {
  FUNCTION_INJECTION(drawpolyline);
  return (f_drawpolyline(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_hphp_splfileobject_fgets(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_fgets);
  return (f_hphp_splfileobject_fgets(params.rvalAt(0)));
}
Variant i_hphp_get_function_info(CArrRef params) {
  FUNCTION_INJECTION(hphp_get_function_info);
  return (f_hphp_get_function_info(params.rvalAt(0)));
}
Variant i_prev(CArrRef params) {
  FUNCTION_INJECTION(prev);
  return (f_prev(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_imagegammacorrect(CArrRef params) {
  FUNCTION_INJECTION(imagegammacorrect);
  return (f_imagegammacorrect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_str_replace(CArrRef params) {
  FUNCTION_INJECTION(str_replace);
  int count = params.size();
  if (count <= 3) return (f_str_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_str_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_clock_getres(CArrRef params) {
  FUNCTION_INJECTION(clock_getres);
  return (f_clock_getres(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_magicktrimimage(CArrRef params) {
  FUNCTION_INJECTION(magicktrimimage);
  return (f_magicktrimimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileinfo_getpathinfo(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getpathinfo);
  return (f_hphp_splfileinfo_getpathinfo(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetimagegamma(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagegamma);
  return (f_magickgetimagegamma(params.rvalAt(0)));
}
Variant i_newdrawingwand(CArrRef params) {
  FUNCTION_INJECTION(newdrawingwand);
  return (f_newdrawingwand());
}
Variant i_oci_new_cursor(CArrRef params) {
  FUNCTION_INJECTION(oci_new_cursor);
  return (f_oci_new_cursor(params.rvalAt(0)));
}
Variant i_gzrewind(CArrRef params) {
  FUNCTION_INJECTION(gzrewind);
  return (f_gzrewind(params.rvalAt(0)));
}
Variant i_ldap_explode_dn(CArrRef params) {
  FUNCTION_INJECTION(ldap_explode_dn);
  return (f_ldap_explode_dn(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_times(CArrRef params) {
  FUNCTION_INJECTION(posix_times);
  return (f_posix_times());
}
Variant i_drawgetfillcolor(CArrRef params) {
  FUNCTION_INJECTION(drawgetfillcolor);
  return (f_drawgetfillcolor(params.rvalAt(0)));
}
Variant i_mb_strtolower(CArrRef params) {
  FUNCTION_INJECTION(mb_strtolower);
  int count = params.size();
  if (count <= 1) return (f_mb_strtolower(params.rvalAt(0)));
  return (f_mb_strtolower(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_localtime(CArrRef params) {
  FUNCTION_INJECTION(localtime);
  int count = params.size();
  if (count <= 0) return (f_localtime());
  if (count == 1) return (f_localtime(params.rvalAt(0)));
  return (f_localtime(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_password_change(CArrRef params) {
  FUNCTION_INJECTION(oci_password_change);
  return (f_oci_password_change(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_fb_thrift_unserialize(CArrRef params) {
  FUNCTION_INJECTION(fb_thrift_unserialize);
  int count = params.size();
  if (count <= 2) return (f_fb_thrift_unserialize(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_fb_thrift_unserialize(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_sha1(CArrRef params) {
  FUNCTION_INJECTION(sha1);
  int count = params.size();
  if (count <= 1) return (f_sha1(params.rvalAt(0)));
  return (f_sha1(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_implode(CArrRef params) {
  FUNCTION_INJECTION(implode);
  int count = params.size();
  if (count <= 1) return (f_implode(params.rvalAt(0)));
  return (f_implode(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_date_isodate_set(CArrRef params) {
  FUNCTION_INJECTION(date_isodate_set);
  int count = params.size();
  if (count <= 3) return (f_date_isodate_set(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
  return (f_date_isodate_set(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_oci_result(CArrRef params) {
  FUNCTION_INJECTION(oci_result);
  return (f_oci_result(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickpaintopaqueimage(CArrRef params) {
  FUNCTION_INJECTION(magickpaintopaqueimage);
  int count = params.size();
  if (count <= 3) return (f_magickpaintopaqueimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickpaintopaqueimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mb_strimwidth(CArrRef params) {
  FUNCTION_INJECTION(mb_strimwidth);
  int count = params.size();
  if (count <= 3) return (f_mb_strimwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mb_strimwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mb_strimwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_drawsetfont(CArrRef params) {
  FUNCTION_INJECTION(drawsetfont);
  return (f_drawsetfont(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xml_set_default_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_default_handler);
  return (f_xml_set_default_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickchopimage(CArrRef params) {
  FUNCTION_INJECTION(magickchopimage);
  return (f_magickchopimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_wordwrap(CArrRef params) {
  FUNCTION_INJECTION(wordwrap);
  int count = params.size();
  if (count <= 1) return (f_wordwrap(params.rvalAt(0)));
  if (count == 2) return (f_wordwrap(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_wordwrap(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_wordwrap(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_gzgetss(CArrRef params) {
  FUNCTION_INJECTION(gzgetss);
  int count = params.size();
  if (count <= 1) return (f_gzgetss(params.rvalAt(0)));
  if (count == 2) return (f_gzgetss(params.rvalAt(0), params.rvalAt(1)));
  return (f_gzgetss(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetimagevirtualpixelmethod(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagevirtualpixelmethod);
  return (f_magickgetimagevirtualpixelmethod(params.rvalAt(0)));
}
Variant i_imagedestroy(CArrRef params) {
  FUNCTION_INJECTION(imagedestroy);
  return (f_imagedestroy(params.rvalAt(0)));
}
Variant i_timezone_open(CArrRef params) {
  FUNCTION_INJECTION(timezone_open);
  return (f_timezone_open(params.rvalAt(0)));
}
Variant i_ob_clean(CArrRef params) {
  FUNCTION_INJECTION(ob_clean);
  return (f_ob_clean(), null);
}
Variant i_mb_ereg_search_pos(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search_pos);
  int count = params.size();
  if (count <= 0) return (f_mb_ereg_search_pos());
  if (count == 1) return (f_mb_ereg_search_pos(params.rvalAt(0)));
  return (f_mb_ereg_search_pos(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_bccomp(CArrRef params) {
  FUNCTION_INJECTION(bccomp);
  int count = params.size();
  if (count <= 2) return (f_bccomp(params.rvalAt(0), params.rvalAt(1)));
  return (f_bccomp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_gzdecode(CArrRef params) {
  FUNCTION_INJECTION(gzdecode);
  return (f_gzdecode(params.rvalAt(0)));
}
Variant i_magicksetimagecompose(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagecompose);
  return (f_magicksetimagecompose(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apc_bin_dump(CArrRef params) {
  FUNCTION_INJECTION(apc_bin_dump);
  int count = params.size();
  if (count <= 0) return (f_apc_bin_dump());
  if (count == 1) return (f_apc_bin_dump(params.rvalAt(0)));
  return (f_apc_bin_dump(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ini_get(CArrRef params) {
  FUNCTION_INJECTION(ini_get);
  return (f_ini_get(params.rvalAt(0)));
}
Variant i_mb_ereg_search_setpos(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_search_setpos);
  return (f_mb_ereg_search_setpos(params.rvalAt(0)));
}
Variant i_stream_copy_to_stream(CArrRef params) {
  FUNCTION_INJECTION(stream_copy_to_stream);
  int count = params.size();
  if (count <= 2) return (f_stream_copy_to_stream(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_copy_to_stream(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_copy_to_stream(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xml_get_error_code(CArrRef params) {
  FUNCTION_INJECTION(xml_get_error_code);
  return (f_xml_get_error_code(params.rvalAt(0)));
}
Variant i_pcntl_alarm(CArrRef params) {
  FUNCTION_INJECTION(pcntl_alarm);
  return (f_pcntl_alarm(params.rvalAt(0)));
}
Variant i_drawpolygon(CArrRef params) {
  FUNCTION_INJECTION(drawpolygon);
  return (f_drawpolygon(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mysql_connect(CArrRef params) {
  FUNCTION_INJECTION(mysql_connect);
  int count = params.size();
  if (count <= 0) return (f_mysql_connect());
  if (count == 1) return (f_mysql_connect(params.rvalAt(0)));
  if (count == 2) return (f_mysql_connect(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mysql_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mysql_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_mysql_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_mysql_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_mysql_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_xmlwriter_write_raw(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_raw);
  return (f_xmlwriter_write_raw(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_fgetss(CArrRef params) {
  FUNCTION_INJECTION(fgetss);
  int count = params.size();
  if (count <= 1) return (f_fgetss(params.rvalAt(0)));
  if (count == 2) return (f_fgetss(params.rvalAt(0), params.rvalAt(1)));
  return (f_fgetss(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawarc(CArrRef params) {
  FUNCTION_INJECTION(drawarc);
  return (f_drawarc(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)), null);
}
Variant i_set_error_handler(CArrRef params) {
  FUNCTION_INJECTION(set_error_handler);
  int count = params.size();
  if (count <= 1) return (f_set_error_handler(params.rvalAt(0)));
  return (f_set_error_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_str_word_count(CArrRef params) {
  FUNCTION_INJECTION(str_word_count);
  int count = params.size();
  if (count <= 1) return (f_str_word_count(params.rvalAt(0)));
  if (count == 2) return (f_str_word_count(params.rvalAt(0), params.rvalAt(1)));
  return (f_str_word_count(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawsetcliprule(CArrRef params) {
  FUNCTION_INJECTION(drawsetcliprule);
  return (f_drawsetcliprule(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_openssl_pkcs12_read(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkcs12_read);
  return (f_openssl_pkcs12_read(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
}
Variant i_ldap_list(CArrRef params) {
  FUNCTION_INJECTION(ldap_list);
  int count = params.size();
  if (count <= 3) return (f_ldap_list(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_ldap_list(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_ldap_list(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_ldap_list(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  if (count == 7) return (f_ldap_list(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
  return (f_ldap_list(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_func_num_args(CArrRef params) {
  FUNCTION_INJECTION(func_num_args);
  return (f_func_num_args());
}
Variant i_drawsettextdecoration(CArrRef params) {
  FUNCTION_INJECTION(drawsettextdecoration);
  return (f_drawsettextdecoration(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_str_rot13(CArrRef params) {
  FUNCTION_INJECTION(str_rot13);
  return (f_str_rot13(params.rvalAt(0)));
}
Variant i_openssl_pkey_new(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_new);
  int count = params.size();
  if (count <= 0) return (f_openssl_pkey_new());
  return (f_openssl_pkey_new(params.rvalAt(0)));
}
Variant i_magicksetimageindex(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageindex);
  return (f_magicksetimageindex(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_rename(CArrRef params) {
  FUNCTION_INJECTION(ldap_rename);
  return (f_ldap_rename(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_ldap_start_tls(CArrRef params) {
  FUNCTION_INJECTION(ldap_start_tls);
  return (f_ldap_start_tls(params.rvalAt(0)));
}
Variant i_tanh(CArrRef params) {
  FUNCTION_INJECTION(tanh);
  return (f_tanh(params.rvalAt(0)));
}
Variant i_drawscale(CArrRef params) {
  FUNCTION_INJECTION(drawscale);
  return (f_drawscale(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_drawrotate(CArrRef params) {
  FUNCTION_INJECTION(drawrotate);
  return (f_drawrotate(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_getservbyname(CArrRef params) {
  FUNCTION_INJECTION(getservbyname);
  return (f_getservbyname(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_compact(CArrRef params) {
  FUNCTION_INJECTION(compact);
  int count = params.size();
  if (count <= 1) return (f_compact(count, params.rvalAt(0)));
  return (f_compact(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_hphp_splfileobject_valid(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_valid);
  return (f_hphp_splfileobject_valid(params.rvalAt(0)));
}
Variant i_imagecolorclosest(CArrRef params) {
  FUNCTION_INJECTION(imagecolorclosest);
  return (f_imagecolorclosest(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickwriteimages(CArrRef params) {
  FUNCTION_INJECTION(magickwriteimages);
  int count = params.size();
  if (count <= 1) return (f_magickwriteimages(params.rvalAt(0)));
  if (count == 2) return (f_magickwriteimages(params.rvalAt(0), params.rvalAt(1)));
  return (f_magickwriteimages(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelsetalpha(CArrRef params) {
  FUNCTION_INJECTION(pixelsetalpha);
  return (f_pixelsetalpha(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magicksetimageiterations(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageiterations);
  return (f_magicksetimageiterations(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_field_scale(CArrRef params) {
  FUNCTION_INJECTION(oci_field_scale);
  return (f_oci_field_scale(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpathmovetoabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathmovetoabsolute);
  return (f_drawpathmovetoabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_quotemeta(CArrRef params) {
  FUNCTION_INJECTION(quotemeta);
  return (f_quotemeta(params.rvalAt(0)));
}
Variant i_imagefilltoborder(CArrRef params) {
  FUNCTION_INJECTION(imagefilltoborder);
  return (f_imagefilltoborder(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_xml_set_notation_decl_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_notation_decl_handler);
  return (f_xml_set_notation_decl_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_free_descriptor(CArrRef params) {
  FUNCTION_INJECTION(oci_free_descriptor);
  return (f_oci_free_descriptor(params.rvalAt(0)));
}
Variant i_is_writeable(CArrRef params) {
  FUNCTION_INJECTION(is_writeable);
  return (f_is_writeable(params.rvalAt(0)));
}
Variant i_magickgetwandsize(CArrRef params) {
  FUNCTION_INJECTION(magickgetwandsize);
  return (f_magickgetwandsize(params.rvalAt(0)));
}
Variant i_hphp_directoryiterator___tostring(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator___tostring);
  return (f_hphp_directoryiterator___tostring(params.rvalAt(0)));
}
Variant i_imageinterlace(CArrRef params) {
  FUNCTION_INJECTION(imageinterlace);
  int count = params.size();
  if (count <= 1) return (f_imageinterlace(params.rvalAt(0)));
  return (f_imageinterlace(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_preg_match_all(CArrRef params) {
  FUNCTION_INJECTION(preg_match_all);
  int count = params.size();
  if (count <= 3) return (f_preg_match_all(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_preg_match_all(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  return (f_preg_match_all(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_proc_terminate(CArrRef params) {
  FUNCTION_INJECTION(proc_terminate);
  int count = params.size();
  if (count <= 1) return (f_proc_terminate(params.rvalAt(0)));
  return (f_proc_terminate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apc_bin_loadfile(CArrRef params) {
  FUNCTION_INJECTION(apc_bin_loadfile);
  int count = params.size();
  if (count <= 1) return (f_apc_bin_loadfile(params.rvalAt(0)));
  if (count == 2) return (f_apc_bin_loadfile(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_apc_bin_loadfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_apc_bin_loadfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_posix_getcwd(CArrRef params) {
  FUNCTION_INJECTION(posix_getcwd);
  return (f_posix_getcwd());
}
Variant i_drawpathcurvetoabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetoabsolute);
  return (f_drawpathcurvetoabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)), null);
}
Variant i_preg_match(CArrRef params) {
  FUNCTION_INJECTION(preg_match);
  int count = params.size();
  if (count <= 2) return (f_preg_match(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_preg_match(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_preg_match(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  return (f_preg_match(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_timezone_abbreviations_list(CArrRef params) {
  FUNCTION_INJECTION(timezone_abbreviations_list);
  return (f_timezone_abbreviations_list());
}
Variant i_magickradialblurimage(CArrRef params) {
  FUNCTION_INJECTION(magickradialblurimage);
  return (f_magickradialblurimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_geteuid(CArrRef params) {
  FUNCTION_INJECTION(posix_geteuid);
  return (f_posix_geteuid());
}
Variant i_mysql_fetch_lengths(CArrRef params) {
  FUNCTION_INJECTION(mysql_fetch_lengths);
  return (f_mysql_fetch_lengths(params.rvalAt(0)));
}
Variant i_magickwriteimagefile(CArrRef params) {
  FUNCTION_INJECTION(magickwriteimagefile);
  return (f_magickwriteimagefile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_serialize(CArrRef params) {
  FUNCTION_INJECTION(serialize);
  return (f_serialize(params.rvalAt(0)));
}
Variant i_exif_read_data(CArrRef params) {
  FUNCTION_INJECTION(exif_read_data);
  int count = params.size();
  if (count <= 1) return (f_exif_read_data(params.rvalAt(0)));
  if (count == 2) return (f_exif_read_data(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_exif_read_data(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_exif_read_data(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_pixelgetiteratorexceptiontype(CArrRef params) {
  FUNCTION_INJECTION(pixelgetiteratorexceptiontype);
  return (f_pixelgetiteratorexceptiontype(params.rvalAt(0)));
}
Variant i_destroydrawingwand(CArrRef params) {
  FUNCTION_INJECTION(destroydrawingwand);
  return (f_destroydrawingwand(params.rvalAt(0)), null);
}
Variant i_lstat(CArrRef params) {
  FUNCTION_INJECTION(lstat);
  return (f_lstat(params.rvalAt(0)));
}
Variant i_apache_note(CArrRef params) {
  FUNCTION_INJECTION(apache_note);
  int count = params.size();
  if (count <= 1) return (f_apache_note(params.rvalAt(0)));
  return (f_apache_note(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetexceptiontype(CArrRef params) {
  FUNCTION_INJECTION(drawgetexceptiontype);
  return (f_drawgetexceptiontype(params.rvalAt(0)));
}
Variant i_drawbezier(CArrRef params) {
  FUNCTION_INJECTION(drawbezier);
  return (f_drawbezier(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_xmlwriter_start_comment(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_comment);
  return (f_xmlwriter_start_comment(params.rvalAt(0)));
}
Variant i_ldap_set_rebind_proc(CArrRef params) {
  FUNCTION_INJECTION(ldap_set_rebind_proc);
  return (f_ldap_set_rebind_proc(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsetstrokecolor(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokecolor);
  return (f_drawsetstrokecolor(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_drawpathlinetohorizontalrelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathlinetohorizontalrelative);
  return (f_drawpathlinetohorizontalrelative(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_gmmktime(CArrRef params) {
  FUNCTION_INJECTION(gmmktime);
  int count = params.size();
  if (count <= 0) return (f_gmmktime());
  if (count == 1) return (f_gmmktime(params.rvalAt(0)));
  if (count == 2) return (f_gmmktime(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_gmmktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_gmmktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_gmmktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_gmmktime(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_gmdate(CArrRef params) {
  FUNCTION_INJECTION(gmdate);
  int count = params.size();
  if (count <= 1) return (f_gmdate(params.rvalAt(0)));
  return (f_gmdate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_getgid(CArrRef params) {
  FUNCTION_INJECTION(posix_getgid);
  return (f_posix_getgid());
}
Variant i_sinh(CArrRef params) {
  FUNCTION_INJECTION(sinh);
  return (f_sinh(params.rvalAt(0)));
}
Variant i_apc_fetch(CArrRef params) {
  FUNCTION_INJECTION(apc_fetch);
  int count = params.size();
  if (count <= 1) return (f_apc_fetch(params.rvalAt(0)));
  if (count == 2) return (f_apc_fetch(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_apc_fetch(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
}
Variant i_fileowner(CArrRef params) {
  FUNCTION_INJECTION(fileowner);
  return (f_fileowner(params.rvalAt(0)));
}
Variant i_imagecopymerge(CArrRef params) {
  FUNCTION_INJECTION(imagecopymerge);
  return (f_imagecopymerge(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8)));
}
Variant i_magickclipimage(CArrRef params) {
  FUNCTION_INJECTION(magickclipimage);
  return (f_magickclipimage(params.rvalAt(0)));
}
Variant i_imagestringup(CArrRef params) {
  FUNCTION_INJECTION(imagestringup);
  return (f_imagestringup(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_mt_getrandmax(CArrRef params) {
  FUNCTION_INJECTION(mt_getrandmax);
  return (f_mt_getrandmax());
}
Variant i_magickgetresourcelimit(CArrRef params) {
  FUNCTION_INJECTION(magickgetresourcelimit);
  return (f_magickgetresourcelimit(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getlinktarget(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getlinktarget);
  return (f_hphp_splfileinfo_getlinktarget(params.rvalAt(0)));
}
Variant i_imagecolorexact(CArrRef params) {
  FUNCTION_INJECTION(imagecolorexact);
  return (f_imagecolorexact(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hphp_recursivedirectoryiterator_current(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_current);
  return (f_hphp_recursivedirectoryiterator_current(params.rvalAt(0)));
}
Variant i_setcookie(CArrRef params) {
  FUNCTION_INJECTION(setcookie);
  int count = params.size();
  if (count <= 1) return (f_setcookie(params.rvalAt(0)));
  if (count == 2) return (f_setcookie(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_setcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_setcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_setcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_setcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  return (f_setcookie(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
}
Variant i_fileatime(CArrRef params) {
  FUNCTION_INJECTION(fileatime);
  return (f_fileatime(params.rvalAt(0)));
}
Variant i_apd_stop_trace(CArrRef params) {
  FUNCTION_INJECTION(apd_stop_trace);
  return (f_apd_stop_trace(), null);
}
Variant i_addcslashes(CArrRef params) {
  FUNCTION_INJECTION(addcslashes);
  return (f_addcslashes(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetimageoption(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageoption);
  return (f_magicksetimageoption(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xmlwriter_write_comment(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_comment);
  return (f_xmlwriter_write_comment(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetfontstyle(CArrRef params) {
  FUNCTION_INJECTION(drawgetfontstyle);
  return (f_drawgetfontstyle(params.rvalAt(0)));
}
Variant i_strtoupper(CArrRef params) {
  FUNCTION_INJECTION(strtoupper);
  return (f_strtoupper(params.rvalAt(0)));
}
Variant i_xml_set_processing_instruction_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_processing_instruction_handler);
  return (f_xml_set_processing_instruction_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apd_breakpoint(CArrRef params) {
  FUNCTION_INJECTION(apd_breakpoint);
  return (f_apd_breakpoint());
}
Variant i_magickgetimageblueprimary(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageblueprimary);
  return (f_magickgetimageblueprimary(params.rvalAt(0)));
}
Variant i_magickspreadimage(CArrRef params) {
  FUNCTION_INJECTION(magickspreadimage);
  return (f_magickspreadimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_fill(CArrRef params) {
  FUNCTION_INJECTION(array_fill);
  return (f_array_fill(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stream_set_write_buffer(CArrRef params) {
  FUNCTION_INJECTION(stream_set_write_buffer);
  return (f_stream_set_write_buffer(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_list_encodings(CArrRef params) {
  FUNCTION_INJECTION(mb_list_encodings);
  return (f_mb_list_encodings());
}
Variant i_sleep(CArrRef params) {
  FUNCTION_INJECTION(sleep);
  return (f_sleep(params.rvalAt(0)));
}
Variant i_cleardrawingwand(CArrRef params) {
  FUNCTION_INJECTION(cleardrawingwand);
  return (f_cleardrawingwand(params.rvalAt(0)), null);
}
Variant i_imagecolorset(CArrRef params) {
  FUNCTION_INJECTION(imagecolorset);
  return (f_imagecolorset(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_openssl_x509_checkpurpose(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_checkpurpose);
  int count = params.size();
  if (count <= 2) return (f_openssl_x509_checkpurpose(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_openssl_x509_checkpurpose(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_openssl_x509_checkpurpose(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_drawpathcurvetosmoothabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetosmoothabsolute);
  return (f_drawpathcurvetosmoothabsolute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_array_intersect_ukey(CArrRef params) {
  FUNCTION_INJECTION(array_intersect_ukey);
  int count = params.size();
  if (count <= 3) return (f_array_intersect_ukey(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_intersect_ukey(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_timezone_name_from_abbr(CArrRef params) {
  FUNCTION_INJECTION(timezone_name_from_abbr);
  int count = params.size();
  if (count <= 1) return (f_timezone_name_from_abbr(params.rvalAt(0)));
  if (count == 2) return (f_timezone_name_from_abbr(params.rvalAt(0), params.rvalAt(1)));
  return (f_timezone_name_from_abbr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagefilledellipse(CArrRef params) {
  FUNCTION_INJECTION(imagefilledellipse);
  return (f_imagefilledellipse(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_pcntl_wstopsig(CArrRef params) {
  FUNCTION_INJECTION(pcntl_wstopsig);
  return (f_pcntl_wstopsig(params.rvalAt(0)));
}
Variant i_get_defined_vars(CArrRef params) {
  FUNCTION_INJECTION(get_defined_vars);
  return (f_get_defined_vars());
}
Variant i_memory_get_usage(CArrRef params) {
  FUNCTION_INJECTION(memory_get_usage);
  int count = params.size();
  if (count <= 0) return (f_memory_get_usage());
  return (f_memory_get_usage(params.rvalAt(0)));
}
Variant i_intval(CArrRef params) {
  FUNCTION_INJECTION(intval);
  int count = params.size();
  if (count <= 1) return (f_intval(params.rvalAt(0)));
  return (f_intval(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pagelet_server_task_status(CArrRef params) {
  FUNCTION_INJECTION(pagelet_server_task_status);
  return (f_pagelet_server_task_status(params.rvalAt(0)));
}
Variant i_iconv_set_encoding(CArrRef params) {
  FUNCTION_INJECTION(iconv_set_encoding);
  return (f_iconv_set_encoding(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickmattefloodfillimage(CArrRef params) {
  FUNCTION_INJECTION(magickmattefloodfillimage);
  return (f_magickmattefloodfillimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_mailparse_msg_get_part(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_get_part);
  return (f_mailparse_msg_get_part(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_check_encoding(CArrRef params) {
  FUNCTION_INJECTION(mb_check_encoding);
  int count = params.size();
  if (count <= 0) return (f_mb_check_encoding());
  if (count == 1) return (f_mb_check_encoding(params.rvalAt(0)));
  return (f_mb_check_encoding(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_get_dn(CArrRef params) {
  FUNCTION_INJECTION(ldap_get_dn);
  return (f_ldap_get_dn(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_newpixeliterator(CArrRef params) {
  FUNCTION_INJECTION(newpixeliterator);
  return (f_newpixeliterator(params.rvalAt(0)));
}
Variant i_magicksetimagefilename(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagefilename);
  int count = params.size();
  if (count <= 1) return (f_magicksetimagefilename(params.rvalAt(0)));
  return (f_magicksetimagefilename(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_call_user_func(CArrRef params) {
  FUNCTION_INJECTION(call_user_func);
  int count = params.size();
  if (count <= 1) return (f_call_user_func(count, params.rvalAt(0)));
  return (f_call_user_func(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_mysql_list_tables(CArrRef params) {
  FUNCTION_INJECTION(mysql_list_tables);
  int count = params.size();
  if (count <= 1) return (f_mysql_list_tables(params.rvalAt(0)));
  return (f_mysql_list_tables(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetinterlacescheme(CArrRef params) {
  FUNCTION_INJECTION(magickgetinterlacescheme);
  return (f_magickgetinterlacescheme(params.rvalAt(0)));
}
Variant i_ltrim(CArrRef params) {
  FUNCTION_INJECTION(ltrim);
  int count = params.size();
  if (count <= 1) return (f_ltrim(params.rvalAt(0)));
  return (f_ltrim(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicktextureimage(CArrRef params) {
  FUNCTION_INJECTION(magicktextureimage);
  return (f_magicktextureimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_ereg_match(CArrRef params) {
  FUNCTION_INJECTION(mb_ereg_match);
  int count = params.size();
  if (count <= 2) return (f_mb_ereg_match(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_ereg_match(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mt_srand(CArrRef params) {
  FUNCTION_INJECTION(mt_srand);
  int count = params.size();
  if (count <= 0) return (f_mt_srand(), null);
  return (f_mt_srand(params.rvalAt(0)), null);
}
Variant i_imagecolorallocate(CArrRef params) {
  FUNCTION_INJECTION(imagecolorallocate);
  return (f_imagecolorallocate(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_define_syslog_variables(CArrRef params) {
  FUNCTION_INJECTION(define_syslog_variables);
  return (f_define_syslog_variables(), null);
}
Variant i_mcrypt_enc_get_modes_name(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_get_modes_name);
  return (f_mcrypt_enc_get_modes_name(params.rvalAt(0)));
}
Variant i_array_flip(CArrRef params) {
  FUNCTION_INJECTION(array_flip);
  return (f_array_flip(params.rvalAt(0)));
}
Variant i_count(CArrRef params) {
  FUNCTION_INJECTION(count);
  int count = params.size();
  if (count <= 1) return (f_count(params.rvalAt(0)));
  return (f_count(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_lcg_value(CArrRef params) {
  FUNCTION_INJECTION(lcg_value);
  return (f_lcg_value());
}
Variant i_php_logo_guid(CArrRef params) {
  FUNCTION_INJECTION(php_logo_guid);
  return (f_php_logo_guid());
}
Variant i_time(CArrRef params) {
  FUNCTION_INJECTION(time);
  return (f_time());
}
Variant i_magickcoalesceimages(CArrRef params) {
  FUNCTION_INJECTION(magickcoalesceimages);
  return (f_magickcoalesceimages(params.rvalAt(0)));
}
Variant i_pixelgetquantumcolor(CArrRef params) {
  FUNCTION_INJECTION(pixelgetquantumcolor);
  return (f_pixelgetquantumcolor(params.rvalAt(0)));
}
Variant i_openssl_private_encrypt(CArrRef params) {
  FUNCTION_INJECTION(openssl_private_encrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_private_encrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_private_encrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xhprof_enable(CArrRef params) {
  FUNCTION_INJECTION(xhprof_enable);
  int count = params.size();
  if (count <= 1) return (f_xhprof_enable(params.rvalAt(0)), null);
  return (f_xhprof_enable(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_hphp_splfileinfo_gettype(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_gettype);
  return (f_hphp_splfileinfo_gettype(params.rvalAt(0)));
}
Variant i_xmlwriter_start_document(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_document);
  int count = params.size();
  if (count <= 1) return (f_xmlwriter_start_document(params.rvalAt(0)));
  if (count == 2) return (f_xmlwriter_start_document(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_xmlwriter_start_document(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_xmlwriter_start_document(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_libxml_clear_errors(CArrRef params) {
  FUNCTION_INJECTION(libxml_clear_errors);
  return (f_libxml_clear_errors(), null);
}
Variant i_magicknormalizeimage(CArrRef params) {
  FUNCTION_INJECTION(magicknormalizeimage);
  return (f_magicknormalizeimage(params.rvalAt(0)));
}
Variant i_magickgetformat(CArrRef params) {
  FUNCTION_INJECTION(magickgetformat);
  return (f_magickgetformat(params.rvalAt(0)));
}
Variant i_hphp_get_class_info(CArrRef params) {
  FUNCTION_INJECTION(hphp_get_class_info);
  return (f_hphp_get_class_info(params.rvalAt(0)));
}
Variant i_mailparse_msg_get_part_data(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_get_part_data);
  return (f_mailparse_msg_get_part_data(params.rvalAt(0)));
}
Variant i_openssl_csr_new(CArrRef params) {
  FUNCTION_INJECTION(openssl_csr_new);
  int count = params.size();
  if (count <= 2) return (f_openssl_csr_new(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  if (count == 3) return (f_openssl_csr_new(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_csr_new(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_xbox_task_start(CArrRef params) {
  FUNCTION_INJECTION(xbox_task_start);
  return (f_xbox_task_start(params.rvalAt(0)));
}
Variant i_getcwd(CArrRef params) {
  FUNCTION_INJECTION(getcwd);
  return (f_getcwd());
}
Variant i_posix_getrlimit(CArrRef params) {
  FUNCTION_INJECTION(posix_getrlimit);
  return (f_posix_getrlimit());
}
Variant i_mb_get_info(CArrRef params) {
  FUNCTION_INJECTION(mb_get_info);
  int count = params.size();
  if (count <= 0) return (f_mb_get_info());
  return (f_mb_get_info(params.rvalAt(0)));
}
Variant i_newpixelwands(CArrRef params) {
  FUNCTION_INJECTION(newpixelwands);
  return (f_newpixelwands(params.rvalAt(0)));
}
Variant i_fputcsv(CArrRef params) {
  FUNCTION_INJECTION(fputcsv);
  int count = params.size();
  if (count <= 2) return (f_fputcsv(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_fputcsv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_fputcsv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_stream_bucket_prepend(CArrRef params) {
  FUNCTION_INJECTION(stream_bucket_prepend);
  return (f_stream_bucket_prepend(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_apache_get_scoreboard(CArrRef params) {
  FUNCTION_INJECTION(apache_get_scoreboard);
  return (f_apache_get_scoreboard());
}
Variant i_sprintf(CArrRef params) {
  FUNCTION_INJECTION(sprintf);
  int count = params.size();
  if (count <= 1) return (f_sprintf(count, params.rvalAt(0)));
  return (f_sprintf(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_ldap_err2str(CArrRef params) {
  FUNCTION_INJECTION(ldap_err2str);
  return (f_ldap_err2str(params.rvalAt(0)));
}
Variant i_xmlwriter_end_attribute(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_attribute);
  return (f_xmlwriter_end_attribute(params.rvalAt(0)));
}
Variant i_imagecharup(CArrRef params) {
  FUNCTION_INJECTION(imagecharup);
  return (f_imagecharup(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_fflush(CArrRef params) {
  FUNCTION_INJECTION(fflush);
  return (f_fflush(params.rvalAt(0)));
}
Variant i_magickwaveimage(CArrRef params) {
  FUNCTION_INJECTION(magickwaveimage);
  return (f_magickwaveimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagepsfreefont(CArrRef params) {
  FUNCTION_INJECTION(imagepsfreefont);
  return (f_imagepsfreefont(params.rvalAt(0)));
}
Variant i_magickgetsamplingfactors(CArrRef params) {
  FUNCTION_INJECTION(magickgetsamplingfactors);
  return (f_magickgetsamplingfactors(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getpathname(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getpathname);
  return (f_hphp_splfileinfo_getpathname(params.rvalAt(0)));
}
Variant i_mt_rand(CArrRef params) {
  FUNCTION_INJECTION(mt_rand);
  int count = params.size();
  if (count <= 0) return (f_mt_rand());
  if (count == 1) return (f_mt_rand(params.rvalAt(0)));
  return (f_mt_rand(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickflopimage(CArrRef params) {
  FUNCTION_INJECTION(magickflopimage);
  return (f_magickflopimage(params.rvalAt(0)));
}
Variant i_getenv(CArrRef params) {
  FUNCTION_INJECTION(getenv);
  return (f_getenv(params.rvalAt(0)));
}
Variant i_register_cleanup_function(CArrRef params) {
  FUNCTION_INJECTION(register_cleanup_function);
  int count = params.size();
  if (count <= 1) return (f_register_cleanup_function(count, params.rvalAt(0)), null);
  return (f_register_cleanup_function(count,params.rvalAt(0), params.slice(1, count - 1, false)), null);
}
Variant i_is_dir(CArrRef params) {
  FUNCTION_INJECTION(is_dir);
  return (f_is_dir(params.rvalAt(0)));
}
Variant i_get_defined_functions(CArrRef params) {
  FUNCTION_INJECTION(get_defined_functions);
  return (f_get_defined_functions());
}
Variant i_stream_set_timeout(CArrRef params) {
  FUNCTION_INJECTION(stream_set_timeout);
  int count = params.size();
  if (count <= 2) return (f_stream_set_timeout(params.rvalAt(0), params.rvalAt(1)));
  return (f_stream_set_timeout(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelsetblack(CArrRef params) {
  FUNCTION_INJECTION(pixelsetblack);
  return (f_pixelsetblack(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickenhanceimage(CArrRef params) {
  FUNCTION_INJECTION(magickenhanceimage);
  return (f_magickenhanceimage(params.rvalAt(0)));
}
Variant i_magickgetcharwidth(CArrRef params) {
  FUNCTION_INJECTION(magickgetcharwidth);
  int count = params.size();
  if (count <= 3) return (f_magickgetcharwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgetcharwidth(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickshearimage(CArrRef params) {
  FUNCTION_INJECTION(magickshearimage);
  return (f_magickshearimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_stream_socket_enable_crypto(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_enable_crypto);
  int count = params.size();
  if (count <= 2) return (f_stream_socket_enable_crypto(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_stream_socket_enable_crypto(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_stream_socket_enable_crypto(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_stream_socket_server(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_server);
  int count = params.size();
  if (count <= 1) return (f_stream_socket_server(params.rvalAt(0)));
  if (count == 2) return (f_stream_socket_server(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  if (count == 3) return (f_stream_socket_server(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
  if (count == 4) return (f_stream_socket_server(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
  return (f_stream_socket_server(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_apd_set_pprof_trace(CArrRef params) {
  FUNCTION_INJECTION(apd_set_pprof_trace);
  int count = params.size();
  if (count <= 0) return (f_apd_set_pprof_trace());
  if (count == 1) return (f_apd_set_pprof_trace(params.rvalAt(0)));
  return (f_apd_set_pprof_trace(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_sort(CArrRef params) {
  FUNCTION_INJECTION(sort);
  int count = params.size();
  if (count <= 1) return (f_sort(ref(const_cast<Array&>(params).lvalAt(0))));
  if (count == 2) return (f_sort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_sort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_oci_num_rows(CArrRef params) {
  FUNCTION_INJECTION(oci_num_rows);
  return (f_oci_num_rows(params.rvalAt(0)));
}
Variant i_ini_set(CArrRef params) {
  FUNCTION_INJECTION(ini_set);
  return (f_ini_set(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawgetfont(CArrRef params) {
  FUNCTION_INJECTION(drawgetfont);
  return (f_drawgetfont(params.rvalAt(0)));
}
Variant i_readdir(CArrRef params) {
  FUNCTION_INJECTION(readdir);
  return (f_readdir(params.rvalAt(0)));
}
Variant i_mysql_close(CArrRef params) {
  FUNCTION_INJECTION(mysql_close);
  int count = params.size();
  if (count <= 0) return (f_mysql_close());
  return (f_mysql_close(params.rvalAt(0)));
}
Variant i_ldap_8859_to_t61(CArrRef params) {
  FUNCTION_INJECTION(ldap_8859_to_t61);
  return (f_ldap_8859_to_t61(params.rvalAt(0)));
}
Variant i_magickblurimage(CArrRef params) {
  FUNCTION_INJECTION(magickblurimage);
  int count = params.size();
  if (count <= 3) return (f_magickblurimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickblurimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickreducenoiseimage(CArrRef params) {
  FUNCTION_INJECTION(magickreducenoiseimage);
  return (f_magickreducenoiseimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicksetimagerenderingintent(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagerenderingintent);
  return (f_magicksetimagerenderingintent(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicktintimage(CArrRef params) {
  FUNCTION_INJECTION(magicktintimage);
  return (f_magicktintimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_oci_fetch_all(CArrRef params) {
  FUNCTION_INJECTION(oci_fetch_all);
  int count = params.size();
  if (count <= 2) return (f_oci_fetch_all(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  if (count == 3) return (f_oci_fetch_all(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  if (count == 4) return (f_oci_fetch_all(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
  return (f_oci_fetch_all(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_rawurldecode(CArrRef params) {
  FUNCTION_INJECTION(rawurldecode);
  return (f_rawurldecode(params.rvalAt(0)));
}
Variant i_xmlwriter_start_element_ns(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_element_ns);
  return (f_xmlwriter_start_element_ns(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_strftime(CArrRef params) {
  FUNCTION_INJECTION(strftime);
  int count = params.size();
  if (count <= 1) return (f_strftime(params.rvalAt(0)));
  return (f_strftime(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagecolorstotal(CArrRef params) {
  FUNCTION_INJECTION(imagecolorstotal);
  return (f_imagecolorstotal(params.rvalAt(0)));
}
Variant i_hphp_splfileinfo_getowner(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getowner);
  return (f_hphp_splfileinfo_getowner(params.rvalAt(0)));
}
Variant i_apc_bin_dumpfile(CArrRef params) {
  FUNCTION_INJECTION(apc_bin_dumpfile);
  int count = params.size();
  if (count <= 3) return (f_apc_bin_dumpfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_apc_bin_dumpfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_apc_bin_dumpfile(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_xml_parse_into_struct(CArrRef params) {
  FUNCTION_INJECTION(xml_parse_into_struct);
  int count = params.size();
  if (count <= 3) return (f_xml_parse_into_struct(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_xml_parse_into_struct(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_icu_transliterate(CArrRef params) {
  FUNCTION_INJECTION(icu_transliterate);
  return (f_icu_transliterate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_eregi_replace(CArrRef params) {
  FUNCTION_INJECTION(mb_eregi_replace);
  int count = params.size();
  if (count <= 3) return (f_mb_eregi_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_eregi_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_hphp_splfileinfo_getatime(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getatime);
  return (f_hphp_splfileinfo_getatime(params.rvalAt(0)));
}
Variant i_array_unshift(CArrRef params) {
  FUNCTION_INJECTION(array_unshift);
  int count = params.size();
  if (count <= 2) return (f_array_unshift(count, ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_array_unshift(count,ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_oci_error(CArrRef params) {
  FUNCTION_INJECTION(oci_error);
  int count = params.size();
  if (count <= 0) return (f_oci_error());
  return (f_oci_error(params.rvalAt(0)));
}
Variant i_stat(CArrRef params) {
  FUNCTION_INJECTION(stat);
  return (f_stat(params.rvalAt(0)));
}
Variant i_hphp_directoryiterator_key(CArrRef params) {
  FUNCTION_INJECTION(hphp_directoryiterator_key);
  return (f_hphp_directoryiterator_key(params.rvalAt(0)));
}
Variant i_posix_getpid(CArrRef params) {
  FUNCTION_INJECTION(posix_getpid);
  return (f_posix_getpid());
}
Variant i_get_current_user(CArrRef params) {
  FUNCTION_INJECTION(get_current_user);
  return (f_get_current_user());
}
Variant i_filesize(CArrRef params) {
  FUNCTION_INJECTION(filesize);
  return (f_filesize(params.rvalAt(0)));
}
Variant i_round(CArrRef params) {
  FUNCTION_INJECTION(round);
  int count = params.size();
  if (count <= 1) return (f_round(params.rvalAt(0)));
  return (f_round(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_sqrt(CArrRef params) {
  FUNCTION_INJECTION(sqrt);
  return (f_sqrt(params.rvalAt(0)));
}
Variant i_ldap_close(CArrRef params) {
  FUNCTION_INJECTION(ldap_close);
  return (f_ldap_close(params.rvalAt(0)));
}
Variant i_mcrypt_enc_get_algorithms_name(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_get_algorithms_name);
  return (f_mcrypt_enc_get_algorithms_name(params.rvalAt(0)));
}
Variant i_hphp_splfileobject_rewind(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_rewind);
  return (f_hphp_splfileobject_rewind(params.rvalAt(0)), null);
}
Variant i_extension_loaded(CArrRef params) {
  FUNCTION_INJECTION(extension_loaded);
  return (f_extension_loaded(params.rvalAt(0)));
}
Variant i_fprintf(CArrRef params) {
  FUNCTION_INJECTION(fprintf);
  int count = params.size();
  if (count <= 2) return (f_fprintf(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_fprintf(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_mb_detect_order(CArrRef params) {
  FUNCTION_INJECTION(mb_detect_order);
  int count = params.size();
  if (count <= 0) return (f_mb_detect_order());
  return (f_mb_detect_order(params.rvalAt(0)));
}
Variant i_get_magic_quotes_runtime(CArrRef params) {
  FUNCTION_INJECTION(get_magic_quotes_runtime);
  return (f_get_magic_quotes_runtime());
}
Variant i_magickmapimage(CArrRef params) {
  FUNCTION_INJECTION(magickmapimage);
  return (f_magickmapimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_pixelsetopacityquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetopacityquantum);
  return (f_pixelsetopacityquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_ctype_space(CArrRef params) {
  FUNCTION_INJECTION(ctype_space);
  return (f_ctype_space(params.rvalAt(0)));
}
Variant i_mcrypt_generic_init(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_generic_init);
  return (f_mcrypt_generic_init(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_quoted_printable_decode(CArrRef params) {
  FUNCTION_INJECTION(quoted_printable_decode);
  return (f_quoted_printable_decode(params.rvalAt(0)));
}
Variant i_destroymagickwand(CArrRef params) {
  FUNCTION_INJECTION(destroymagickwand);
  return (f_destroymagickwand(params.rvalAt(0)), null);
}
Variant i_hphp_splfileinfo_getfileinfo(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getfileinfo);
  return (f_hphp_splfileinfo_getfileinfo(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagerectangle(CArrRef params) {
  FUNCTION_INJECTION(imagerectangle);
  return (f_imagerectangle(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_get_cfg_var(CArrRef params) {
  FUNCTION_INJECTION(get_cfg_var);
  return (f_get_cfg_var(params.rvalAt(0)));
}
Variant i_pixelgetalphaquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelgetalphaquantum);
  return (f_pixelgetalphaquantum(params.rvalAt(0)));
}
Variant i_magickgetimageblob(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageblob);
  return (f_magickgetimageblob(params.rvalAt(0)));
}
Variant i_imagepsextendfont(CArrRef params) {
  FUNCTION_INJECTION(imagepsextendfont);
  return (f_imagepsextendfont(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_stream_get_filters(CArrRef params) {
  FUNCTION_INJECTION(stream_get_filters);
  return (f_stream_get_filters());
}
Variant i_magickqueryfontmetrics(CArrRef params) {
  FUNCTION_INJECTION(magickqueryfontmetrics);
  int count = params.size();
  if (count <= 3) return (f_magickqueryfontmetrics(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickqueryfontmetrics(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_ispixeliterator(CArrRef params) {
  FUNCTION_INJECTION(ispixeliterator);
  return (f_ispixeliterator(params.rvalAt(0)));
}
Variant i_getdate(CArrRef params) {
  FUNCTION_INJECTION(getdate);
  int count = params.size();
  if (count <= 0) return (f_getdate());
  return (f_getdate(params.rvalAt(0)));
}
Variant i_imagefilledarc(CArrRef params) {
  FUNCTION_INJECTION(imagefilledarc);
  return (f_imagefilledarc(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8)));
}
Variant i_oci_server_version(CArrRef params) {
  FUNCTION_INJECTION(oci_server_version);
  return (f_oci_server_version(params.rvalAt(0)));
}
Variant i_xmlwriter_write_attribute(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_attribute);
  return (f_xmlwriter_write_attribute(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagearc(CArrRef params) {
  FUNCTION_INJECTION(imagearc);
  return (f_imagearc(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_drawgetgravity(CArrRef params) {
  FUNCTION_INJECTION(drawgetgravity);
  return (f_drawgetgravity(params.rvalAt(0)));
}
Variant i_magickreadimages(CArrRef params) {
  FUNCTION_INJECTION(magickreadimages);
  return (f_magickreadimages(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagecreatefromgd2(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromgd2);
  return (f_imagecreatefromgd2(params.rvalAt(0)));
}
Variant i_stream_socket_shutdown(CArrRef params) {
  FUNCTION_INJECTION(stream_socket_shutdown);
  return (f_stream_socket_shutdown(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_connection_status(CArrRef params) {
  FUNCTION_INJECTION(connection_status);
  return (f_connection_status());
}
Variant i_pixelresetiterator(CArrRef params) {
  FUNCTION_INJECTION(pixelresetiterator);
  return (f_pixelresetiterator(params.rvalAt(0)), null);
}
Variant i_msg_send(CArrRef params) {
  FUNCTION_INJECTION(msg_send);
  int count = params.size();
  if (count <= 3) return (f_msg_send(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_msg_send(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_msg_send(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_msg_send(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), ref(const_cast<Array&>(params).lvalAt(5))));
}
Variant i_getmygid(CArrRef params) {
  FUNCTION_INJECTION(getmygid);
  return (f_getmygid());
}
Variant i_array_udiff_uassoc(CArrRef params) {
  FUNCTION_INJECTION(array_udiff_uassoc);
  int count = params.size();
  if (count <= 4) return (f_array_udiff_uassoc(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_array_udiff_uassoc(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.slice(4, count - 4, false)));
}
Variant i_xml_set_character_data_handler(CArrRef params) {
  FUNCTION_INJECTION(xml_set_character_data_handler);
  return (f_xml_set_character_data_handler(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_array_diff_uassoc(CArrRef params) {
  FUNCTION_INJECTION(array_diff_uassoc);
  int count = params.size();
  if (count <= 3) return (f_array_diff_uassoc(count, params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_array_diff_uassoc(count,params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.slice(3, count - 3, false)));
}
Variant i_strptime(CArrRef params) {
  FUNCTION_INJECTION(strptime);
  return (f_strptime(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pcntl_waitpid(CArrRef params) {
  FUNCTION_INJECTION(pcntl_waitpid);
  int count = params.size();
  if (count <= 2) return (f_pcntl_waitpid(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_pcntl_waitpid(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
}
Variant i_gd_info(CArrRef params) {
  FUNCTION_INJECTION(gd_info);
  return (f_gd_info());
}
Variant i_stream_get_transports(CArrRef params) {
  FUNCTION_INJECTION(stream_get_transports);
  return (f_stream_get_transports());
}
Variant i_drawsetstrokepatternurl(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokepatternurl);
  return (f_drawsetstrokepatternurl(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsetfillrule(CArrRef params) {
  FUNCTION_INJECTION(drawsetfillrule);
  return (f_drawsetfillrule(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_acosh(CArrRef params) {
  FUNCTION_INJECTION(acosh);
  return (f_acosh(params.rvalAt(0)));
}
Variant i_ldap_add(CArrRef params) {
  FUNCTION_INJECTION(ldap_add);
  return (f_ldap_add(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_posix_getsid(CArrRef params) {
  FUNCTION_INJECTION(posix_getsid);
  return (f_posix_getsid(params.rvalAt(0)));
}
Variant i_posix_getlogin(CArrRef params) {
  FUNCTION_INJECTION(posix_getlogin);
  return (f_posix_getlogin());
}
Variant i_socket_create_pair(CArrRef params) {
  FUNCTION_INJECTION(socket_create_pair);
  return (f_socket_create_pair(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_imagecreate(CArrRef params) {
  FUNCTION_INJECTION(imagecreate);
  return (f_imagecreate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagegd2(CArrRef params) {
  FUNCTION_INJECTION(imagegd2);
  int count = params.size();
  if (count <= 1) return (f_imagegd2(params.rvalAt(0)));
  if (count == 2) return (f_imagegd2(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_imagegd2(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_imagegd2(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_openssl_x509_check_private_key(CArrRef params) {
  FUNCTION_INJECTION(openssl_x509_check_private_key);
  return (f_openssl_x509_check_private_key(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_oci_num_fields(CArrRef params) {
  FUNCTION_INJECTION(oci_num_fields);
  return (f_oci_num_fields(params.rvalAt(0)));
}
Variant i_shm_put_var(CArrRef params) {
  FUNCTION_INJECTION(shm_put_var);
  return (f_shm_put_var(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_debug_print_backtrace(CArrRef params) {
  FUNCTION_INJECTION(debug_print_backtrace);
  return (f_debug_print_backtrace(), null);
}
Variant i_hphp_splfileobject_seek(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_seek);
  return (f_hphp_splfileobject_seek(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_stream_set_blocking(CArrRef params) {
  FUNCTION_INJECTION(stream_set_blocking);
  return (f_stream_set_blocking(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xml_parser_get_option(CArrRef params) {
  FUNCTION_INJECTION(xml_parser_get_option);
  return (f_xml_parser_get_option(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ezmlm_hash(CArrRef params) {
  FUNCTION_INJECTION(ezmlm_hash);
  return (f_ezmlm_hash(params.rvalAt(0)));
}
Variant i_array_search(CArrRef params) {
  FUNCTION_INJECTION(array_search);
  int count = params.size();
  if (count <= 2) return (f_array_search(params.rvalAt(0), params.rvalAt(1)));
  return (f_array_search(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_int(CArrRef params) {
  FUNCTION_INJECTION(is_int);
  return (f_is_int(params.rvalAt(0)));
}
Variant i_dangling_server_proxy_new_request(CArrRef params) {
  FUNCTION_INJECTION(dangling_server_proxy_new_request);
  return (f_dangling_server_proxy_new_request(params.rvalAt(0)));
}
Variant i_xmlwriter_end_dtd_entity(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_dtd_entity);
  return (f_xmlwriter_end_dtd_entity(params.rvalAt(0)));
}
Variant i_trim(CArrRef params) {
  FUNCTION_INJECTION(trim);
  int count = params.size();
  if (count <= 1) return (f_trim(params.rvalAt(0)));
  return (f_trim(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpathclose(CArrRef params) {
  FUNCTION_INJECTION(drawpathclose);
  return (f_drawpathclose(params.rvalAt(0)), null);
}
Variant i_magickprofileimage(CArrRef params) {
  FUNCTION_INJECTION(magickprofileimage);
  int count = params.size();
  if (count <= 2) return (f_magickprofileimage(params.rvalAt(0), params.rvalAt(1)));
  return (f_magickprofileimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_connection_timeout(CArrRef params) {
  FUNCTION_INJECTION(connection_timeout);
  return (f_connection_timeout());
}
Variant i_mysql_data_seek(CArrRef params) {
  FUNCTION_INJECTION(mysql_data_seek);
  return (f_mysql_data_seek(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelgetindex(CArrRef params) {
  FUNCTION_INJECTION(pixelgetindex);
  return (f_pixelgetindex(params.rvalAt(0)));
}
Variant i_hebrevc(CArrRef params) {
  FUNCTION_INJECTION(hebrevc);
  int count = params.size();
  if (count <= 1) return (f_hebrevc(params.rvalAt(0)));
  return (f_hebrevc(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_get_meta_tags(CArrRef params) {
  FUNCTION_INJECTION(get_meta_tags);
  int count = params.size();
  if (count <= 1) return (f_get_meta_tags(params.rvalAt(0)));
  return (f_get_meta_tags(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicknextimage(CArrRef params) {
  FUNCTION_INJECTION(magicknextimage);
  return (f_magicknextimage(params.rvalAt(0)));
}
Variant i_hphp_recursivedirectoryiterator_key(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_key);
  return (f_hphp_recursivedirectoryiterator_key(params.rvalAt(0)));
}
Variant i_mysql_create_db(CArrRef params) {
  FUNCTION_INJECTION(mysql_create_db);
  int count = params.size();
  if (count <= 1) return (f_mysql_create_db(params.rvalAt(0)));
  return (f_mysql_create_db(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_stat(CArrRef params) {
  FUNCTION_INJECTION(mysql_stat);
  int count = params.size();
  if (count <= 0) return (f_mysql_stat());
  return (f_mysql_stat(params.rvalAt(0)));
}
Variant i_get_object_vars(CArrRef params) {
  FUNCTION_INJECTION(get_object_vars);
  return (f_get_object_vars(params.rvalAt(0)));
}
Variant i_msg_receive(CArrRef params) {
  FUNCTION_INJECTION(msg_receive);
  int count = params.size();
  if (count <= 5) return (f_msg_receive(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4))));
  if (count == 6) return (f_msg_receive(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4)), params.rvalAt(5)));
  if (count == 7) return (f_msg_receive(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4)), params.rvalAt(5), params.rvalAt(6)));
  return (f_msg_receive(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4)), params.rvalAt(5), params.rvalAt(6), ref(const_cast<Array&>(params).lvalAt(7))));
}
Variant i_is_integer(CArrRef params) {
  FUNCTION_INJECTION(is_integer);
  return (f_is_integer(params.rvalAt(0)));
}
Variant i_oci_set_prefetch(CArrRef params) {
  FUNCTION_INJECTION(oci_set_prefetch);
  return (f_oci_set_prefetch(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_getuid(CArrRef params) {
  FUNCTION_INJECTION(posix_getuid);
  return (f_posix_getuid());
}
Variant i_imagecreatefromgif(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromgif);
  return (f_imagecreatefromgif(params.rvalAt(0)));
}
Variant i_mb_send_mail(CArrRef params) {
  FUNCTION_INJECTION(mb_send_mail);
  int count = params.size();
  if (count <= 3) return (f_mb_send_mail(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mb_send_mail(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mb_send_mail(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_hphp_splfileinfo___construct(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo___construct);
  return (f_hphp_splfileinfo___construct(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_register_postsend_function(CArrRef params) {
  FUNCTION_INJECTION(register_postsend_function);
  int count = params.size();
  if (count <= 1) return (f_register_postsend_function(count, params.rvalAt(0)), null);
  return (f_register_postsend_function(count,params.rvalAt(0), params.slice(1, count - 1, false)), null);
}
Variant i_getrusage(CArrRef params) {
  FUNCTION_INJECTION(getrusage);
  int count = params.size();
  if (count <= 0) return (f_getrusage());
  return (f_getrusage(params.rvalAt(0)));
}
Variant i_long2ip(CArrRef params) {
  FUNCTION_INJECTION(long2ip);
  return (f_long2ip(params.rvalAt(0)));
}
Variant i_evhttp_set_cache(CArrRef params) {
  FUNCTION_INJECTION(evhttp_set_cache);
  int count = params.size();
  if (count <= 2) return (f_evhttp_set_cache(params.rvalAt(0), params.rvalAt(1)), null);
  return (f_evhttp_set_cache(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_magickoilpaintimage(CArrRef params) {
  FUNCTION_INJECTION(magickoilpaintimage);
  return (f_magickoilpaintimage(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_strripos(CArrRef params) {
  FUNCTION_INJECTION(strripos);
  int count = params.size();
  if (count <= 2) return (f_strripos(params.rvalAt(0), params.rvalAt(1)));
  return (f_strripos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magicksetimagecolormapcolor(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagecolormapcolor);
  return (f_magicksetimagecolormapcolor(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetfilename(CArrRef params) {
  FUNCTION_INJECTION(magickgetfilename);
  return (f_magickgetfilename(params.rvalAt(0)));
}
Variant i_magicksetimagegamma(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagegamma);
  return (f_magicksetimagegamma(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_pconnect(CArrRef params) {
  FUNCTION_INJECTION(mysql_pconnect);
  int count = params.size();
  if (count <= 0) return (f_mysql_pconnect());
  if (count == 1) return (f_mysql_pconnect(params.rvalAt(0)));
  if (count == 2) return (f_mysql_pconnect(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mysql_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mysql_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_mysql_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_mysql_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_stripos(CArrRef params) {
  FUNCTION_INJECTION(stripos);
  int count = params.size();
  if (count <= 2) return (f_stripos(params.rvalAt(0), params.rvalAt(1)));
  return (f_stripos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_http_build_query(CArrRef params) {
  FUNCTION_INJECTION(http_build_query);
  int count = params.size();
  if (count <= 1) return (f_http_build_query(params.rvalAt(0)));
  if (count == 2) return (f_http_build_query(params.rvalAt(0), params.rvalAt(1)));
  return (f_http_build_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_apc_add(CArrRef params) {
  FUNCTION_INJECTION(apc_add);
  int count = params.size();
  if (count <= 2) return (f_apc_add(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_apc_add(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_apc_add(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_iconv_strlen(CArrRef params) {
  FUNCTION_INJECTION(iconv_strlen);
  int count = params.size();
  if (count <= 1) return (f_iconv_strlen(params.rvalAt(0)));
  return (f_iconv_strlen(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_vsprintf(CArrRef params) {
  FUNCTION_INJECTION(vsprintf);
  return (f_vsprintf(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imageistruecolor(CArrRef params) {
  FUNCTION_INJECTION(imageistruecolor);
  return (f_imageistruecolor(params.rvalAt(0)));
}
Variant i_mailparse_msg_extract_part_file(CArrRef params) {
  FUNCTION_INJECTION(mailparse_msg_extract_part_file);
  int count = params.size();
  if (count <= 2) return (f_mailparse_msg_extract_part_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_mailparse_msg_extract_part_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_is_nan(CArrRef params) {
  FUNCTION_INJECTION(is_nan);
  return (f_is_nan(params.rvalAt(0)));
}
Variant i_imagegif(CArrRef params) {
  FUNCTION_INJECTION(imagegif);
  int count = params.size();
  if (count <= 1) return (f_imagegif(params.rvalAt(0)));
  return (f_imagegif(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_eregi_replace(CArrRef params) {
  FUNCTION_INJECTION(eregi_replace);
  return (f_eregi_replace(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetimageiterations(CArrRef params) {
  FUNCTION_INJECTION(magickgetimageiterations);
  return (f_magickgetimageiterations(params.rvalAt(0)));
}
Variant i_register_tick_function(CArrRef params) {
  FUNCTION_INJECTION(register_tick_function);
  int count = params.size();
  if (count <= 1) return (f_register_tick_function(count, params.rvalAt(0)));
  return (f_register_tick_function(count,params.rvalAt(0), params.slice(1, count - 1, false)));
}
Variant i_pixelsetblackquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetblackquantum);
  return (f_pixelsetblackquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_jpeg2wbmp(CArrRef params) {
  FUNCTION_INJECTION(jpeg2wbmp);
  return (f_jpeg2wbmp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_mcrypt_get_iv_size(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_get_iv_size);
  return (f_mcrypt_get_iv_size(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_fetch_array(CArrRef params) {
  FUNCTION_INJECTION(mysql_fetch_array);
  int count = params.size();
  if (count <= 1) return (f_mysql_fetch_array(params.rvalAt(0)));
  return (f_mysql_fetch_array(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickpreviousimage(CArrRef params) {
  FUNCTION_INJECTION(magickpreviousimage);
  return (f_magickpreviousimage(params.rvalAt(0)));
}
Variant i_magickborderimage(CArrRef params) {
  FUNCTION_INJECTION(magickborderimage);
  return (f_magickborderimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_mcrypt_module_is_block_mode(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_is_block_mode);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_is_block_mode(params.rvalAt(0)));
  return (f_mcrypt_module_is_block_mode(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mb_substr(CArrRef params) {
  FUNCTION_INJECTION(mb_substr);
  int count = params.size();
  if (count <= 2) return (f_mb_substr(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_substr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_mb_substr(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_get_defined_constants(CArrRef params) {
  FUNCTION_INJECTION(get_defined_constants);
  int count = params.size();
  if (count <= 0) return (f_get_defined_constants());
  return (f_get_defined_constants(params.rvalAt(0)));
}
Variant i_mcrypt_enc_is_block_mode(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_enc_is_block_mode);
  return (f_mcrypt_enc_is_block_mode(params.rvalAt(0)));
}
Variant i_mailparse_stream_encode(CArrRef params) {
  FUNCTION_INJECTION(mailparse_stream_encode);
  return (f_mailparse_stream_encode(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawsetstrokedashoffset(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokedashoffset);
  return (f_drawsetstrokedashoffset(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_php_ini_scanned_files(CArrRef params) {
  FUNCTION_INJECTION(php_ini_scanned_files);
  return (f_php_ini_scanned_files());
}
Variant i_disk_free_space(CArrRef params) {
  FUNCTION_INJECTION(disk_free_space);
  return (f_disk_free_space(params.rvalAt(0)));
}
Variant i_pixelsetyellowquantum(CArrRef params) {
  FUNCTION_INJECTION(pixelsetyellowquantum);
  return (f_pixelsetyellowquantum(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_openssl_public_decrypt(CArrRef params) {
  FUNCTION_INJECTION(openssl_public_decrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_public_decrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_public_decrypt(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_convert_uuencode(CArrRef params) {
  FUNCTION_INJECTION(convert_uuencode);
  return (f_convert_uuencode(params.rvalAt(0)));
}
Variant i_magickequalizeimage(CArrRef params) {
  FUNCTION_INJECTION(magickequalizeimage);
  return (f_magickequalizeimage(params.rvalAt(0)));
}
Variant i_mysql_field_len(CArrRef params) {
  FUNCTION_INJECTION(mysql_field_len);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_len(params.rvalAt(0)));
  return (f_mysql_field_len(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsetclipunits(CArrRef params) {
  FUNCTION_INJECTION(drawsetclipunits);
  return (f_drawsetclipunits(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_mdecrypt_generic(CArrRef params) {
  FUNCTION_INJECTION(mdecrypt_generic);
  return (f_mdecrypt_generic(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_getprotobyname(CArrRef params) {
  FUNCTION_INJECTION(getprotobyname);
  return (f_getprotobyname(params.rvalAt(0)));
}
Variant i_xmlwriter_start_pi(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_pi);
  return (f_xmlwriter_start_pi(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_field_type(CArrRef params) {
  FUNCTION_INJECTION(mysql_field_type);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_type(params.rvalAt(0)));
  return (f_mysql_field_type(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_apc_cas(CArrRef params) {
  FUNCTION_INJECTION(apc_cas);
  int count = params.size();
  if (count <= 3) return (f_apc_cas(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_apc_cas(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_getopt(CArrRef params) {
  FUNCTION_INJECTION(getopt);
  int count = params.size();
  if (count <= 1) return (f_getopt(params.rvalAt(0)));
  return (f_getopt(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_clearpixelwand(CArrRef params) {
  FUNCTION_INJECTION(clearpixelwand);
  return (f_clearpixelwand(params.rvalAt(0)), null);
}
Variant i_drawsetgravity(CArrRef params) {
  FUNCTION_INJECTION(drawsetgravity);
  return (f_drawsetgravity(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickgetimagecompressionquality(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagecompressionquality);
  return (f_magickgetimagecompressionquality(params.rvalAt(0)));
}
Variant i_magickquantizeimages(CArrRef params) {
  FUNCTION_INJECTION(magickquantizeimages);
  return (f_magickquantizeimages(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_mysql_insert_id(CArrRef params) {
  FUNCTION_INJECTION(mysql_insert_id);
  int count = params.size();
  if (count <= 0) return (f_mysql_insert_id());
  return (f_mysql_insert_id(params.rvalAt(0)));
}
Variant i_hphp_thread_set_warmup_enabled(CArrRef params) {
  FUNCTION_INJECTION(hphp_thread_set_warmup_enabled);
  return (f_hphp_thread_set_warmup_enabled(), null);
}
Variant i_stream_context_set_param(CArrRef params) {
  FUNCTION_INJECTION(stream_context_set_param);
  return (f_stream_context_set_param(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpathlinetohorizontalabsolute(CArrRef params) {
  FUNCTION_INJECTION(drawpathlinetohorizontalabsolute);
  return (f_drawpathlinetohorizontalabsolute(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_openssl_csr_export(CArrRef params) {
  FUNCTION_INJECTION(openssl_csr_export);
  int count = params.size();
  if (count <= 2) return (f_openssl_csr_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_openssl_csr_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
}
Variant i_socket_connect(CArrRef params) {
  FUNCTION_INJECTION(socket_connect);
  int count = params.size();
  if (count <= 2) return (f_socket_connect(params.rvalAt(0), params.rvalAt(1)));
  return (f_socket_connect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_stripslashes(CArrRef params) {
  FUNCTION_INJECTION(stripslashes);
  return (f_stripslashes(params.rvalAt(0)));
}
Variant i_magickhaspreviousimage(CArrRef params) {
  FUNCTION_INJECTION(magickhaspreviousimage);
  return (f_magickhaspreviousimage(params.rvalAt(0)));
}
Variant i_drawgetstrokecolor(CArrRef params) {
  FUNCTION_INJECTION(drawgetstrokecolor);
  return (f_drawgetstrokecolor(params.rvalAt(0)));
}
Variant i_imagecreatefromwbmp(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromwbmp);
  return (f_imagecreatefromwbmp(params.rvalAt(0)));
}
Variant i_str_repeat(CArrRef params) {
  FUNCTION_INJECTION(str_repeat);
  return (f_str_repeat(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_stream_resolve_include_path(CArrRef params) {
  FUNCTION_INJECTION(stream_resolve_include_path);
  int count = params.size();
  if (count <= 1) return (f_stream_resolve_include_path(params.rvalAt(0)));
  return (f_stream_resolve_include_path(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_read(CArrRef params) {
  FUNCTION_INJECTION(ldap_read);
  int count = params.size();
  if (count <= 3) return (f_ldap_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_ldap_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_ldap_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  if (count == 6) return (f_ldap_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
  if (count == 7) return (f_ldap_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6)));
  return (f_ldap_read(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
}
Variant i_apc_dec(CArrRef params) {
  FUNCTION_INJECTION(apc_dec);
  int count = params.size();
  if (count <= 1) return (f_apc_dec(params.rvalAt(0)));
  if (count == 2) return (f_apc_dec(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_apc_dec(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_apc_dec(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
}
Variant i_posix_get_last_error(CArrRef params) {
  FUNCTION_INJECTION(posix_get_last_error);
  return (f_posix_get_last_error());
}
Variant i_iptcparse(CArrRef params) {
  FUNCTION_INJECTION(iptcparse);
  return (f_iptcparse(params.rvalAt(0)));
}
Variant i_socket_recvfrom(CArrRef params) {
  FUNCTION_INJECTION(socket_recvfrom);
  int count = params.size();
  if (count <= 5) return (f_socket_recvfrom(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4))));
  return (f_socket_recvfrom(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3), ref(const_cast<Array&>(params).lvalAt(4)), ref(const_cast<Array&>(params).lvalAt(5))));
}
Variant i_curl_setopt_array(CArrRef params) {
  FUNCTION_INJECTION(curl_setopt_array);
  return (f_curl_setopt_array(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagepstext(CArrRef params) {
  FUNCTION_INJECTION(imagepstext);
  int count = params.size();
  if (count <= 8) return (f_imagepstext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
  if (count == 9) return (f_imagepstext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8)));
  if (count == 10) return (f_imagepstext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8), params.rvalAt(9)));
  if (count == 11) return (f_imagepstext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8), params.rvalAt(9), params.rvalAt(10)));
  return (f_imagepstext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8), params.rvalAt(9), params.rvalAt(10), params.rvalAt(11)));
}
Variant i_mb_encode_mimeheader(CArrRef params) {
  FUNCTION_INJECTION(mb_encode_mimeheader);
  int count = params.size();
  if (count <= 1) return (f_mb_encode_mimeheader(params.rvalAt(0)));
  if (count == 2) return (f_mb_encode_mimeheader(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_mb_encode_mimeheader(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_mb_encode_mimeheader(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_mb_encode_mimeheader(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_socket_getsockname(CArrRef params) {
  FUNCTION_INJECTION(socket_getsockname);
  int count = params.size();
  if (count <= 2) return (f_socket_getsockname(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_socket_getsockname(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_imagecreatefromstring(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromstring);
  return (f_imagecreatefromstring(params.rvalAt(0)));
}
Variant i_vfprintf(CArrRef params) {
  FUNCTION_INJECTION(vfprintf);
  return (f_vfprintf(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickcompareimages(CArrRef params) {
  FUNCTION_INJECTION(magickcompareimages);
  int count = params.size();
  if (count <= 3) return (f_magickcompareimages(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickcompareimages(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_fscanf(CArrRef params) {
  FUNCTION_INJECTION(fscanf);
  int count = params.size();
  if (count <= 2) return (f_fscanf(count, params.rvalAt(0), params.rvalAt(1)));
  return (f_fscanf(count,params.rvalAt(0), params.rvalAt(1), params.slice(2, count - 2, false)));
}
Variant i_stristr(CArrRef params) {
  FUNCTION_INJECTION(stristr);
  return (f_stristr(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xml_parser_set_option(CArrRef params) {
  FUNCTION_INJECTION(xml_parser_set_option);
  return (f_xml_parser_set_option(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magicksetimageinterlacescheme(CArrRef params) {
  FUNCTION_INJECTION(magicksetimageinterlacescheme);
  return (f_magicksetimageinterlacescheme(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_destroypixeliterator(CArrRef params) {
  FUNCTION_INJECTION(destroypixeliterator);
  return (f_destroypixeliterator(params.rvalAt(0)), null);
}
Variant i_magicksetimagetype(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagetype);
  return (f_magicksetimagetype(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursiveiteratoriterator_getinneriterator(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_getinneriterator);
  return (f_hphp_recursiveiteratoriterator_getinneriterator(params.rvalAt(0)));
}
Variant i_date_sunrise(CArrRef params) {
  FUNCTION_INJECTION(date_sunrise);
  int count = params.size();
  if (count <= 1) return (f_date_sunrise(params.rvalAt(0)));
  if (count == 2) return (f_date_sunrise(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_date_sunrise(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_date_sunrise(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_date_sunrise(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_date_sunrise(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_magickgethomeurl(CArrRef params) {
  FUNCTION_INJECTION(magickgethomeurl);
  return (f_magickgethomeurl());
}
Variant i_mb_detect_encoding(CArrRef params) {
  FUNCTION_INJECTION(mb_detect_encoding);
  int count = params.size();
  if (count <= 1) return (f_mb_detect_encoding(params.rvalAt(0)));
  if (count == 2) return (f_mb_detect_encoding(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_detect_encoding(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_wandhasexception(CArrRef params) {
  FUNCTION_INJECTION(wandhasexception);
  return (f_wandhasexception(params.rvalAt(0)));
}
Variant i_error_reporting(CArrRef params) {
  FUNCTION_INJECTION(error_reporting);
  int count = params.size();
  if (count <= 0) return (f_error_reporting());
  return (f_error_reporting(params.rvalAt(0)));
}
Variant i_imagepalettecopy(CArrRef params) {
  FUNCTION_INJECTION(imagepalettecopy);
  return (f_imagepalettecopy(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_hphp_splfileinfo_isexecutable(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_isexecutable);
  return (f_hphp_splfileinfo_isexecutable(params.rvalAt(0)));
}
Variant i_rename_function(CArrRef params) {
  FUNCTION_INJECTION(rename_function);
  return (f_rename_function(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_gzcompress(CArrRef params) {
  FUNCTION_INJECTION(gzcompress);
  int count = params.size();
  if (count <= 1) return (f_gzcompress(params.rvalAt(0)));
  return (f_gzcompress(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_gzeof(CArrRef params) {
  FUNCTION_INJECTION(gzeof);
  return (f_gzeof(params.rvalAt(0)));
}
Variant i_bcadd(CArrRef params) {
  FUNCTION_INJECTION(bcadd);
  int count = params.size();
  if (count <= 2) return (f_bcadd(params.rvalAt(0), params.rvalAt(1)));
  return (f_bcadd(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_curl_setopt(CArrRef params) {
  FUNCTION_INJECTION(curl_setopt);
  return (f_curl_setopt(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagealphablending(CArrRef params) {
  FUNCTION_INJECTION(imagealphablending);
  return (f_imagealphablending(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelgetmagenta(CArrRef params) {
  FUNCTION_INJECTION(pixelgetmagenta);
  return (f_pixelgetmagenta(params.rvalAt(0)));
}
Variant i_drawannotation(CArrRef params) {
  FUNCTION_INJECTION(drawannotation);
  return (f_drawannotation(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_getmypid(CArrRef params) {
  FUNCTION_INJECTION(getmypid);
  return (f_getmypid());
}
Variant i_magicksetimagedispose(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagedispose);
  return (f_magicksetimagedispose(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawsetfontsize(CArrRef params) {
  FUNCTION_INJECTION(drawsetfontsize);
  return (f_drawsetfontsize(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_gethostbyname(CArrRef params) {
  FUNCTION_INJECTION(gethostbyname);
  return (f_gethostbyname(params.rvalAt(0)));
}
Variant i_stream_wrapper_restore(CArrRef params) {
  FUNCTION_INJECTION(stream_wrapper_restore);
  return (f_stream_wrapper_restore(params.rvalAt(0)));
}
Variant i_magickgetimagecompression(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagecompression);
  return (f_magickgetimagecompression(params.rvalAt(0)));
}
Variant i_hphp_invoke_method(CArrRef params) {
  FUNCTION_INJECTION(hphp_invoke_method);
  return (f_hphp_invoke_method(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_date_offset_get(CArrRef params) {
  FUNCTION_INJECTION(date_offset_get);
  return (f_date_offset_get(params.rvalAt(0)));
}
Variant i_pixelgetiteratorexception(CArrRef params) {
  FUNCTION_INJECTION(pixelgetiteratorexception);
  return (f_pixelgetiteratorexception(params.rvalAt(0)));
}
Variant i_mysql_field_flags(CArrRef params) {
  FUNCTION_INJECTION(mysql_field_flags);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_flags(params.rvalAt(0)));
  return (f_mysql_field_flags(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_linkinfo(CArrRef params) {
  FUNCTION_INJECTION(linkinfo);
  return (f_linkinfo(params.rvalAt(0)));
}
Variant i_strchr(CArrRef params) {
  FUNCTION_INJECTION(strchr);
  return (f_strchr(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickqueryformats(CArrRef params) {
  FUNCTION_INJECTION(magickqueryformats);
  return (f_magickqueryformats(params.rvalAt(0)));
}
Variant i_date_time_set(CArrRef params) {
  FUNCTION_INJECTION(date_time_set);
  int count = params.size();
  if (count <= 3) return (f_date_time_set(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
  return (f_date_time_set(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)), null);
}
Variant i_iconv_strpos(CArrRef params) {
  FUNCTION_INJECTION(iconv_strpos);
  int count = params.size();
  if (count <= 2) return (f_iconv_strpos(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_iconv_strpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_iconv_strpos(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_i18n_loc_set_strength(CArrRef params) {
  FUNCTION_INJECTION(i18n_loc_set_strength);
  return (f_i18n_loc_set_strength(params.rvalAt(0)));
}
Variant i_magickgetimagebordercolor(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagebordercolor);
  return (f_magickgetimagebordercolor(params.rvalAt(0)));
}
Variant i_ob_end_clean(CArrRef params) {
  FUNCTION_INJECTION(ob_end_clean);
  return (f_ob_end_clean());
}
Variant i_trigger_error(CArrRef params) {
  FUNCTION_INJECTION(trigger_error);
  int count = params.size();
  if (count <= 1) return (f_trigger_error(params.rvalAt(0)));
  return (f_trigger_error(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pcntl_getpriority(CArrRef params) {
  FUNCTION_INJECTION(pcntl_getpriority);
  int count = params.size();
  if (count <= 0) return (f_pcntl_getpriority());
  if (count == 1) return (f_pcntl_getpriority(params.rvalAt(0)));
  return (f_pcntl_getpriority(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_date_default_timezone_get(CArrRef params) {
  FUNCTION_INJECTION(date_default_timezone_get);
  return (f_date_default_timezone_get());
}
Variant i_strcmp(CArrRef params) {
  FUNCTION_INJECTION(strcmp);
  return (f_strcmp(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursivedirectoryiterator_haschildren(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_haschildren);
  return (f_hphp_recursivedirectoryiterator_haschildren(params.rvalAt(0)));
}
Variant i_hphp_instanceof(CArrRef params) {
  FUNCTION_INJECTION(hphp_instanceof);
  return (f_hphp_instanceof(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_import_request_variables(CArrRef params) {
  FUNCTION_INJECTION(import_request_variables);
  int count = params.size();
  if (count <= 1) return (f_import_request_variables(params.rvalAt(0)));
  return (f_import_request_variables(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetpackagename(CArrRef params) {
  FUNCTION_INJECTION(magickgetpackagename);
  return (f_magickgetpackagename());
}
Variant i_destroypixelwandarray(CArrRef params) {
  FUNCTION_INJECTION(destroypixelwandarray);
  return (f_destroypixelwandarray(params.rvalAt(0)), null);
}
Variant i_spliti(CArrRef params) {
  FUNCTION_INJECTION(spliti);
  int count = params.size();
  if (count <= 2) return (f_spliti(params.rvalAt(0), params.rvalAt(1)));
  return (f_spliti(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_posix_setgid(CArrRef params) {
  FUNCTION_INJECTION(posix_setgid);
  return (f_posix_setgid(params.rvalAt(0)));
}
Variant i_is_double(CArrRef params) {
  FUNCTION_INJECTION(is_double);
  return (f_is_double(params.rvalAt(0)));
}
Variant i_output_reset_rewrite_vars(CArrRef params) {
  FUNCTION_INJECTION(output_reset_rewrite_vars);
  return (f_output_reset_rewrite_vars());
}
Variant i_get_declared_interfaces(CArrRef params) {
  FUNCTION_INJECTION(get_declared_interfaces);
  return (f_get_declared_interfaces());
}
Variant i_passthru(CArrRef params) {
  FUNCTION_INJECTION(passthru);
  int count = params.size();
  if (count <= 1) return (f_passthru(params.rvalAt(0)), null);
  return (f_passthru(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))), null);
}
Variant i_magickmontageimage(CArrRef params) {
  FUNCTION_INJECTION(magickmontageimage);
  return (f_magickmontageimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_apc_cache_info(CArrRef params) {
  FUNCTION_INJECTION(apc_cache_info);
  int count = params.size();
  if (count <= 0) return (f_apc_cache_info());
  if (count == 1) return (f_apc_cache_info(params.rvalAt(0)));
  return (f_apc_cache_info(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_convert_cyr_string(CArrRef params) {
  FUNCTION_INJECTION(convert_cyr_string);
  return (f_convert_cyr_string(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_libxml_get_last_error(CArrRef params) {
  FUNCTION_INJECTION(libxml_get_last_error);
  return (f_libxml_get_last_error());
}
Variant i_sys_get_temp_dir(CArrRef params) {
  FUNCTION_INJECTION(sys_get_temp_dir);
  return (f_sys_get_temp_dir());
}
Variant i_drawline(CArrRef params) {
  FUNCTION_INJECTION(drawline);
  return (f_drawline(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)), null);
}
Variant i_drawsetfillcolor(CArrRef params) {
  FUNCTION_INJECTION(drawsetfillcolor);
  return (f_drawsetfillcolor(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_gzopen(CArrRef params) {
  FUNCTION_INJECTION(gzopen);
  int count = params.size();
  if (count <= 2) return (f_gzopen(params.rvalAt(0), params.rvalAt(1)));
  return (f_gzopen(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_getservbyport(CArrRef params) {
  FUNCTION_INJECTION(getservbyport);
  return (f_getservbyport(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileinfo_getfilename(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getfilename);
  return (f_hphp_splfileinfo_getfilename(params.rvalAt(0)));
}
Variant i_stripcslashes(CArrRef params) {
  FUNCTION_INJECTION(stripcslashes);
  return (f_stripcslashes(params.rvalAt(0)));
}
Variant i_curl_multi_add_handle(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_add_handle);
  return (f_curl_multi_add_handle(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_ldap_free_result(CArrRef params) {
  FUNCTION_INJECTION(ldap_free_result);
  return (f_ldap_free_result(params.rvalAt(0)));
}
Variant i_xmlwriter_end_pi(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_end_pi);
  return (f_xmlwriter_end_pi(params.rvalAt(0)));
}
Variant i_imagewbmp(CArrRef params) {
  FUNCTION_INJECTION(imagewbmp);
  int count = params.size();
  if (count <= 1) return (f_imagewbmp(params.rvalAt(0)));
  if (count == 2) return (f_imagewbmp(params.rvalAt(0), params.rvalAt(1)));
  return (f_imagewbmp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_socket_set_nonblock(CArrRef params) {
  FUNCTION_INJECTION(socket_set_nonblock);
  return (f_socket_set_nonblock(params.rvalAt(0)));
}
Variant i_shm_get_var(CArrRef params) {
  FUNCTION_INJECTION(shm_get_var);
  return (f_shm_get_var(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetmimetype(CArrRef params) {
  FUNCTION_INJECTION(magickgetmimetype);
  return (f_magickgetmimetype(params.rvalAt(0)));
}
Variant i_mysql_fetch_assoc(CArrRef params) {
  FUNCTION_INJECTION(mysql_fetch_assoc);
  return (f_mysql_fetch_assoc(params.rvalAt(0)));
}
Variant i_array_filter(CArrRef params) {
  FUNCTION_INJECTION(array_filter);
  int count = params.size();
  if (count <= 1) return (f_array_filter(params.rvalAt(0)));
  return (f_array_filter(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_mysql_query(CArrRef params) {
  FUNCTION_INJECTION(mysql_query);
  int count = params.size();
  if (count <= 1) return (f_mysql_query(params.rvalAt(0)));
  return (f_mysql_query(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_crypt(CArrRef params) {
  FUNCTION_INJECTION(crypt);
  int count = params.size();
  if (count <= 1) return (f_crypt(params.rvalAt(0)));
  return (f_crypt(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_xmlwriter_start_cdata(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_cdata);
  return (f_xmlwriter_start_cdata(params.rvalAt(0)));
}
Variant i_fgetc(CArrRef params) {
  FUNCTION_INJECTION(fgetc);
  return (f_fgetc(params.rvalAt(0)));
}
Variant i_move_uploaded_file(CArrRef params) {
  FUNCTION_INJECTION(move_uploaded_file);
  return (f_move_uploaded_file(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_splfileobject_flock(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileobject_flock);
  return (f_hphp_splfileobject_flock(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_imagecopyresampled(CArrRef params) {
  FUNCTION_INJECTION(imagecopyresampled);
  return (f_imagecopyresampled(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8), params.rvalAt(9)));
}
Variant i_imagecreatefrompng(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefrompng);
  return (f_imagecreatefrompng(params.rvalAt(0)));
}
Variant i_magickgetimage(CArrRef params) {
  FUNCTION_INJECTION(magickgetimage);
  return (f_magickgetimage(params.rvalAt(0)));
}
Variant i_imagesettile(CArrRef params) {
  FUNCTION_INJECTION(imagesettile);
  return (f_imagesettile(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_recursiveiteratoriterator_valid(CArrRef params) {
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_valid);
  return (f_hphp_recursiveiteratoriterator_valid(params.rvalAt(0)));
}
Variant i_fgets(CArrRef params) {
  FUNCTION_INJECTION(fgets);
  int count = params.size();
  if (count <= 1) return (f_fgets(params.rvalAt(0)));
  return (f_fgets(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_tempnam(CArrRef params) {
  FUNCTION_INJECTION(tempnam);
  return (f_tempnam(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_bcdiv(CArrRef params) {
  FUNCTION_INJECTION(bcdiv);
  int count = params.size();
  if (count <= 2) return (f_bcdiv(params.rvalAt(0), params.rvalAt(1)));
  return (f_bcdiv(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_hphp_splfileinfo_getbasename(CArrRef params) {
  FUNCTION_INJECTION(hphp_splfileinfo_getbasename);
  return (f_hphp_splfileinfo_getbasename(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_rsort(CArrRef params) {
  FUNCTION_INJECTION(rsort);
  int count = params.size();
  if (count <= 1) return (f_rsort(ref(const_cast<Array&>(params).lvalAt(0))));
  if (count == 2) return (f_rsort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1)));
  return (f_rsort(ref(const_cast<Array&>(params).lvalAt(0)), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawgettextdecoration(CArrRef params) {
  FUNCTION_INJECTION(drawgettextdecoration);
  return (f_drawgettextdecoration(params.rvalAt(0)));
}
Variant i_strtolower(CArrRef params) {
  FUNCTION_INJECTION(strtolower);
  return (f_strtolower(params.rvalAt(0)));
}
Variant i_oci_field_name(CArrRef params) {
  FUNCTION_INJECTION(oci_field_name);
  return (f_oci_field_name(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_getgrgid(CArrRef params) {
  FUNCTION_INJECTION(posix_getgrgid);
  return (f_posix_getgrgid(params.rvalAt(0)));
}
Variant i_apc_inc(CArrRef params) {
  FUNCTION_INJECTION(apc_inc);
  int count = params.size();
  if (count <= 1) return (f_apc_inc(params.rvalAt(0)));
  if (count == 2) return (f_apc_inc(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_apc_inc(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_apc_inc(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), params.rvalAt(3)));
}
Variant i_hphp_create_object(CArrRef params) {
  FUNCTION_INJECTION(hphp_create_object);
  return (f_hphp_create_object(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hexdec(CArrRef params) {
  FUNCTION_INJECTION(hexdec);
  return (f_hexdec(params.rvalAt(0)));
}
Variant i_imagefttext(CArrRef params) {
  FUNCTION_INJECTION(imagefttext);
  int count = params.size();
  if (count <= 8) return (f_imagefttext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)));
  return (f_imagefttext(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7), params.rvalAt(8)));
}
Variant i_xhprof_sample_disable(CArrRef params) {
  FUNCTION_INJECTION(xhprof_sample_disable);
  return (f_xhprof_sample_disable());
}
Variant i_ldap_compare(CArrRef params) {
  FUNCTION_INJECTION(ldap_compare);
  return (f_ldap_compare(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_dns_get_record(CArrRef params) {
  FUNCTION_INJECTION(dns_get_record);
  int count = params.size();
  if (count <= 1) return (f_dns_get_record(params.rvalAt(0)));
  if (count == 2) return (f_dns_get_record(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_dns_get_record(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2))));
  return (f_dns_get_record(params.rvalAt(0), params.rvalAt(1), ref(const_cast<Array&>(params).lvalAt(2)), ref(const_cast<Array&>(params).lvalAt(3))));
}
Variant i_openssl_get_privatekey(CArrRef params) {
  FUNCTION_INJECTION(openssl_get_privatekey);
  int count = params.size();
  if (count <= 1) return (f_openssl_get_privatekey(params.rvalAt(0)));
  return (f_openssl_get_privatekey(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_socket_bind(CArrRef params) {
  FUNCTION_INJECTION(socket_bind);
  int count = params.size();
  if (count <= 2) return (f_socket_bind(params.rvalAt(0), params.rvalAt(1)));
  return (f_socket_bind(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagepng(CArrRef params) {
  FUNCTION_INJECTION(imagepng);
  int count = params.size();
  if (count <= 1) return (f_imagepng(params.rvalAt(0)));
  if (count == 2) return (f_imagepng(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_imagepng(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_imagepng(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_getmyuid(CArrRef params) {
  FUNCTION_INJECTION(getmyuid);
  return (f_getmyuid());
}
Variant i_pixelgetopacity(CArrRef params) {
  FUNCTION_INJECTION(pixelgetopacity);
  return (f_pixelgetopacity(params.rvalAt(0)));
}
Variant i_drawsetstrokelinecap(CArrRef params) {
  FUNCTION_INJECTION(drawsetstrokelinecap);
  return (f_drawsetstrokelinecap(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_xmlwriter_write_attribute_ns(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_write_attribute_ns);
  return (f_xmlwriter_write_attribute_ns(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_array_keys(CArrRef params) {
  FUNCTION_INJECTION(array_keys);
  int count = params.size();
  if (count <= 1) return (f_array_keys(params.rvalAt(0)));
  if (count == 2) return (f_array_keys(params.rvalAt(0), params.rvalAt(1)));
  return (f_array_keys(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_call_user_method_array(CArrRef params) {
  FUNCTION_INJECTION(call_user_method_array);
  return (f_call_user_method_array(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
}
Variant i_magickmagnifyimage(CArrRef params) {
  FUNCTION_INJECTION(magickmagnifyimage);
  return (f_magickmagnifyimage(params.rvalAt(0)));
}
Variant i_is_bool(CArrRef params) {
  FUNCTION_INJECTION(is_bool);
  return (f_is_bool(params.rvalAt(0)));
}
Variant i_magickgetimagegreenprimary(CArrRef params) {
  FUNCTION_INJECTION(magickgetimagegreenprimary);
  return (f_magickgetimagegreenprimary(params.rvalAt(0)));
}
Variant i_filegroup(CArrRef params) {
  FUNCTION_INJECTION(filegroup);
  return (f_filegroup(params.rvalAt(0)));
}
Variant i_gzread(CArrRef params) {
  FUNCTION_INJECTION(gzread);
  int count = params.size();
  if (count <= 1) return (f_gzread(params.rvalAt(0)));
  return (f_gzread(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpathellipticarcrelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathellipticarcrelative);
  return (f_drawpathellipticarcrelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5), params.rvalAt(6), params.rvalAt(7)), null);
}
Variant i_openssl_csr_export_to_file(CArrRef params) {
  FUNCTION_INJECTION(openssl_csr_export_to_file);
  int count = params.size();
  if (count <= 2) return (f_openssl_csr_export_to_file(params.rvalAt(0), params.rvalAt(1)));
  return (f_openssl_csr_export_to_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_oci_fetch_row(CArrRef params) {
  FUNCTION_INJECTION(oci_fetch_row);
  return (f_oci_fetch_row(params.rvalAt(0)));
}
Variant i_magicksetimagecolorspace(CArrRef params) {
  FUNCTION_INJECTION(magicksetimagecolorspace);
  return (f_magicksetimagecolorspace(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_nl_langinfo(CArrRef params) {
  FUNCTION_INJECTION(nl_langinfo);
  return (f_nl_langinfo(params.rvalAt(0)));
}
Variant i_hphp_get_stats(CArrRef params) {
  FUNCTION_INJECTION(hphp_get_stats);
  return (f_hphp_get_stats(params.rvalAt(0)));
}
Variant i_strncmp(CArrRef params) {
  FUNCTION_INJECTION(strncmp);
  return (f_strncmp(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_mb_regex_set_options(CArrRef params) {
  FUNCTION_INJECTION(mb_regex_set_options);
  int count = params.size();
  if (count <= 0) return (f_mb_regex_set_options());
  return (f_mb_regex_set_options(params.rvalAt(0)));
}
Variant i_pixelsetmagenta(CArrRef params) {
  FUNCTION_INJECTION(pixelsetmagenta);
  return (f_pixelsetmagenta(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickdeconstructimages(CArrRef params) {
  FUNCTION_INJECTION(magickdeconstructimages);
  return (f_magickdeconstructimages(params.rvalAt(0)));
}
Variant i_xbox_task_status(CArrRef params) {
  FUNCTION_INJECTION(xbox_task_status);
  return (f_xbox_task_status(params.rvalAt(0)));
}
Variant i_openssl_open(CArrRef params) {
  FUNCTION_INJECTION(openssl_open);
  return (f_openssl_open(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_apc_bin_load(CArrRef params) {
  FUNCTION_INJECTION(apc_bin_load);
  int count = params.size();
  if (count <= 1) return (f_apc_bin_load(params.rvalAt(0)));
  if (count == 2) return (f_apc_bin_load(params.rvalAt(0), params.rvalAt(1)));
  return (f_apc_bin_load(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_current(CArrRef params) {
  FUNCTION_INJECTION(current);
  return (f_current(ref(const_cast<Array&>(params).lvalAt(0))));
}
Variant i_stream_register_wrapper(CArrRef params) {
  FUNCTION_INJECTION(stream_register_wrapper);
  return (f_stream_register_wrapper(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_hphp_stats(CArrRef params) {
  FUNCTION_INJECTION(hphp_stats);
  return (f_hphp_stats(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_opendir(CArrRef params) {
  FUNCTION_INJECTION(opendir);
  int count = params.size();
  if (count <= 1) return (f_opendir(params.rvalAt(0)));
  return (f_opendir(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magickgetexceptionstring(CArrRef params) {
  FUNCTION_INJECTION(magickgetexceptionstring);
  return (f_magickgetexceptionstring(params.rvalAt(0)));
}
Variant i_mcrypt_module_is_block_algorithm_mode(CArrRef params) {
  FUNCTION_INJECTION(mcrypt_module_is_block_algorithm_mode);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_is_block_algorithm_mode(params.rvalAt(0)));
  return (f_mcrypt_module_is_block_algorithm_mode(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_posix_setpgid(CArrRef params) {
  FUNCTION_INJECTION(posix_setpgid);
  return (f_posix_setpgid(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_dns_get_mx(CArrRef params) {
  FUNCTION_INJECTION(dns_get_mx);
  int count = params.size();
  if (count <= 2) return (f_dns_get_mx(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  return (f_dns_get_mx(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), ref(const_cast<Array&>(params).lvalAt(2))));
}
Variant i_escapeshellarg(CArrRef params) {
  FUNCTION_INJECTION(escapeshellarg);
  return (f_escapeshellarg(params.rvalAt(0)));
}
Variant i_headers_list(CArrRef params) {
  FUNCTION_INJECTION(headers_list);
  return (f_headers_list());
}
Variant i_is_scalar(CArrRef params) {
  FUNCTION_INJECTION(is_scalar);
  return (f_is_scalar(params.rvalAt(0)));
}
Variant i_acos(CArrRef params) {
  FUNCTION_INJECTION(acos);
  return (f_acos(params.rvalAt(0)));
}
Variant i_oci_internal_debug(CArrRef params) {
  FUNCTION_INJECTION(oci_internal_debug);
  return (f_oci_internal_debug(params.rvalAt(0)), null);
}
Variant i_drawgettextencoding(CArrRef params) {
  FUNCTION_INJECTION(drawgettextencoding);
  return (f_drawgettextencoding(params.rvalAt(0)));
}
Variant i_filetype(CArrRef params) {
  FUNCTION_INJECTION(filetype);
  return (f_filetype(params.rvalAt(0)));
}
Variant i_magicksetresolution(CArrRef params) {
  FUNCTION_INJECTION(magicksetresolution);
  return (f_magicksetresolution(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_posix_isatty(CArrRef params) {
  FUNCTION_INJECTION(posix_isatty);
  return (f_posix_isatty(params.rvalAt(0)));
}
Variant i_escapeshellcmd(CArrRef params) {
  FUNCTION_INJECTION(escapeshellcmd);
  return (f_escapeshellcmd(params.rvalAt(0)));
}
Variant i_apc_store(CArrRef params) {
  FUNCTION_INJECTION(apc_store);
  int count = params.size();
  if (count <= 2) return (f_apc_store(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_apc_store(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_apc_store(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magickresetiterator(CArrRef params) {
  FUNCTION_INJECTION(magickresetiterator);
  return (f_magickresetiterator(params.rvalAt(0)), null);
}
Variant i_apache_lookup_uri(CArrRef params) {
  FUNCTION_INJECTION(apache_lookup_uri);
  return (f_apache_lookup_uri(params.rvalAt(0)));
}
Variant i_magickmotionblurimage(CArrRef params) {
  FUNCTION_INJECTION(magickmotionblurimage);
  return (f_magickmotionblurimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_magicksetwandsize(CArrRef params) {
  FUNCTION_INJECTION(magicksetwandsize);
  return (f_magicksetwandsize(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_number_format(CArrRef params) {
  FUNCTION_INJECTION(number_format);
  int count = params.size();
  if (count <= 1) return (f_number_format(params.rvalAt(0)));
  if (count == 2) return (f_number_format(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_number_format(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_number_format(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_array_reduce(CArrRef params) {
  FUNCTION_INJECTION(array_reduce);
  int count = params.size();
  if (count <= 2) return (f_array_reduce(params.rvalAt(0), params.rvalAt(1)));
  return (f_array_reduce(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_xmlwriter_start_dtd_attlist(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_start_dtd_attlist);
  return (f_xmlwriter_start_dtd_attlist(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_constant(CArrRef params) {
  FUNCTION_INJECTION(constant);
  return (f_constant(params.rvalAt(0)));
}
Variant i_strlen(CArrRef params) {
  FUNCTION_INJECTION(strlen);
  return (f_strlen(params.rvalAt(0)));
}
Variant i_srand(CArrRef params) {
  FUNCTION_INJECTION(srand);
  int count = params.size();
  if (count <= 0) return (f_srand(), null);
  return (f_srand(params.rvalAt(0)), null);
}
Variant i_mysql_fetch_object(CArrRef params) {
  FUNCTION_INJECTION(mysql_fetch_object);
  int count = params.size();
  if (count <= 1) return (f_mysql_fetch_object(params.rvalAt(0)));
  if (count == 2) return (f_mysql_fetch_object(params.rvalAt(0), params.rvalAt(1)));
  return (f_mysql_fetch_object(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawpathlinetoverticalrelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathlinetoverticalrelative);
  return (f_drawpathlinetoverticalrelative(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_magickminifyimage(CArrRef params) {
  FUNCTION_INJECTION(magickminifyimage);
  return (f_magickminifyimage(params.rvalAt(0)));
}
Variant i_date_sunset(CArrRef params) {
  FUNCTION_INJECTION(date_sunset);
  int count = params.size();
  if (count <= 1) return (f_date_sunset(params.rvalAt(0)));
  if (count == 2) return (f_date_sunset(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_date_sunset(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_date_sunset(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  if (count == 5) return (f_date_sunset(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
  return (f_date_sunset(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_symlink(CArrRef params) {
  FUNCTION_INJECTION(symlink);
  return (f_symlink(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_imagesetpixel(CArrRef params) {
  FUNCTION_INJECTION(imagesetpixel);
  return (f_imagesetpixel(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_split(CArrRef params) {
  FUNCTION_INJECTION(split);
  int count = params.size();
  if (count <= 2) return (f_split(params.rvalAt(0), params.rvalAt(1)));
  return (f_split(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_drawsetfontstyle(CArrRef params) {
  FUNCTION_INJECTION(drawsetfontstyle);
  return (f_drawsetfontstyle(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_imagecreatefromxbm(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromxbm);
  return (f_imagecreatefromxbm(params.rvalAt(0)));
}
Variant i_mysql_db_query(CArrRef params) {
  FUNCTION_INJECTION(mysql_db_query);
  int count = params.size();
  if (count <= 2) return (f_mysql_db_query(params.rvalAt(0), params.rvalAt(1)));
  return (f_mysql_db_query(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_imagecolorclosestalpha(CArrRef params) {
  FUNCTION_INJECTION(imagecolorclosestalpha);
  return (f_imagecolorclosestalpha(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_gzuncompress(CArrRef params) {
  FUNCTION_INJECTION(gzuncompress);
  int count = params.size();
  if (count <= 1) return (f_gzuncompress(params.rvalAt(0)));
  return (f_gzuncompress(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_is_executable(CArrRef params) {
  FUNCTION_INJECTION(is_executable);
  return (f_is_executable(params.rvalAt(0)));
}
Variant i_socket_create_listen(CArrRef params) {
  FUNCTION_INJECTION(socket_create_listen);
  int count = params.size();
  if (count <= 1) return (f_socket_create_listen(params.rvalAt(0)));
  return (f_socket_create_listen(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_pixelgetcolorcount(CArrRef params) {
  FUNCTION_INJECTION(pixelgetcolorcount);
  return (f_pixelgetcolorcount(params.rvalAt(0)));
}
Variant i_magickqueryconfigureoptions(CArrRef params) {
  FUNCTION_INJECTION(magickqueryconfigureoptions);
  return (f_magickqueryconfigureoptions(params.rvalAt(0)));
}
Variant i_iptcembed(CArrRef params) {
  FUNCTION_INJECTION(iptcembed);
  int count = params.size();
  if (count <= 2) return (f_iptcembed(params.rvalAt(0), params.rvalAt(1)));
  return (f_iptcembed(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_posix_getgrnam(CArrRef params) {
  FUNCTION_INJECTION(posix_getgrnam);
  return (f_posix_getgrnam(params.rvalAt(0)));
}
Variant i_rtrim(CArrRef params) {
  FUNCTION_INJECTION(rtrim);
  int count = params.size();
  if (count <= 1) return (f_rtrim(params.rvalAt(0)));
  return (f_rtrim(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_print_r(CArrRef params) {
  FUNCTION_INJECTION(print_r);
  int count = params.size();
  if (count <= 1) return (f_print_r(params.rvalAt(0)));
  return (f_print_r(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_drawpathcurvetoquadraticbeziersmoothrelative(CArrRef params) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbeziersmoothrelative);
  return (f_drawpathcurvetoquadraticbeziersmoothrelative(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)), null);
}
Variant i_openssl_pkey_export(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_export);
  int count = params.size();
  if (count <= 2) return (f_openssl_pkey_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
  if (count == 3) return (f_openssl_pkey_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2)));
  return (f_openssl_pkey_export(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1)), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_abs(CArrRef params) {
  FUNCTION_INJECTION(abs);
  return (f_abs(params.rvalAt(0)));
}
Variant i_shell_exec(CArrRef params) {
  FUNCTION_INJECTION(shell_exec);
  return (f_shell_exec(params.rvalAt(0)));
}
Variant i_restore_exception_handler(CArrRef params) {
  FUNCTION_INJECTION(restore_exception_handler);
  return (f_restore_exception_handler());
}
Variant i_curl_multi_exec(CArrRef params) {
  FUNCTION_INJECTION(curl_multi_exec);
  return (f_curl_multi_exec(params.rvalAt(0), ref(const_cast<Array&>(params).lvalAt(1))));
}
Variant i_htmlspecialchars(CArrRef params) {
  FUNCTION_INJECTION(htmlspecialchars);
  int count = params.size();
  if (count <= 1) return (f_htmlspecialchars(params.rvalAt(0)));
  if (count == 2) return (f_htmlspecialchars(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_htmlspecialchars(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_htmlspecialchars(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_imagexbm(CArrRef params) {
  FUNCTION_INJECTION(imagexbm);
  int count = params.size();
  if (count <= 1) return (f_imagexbm(params.rvalAt(0)));
  if (count == 2) return (f_imagexbm(params.rvalAt(0), params.rvalAt(1)));
  return (f_imagexbm(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetreleasedate(CArrRef params) {
  FUNCTION_INJECTION(magickgetreleasedate);
  return (f_magickgetreleasedate());
}
Variant i_sem_remove(CArrRef params) {
  FUNCTION_INJECTION(sem_remove);
  return (f_sem_remove(params.rvalAt(0)));
}
Variant i_imageellipse(CArrRef params) {
  FUNCTION_INJECTION(imageellipse);
  return (f_imageellipse(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_getprotobynumber(CArrRef params) {
  FUNCTION_INJECTION(getprotobynumber);
  return (f_getprotobynumber(params.rvalAt(0)));
}
Variant i_pixelsetopacity(CArrRef params) {
  FUNCTION_INJECTION(pixelsetopacity);
  return (f_pixelsetopacity(params.rvalAt(0), params.rvalAt(1)), null);
}
Variant i_lchgrp(CArrRef params) {
  FUNCTION_INJECTION(lchgrp);
  return (f_lchgrp(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_simplexml_load_file(CArrRef params) {
  FUNCTION_INJECTION(simplexml_load_file);
  int count = params.size();
  if (count <= 1) return (f_simplexml_load_file(params.rvalAt(0)));
  if (count == 2) return (f_simplexml_load_file(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_simplexml_load_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_simplexml_load_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_simplexml_load_file(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_openssl_pkey_get_details(CArrRef params) {
  FUNCTION_INJECTION(openssl_pkey_get_details);
  return (f_openssl_pkey_get_details(params.rvalAt(0)));
}
Variant i_imagetypes(CArrRef params) {
  FUNCTION_INJECTION(imagetypes);
  return (f_imagetypes());
}
Variant i_gzseek(CArrRef params) {
  FUNCTION_INJECTION(gzseek);
  int count = params.size();
  if (count <= 2) return (f_gzseek(params.rvalAt(0), params.rvalAt(1)));
  return (f_gzseek(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_magickgetmaxtextadvance(CArrRef params) {
  FUNCTION_INJECTION(magickgetmaxtextadvance);
  int count = params.size();
  if (count <= 3) return (f_magickgetmaxtextadvance(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  return (f_magickgetmaxtextadvance(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
}
Variant i_func_get_arg(CArrRef params) {
  FUNCTION_INJECTION(func_get_arg);
  return (f_func_get_arg(params.rvalAt(0)));
}
Variant i_imagefilledrectangle(CArrRef params) {
  FUNCTION_INJECTION(imagefilledrectangle);
  return (f_imagefilledrectangle(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)));
}
Variant i_oci_pconnect(CArrRef params) {
  FUNCTION_INJECTION(oci_pconnect);
  int count = params.size();
  if (count <= 2) return (f_oci_pconnect(params.rvalAt(0), params.rvalAt(1)));
  if (count == 3) return (f_oci_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
  if (count == 4) return (f_oci_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3)));
  return (f_oci_pconnect(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4)));
}
Variant i_drawpushpattern(CArrRef params) {
  FUNCTION_INJECTION(drawpushpattern);
  return (f_drawpushpattern(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2), params.rvalAt(3), params.rvalAt(4), params.rvalAt(5)), null);
}
Variant i_xmlwriter_set_indent(CArrRef params) {
  FUNCTION_INJECTION(xmlwriter_set_indent);
  return (f_xmlwriter_set_indent(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_openssl_csr_get_subject(CArrRef params) {
  FUNCTION_INJECTION(openssl_csr_get_subject);
  int count = params.size();
  if (count <= 1) return (f_openssl_csr_get_subject(params.rvalAt(0)));
  return (f_openssl_csr_get_subject(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_is_numeric(CArrRef params) {
  FUNCTION_INJECTION(is_numeric);
  return (f_is_numeric(params.rvalAt(0)));
}
Variant i_gzdeflate(CArrRef params) {
  FUNCTION_INJECTION(gzdeflate);
  int count = params.size();
  if (count <= 1) return (f_gzdeflate(params.rvalAt(0)));
  return (f_gzdeflate(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_dns_check_record(CArrRef params) {
  FUNCTION_INJECTION(dns_check_record);
  int count = params.size();
  if (count <= 1) return (f_dns_check_record(params.rvalAt(0)));
  return (f_dns_check_record(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_magicknegateimage(CArrRef params) {
  FUNCTION_INJECTION(magicknegateimage);
  int count = params.size();
  if (count <= 1) return (f_magicknegateimage(params.rvalAt(0)));
  if (count == 2) return (f_magicknegateimage(params.rvalAt(0), params.rvalAt(1)));
  return (f_magicknegateimage(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_socket_last_error(CArrRef params) {
  FUNCTION_INJECTION(socket_last_error);
  int count = params.size();
  if (count <= 0) return (f_socket_last_error());
  return (f_socket_last_error(params.rvalAt(0)));
}
Variant i_create_function(CArrRef params) {
  FUNCTION_INJECTION(create_function);
  return (f_create_function(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_str_split(CArrRef params) {
  FUNCTION_INJECTION(str_split);
  int count = params.size();
  if (count <= 1) return (f_str_split(params.rvalAt(0)));
  return (f_str_split(params.rvalAt(0), params.rvalAt(1)));
}
Variant i_date_parse(CArrRef params) {
  FUNCTION_INJECTION(date_parse);
  return (f_date_parse(params.rvalAt(0)));
}
Variant i_imagecreatefromxpm(CArrRef params) {
  FUNCTION_INJECTION(imagecreatefromxpm);
  return (f_imagecreatefromxpm(params.rvalAt(0)));
}
Variant i_mysql_thread_id(CArrRef params) {
  FUNCTION_INJECTION(mysql_thread_id);
  int count = params.size();
  if (count <= 0) return (f_mysql_thread_id());
  return (f_mysql_thread_id(params.rvalAt(0)));
}
Variant i_mb_encode_numericentity(CArrRef params) {
  FUNCTION_INJECTION(mb_encode_numericentity);
  int count = params.size();
  if (count <= 2) return (f_mb_encode_numericentity(params.rvalAt(0), params.rvalAt(1)));
  return (f_mb_encode_numericentity(params.rvalAt(0), params.rvalAt(1), params.rvalAt(2)));
}
Variant i_fb_call_user_func_array_safe(CArrRef params) {
  FUNCTION_INJECTION(fb_call_user_func_array_safe);
  return (f_fb_call_user_func_array_safe(params.rvalAt(0), params.rvalAt(1)));
}
Variant invoke_builtin(const char *s, CArrRef params, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 4095) {
    case 1:
      HASH_INVOKE(0x4F7230DC25F0E001LL, magicknormalizeimage);
      break;
    case 2:
      HASH_INVOKE(0x76C320EDB9B6E002LL, xmlwriter_flush);
      break;
    case 3:
      HASH_INVOKE(0x7E0EC3E131BCA003LL, token_name);
      break;
    case 5:
      HASH_INVOKE(0x20D579E7E4131005LL, imagecolorclosest);
      HASH_INVOKE(0x18A0F1EE8E249005LL, msg_send);
      break;
    case 10:
      HASH_INVOKE(0x555D7A3FB939300ALL, apache_setenv);
      break;
    case 11:
      HASH_INVOKE(0x4FDCCE1C7754600BLL, ob_iconv_handler);
      break;
    case 13:
      HASH_INVOKE(0x40FA17130FA7100DLL, openssl_seal);
      break;
    case 22:
      HASH_INVOKE(0x5623A698A728F016LL, getlastmod);
      break;
    case 24:
      HASH_INVOKE(0x4C915E3480E94018LL, mb_substr_count);
      break;
    case 26:
      HASH_INVOKE(0x03834225EBBC101ALL, drawsettextundercolor);
      break;
    case 32:
      HASH_INVOKE(0x583D163A6EB52020LL, oci_result);
      break;
    case 34:
      HASH_INVOKE(0x145D42B2AB55D022LL, drawmatte);
      break;
    case 35:
      HASH_INVOKE(0x35C74650867B7023LL, imagesetpixel);
      break;
    case 40:
      HASH_INVOKE(0x601C5152277AE028LL, readfile);
      break;
    case 44:
      HASH_INVOKE(0x464EB9B1F955202CLL, apc_add);
      break;
    case 51:
      HASH_INVOKE(0x48F35DFD653D7033LL, pclose);
      break;
    case 54:
      HASH_INVOKE(0x32F23F206C394036LL, curl_setopt_array);
      break;
    case 55:
      HASH_INVOKE(0x418D937957ECE037LL, tanh);
      break;
    case 62:
      HASH_INVOKE(0x32E6E5D3CCE3703ELL, magickgetimagewidth);
      HASH_INVOKE(0x43461C4D9130103ELL, exit);
      HASH_INVOKE(0x67C1ED9B816E503ELL, md5_file);
      HASH_INVOKE(0x497E31C70409603ELL, timezone_name_from_abbr);
      break;
    case 63:
      HASH_INVOKE(0x24206A195B9C203FLL, ucfirst);
      break;
    case 65:
      HASH_INVOKE(0x65B39B11F5D7C041LL, array_unique);
      break;
    case 67:
      HASH_INVOKE(0x5ACCF9166CD9D043LL, ftruncate);
      break;
    case 68:
      HASH_INVOKE(0x378A73FF98B60044LL, curl_init);
      break;
    case 73:
      HASH_INVOKE(0x047A8BF04DB51049LL, range);
      HASH_INVOKE(0x4282E0231F600049LL, fseek);
      break;
    case 75:
      HASH_INVOKE(0x17CD0E68E778C04BLL, drawsetstrokelinejoin);
      HASH_INVOKE(0x6370CF455EA8604BLL, socket_create);
      break;
    case 76:
      HASH_INVOKE(0x03047FD5FC67204CLL, exif_read_data);
      break;
    case 83:
      HASH_INVOKE(0x15A9EB33DA6E9053LL, getimagesize);
      HASH_INVOKE(0x07EB5C3A3BEA3053LL, acosh);
      break;
    case 87:
      HASH_INVOKE(0x12B22A2E6B344057LL, ldap_sort);
      break;
    case 90:
      HASH_INVOKE(0x271AB768D202F05ALL, mcrypt_module_is_block_algorithm);
      break;
    case 92:
      HASH_INVOKE(0x2B7532A070BF605CLL, openssl_get_privatekey);
      break;
    case 95:
      HASH_INVOKE(0x4B70746F965E705FLL, preg_last_error);
      break;
    case 98:
      HASH_INVOKE(0x745910AD5C922062LL, magickgetmimetype);
      break;
    case 100:
      HASH_INVOKE(0x5CC8BA5ADFAC0064LL, imagegrabscreen);
      break;
    case 101:
      HASH_INVOKE(0x777FE52584FAE065LL, apc_bin_dump);
      break;
    case 103:
      HASH_INVOKE(0x0CE1918B30DF5067LL, sys_getloadavg);
      HASH_INVOKE(0x4512BD5EA7076067LL, openssl_csr_export_to_file);
      break;
    case 112:
      HASH_INVOKE(0x3C466098FF7B5070LL, mb_check_encoding);
      break;
    case 120:
      HASH_INVOKE(0x6B268C26E21C1078LL, arsort);
      break;
    case 122:
      HASH_INVOKE(0x5F9DDC342A83807ALL, date_default_timezone_get);
      break;
    case 131:
      HASH_INVOKE(0x1A90213EE1A56083LL, array_pop);
      break;
    case 132:
      HASH_INVOKE(0x53FD8C9AC3F4D084LL, dangling_server_proxy_new_request);
      break;
    case 137:
      HASH_INVOKE(0x4AD554CBAB9CC089LL, call_user_method_array);
      break;
    case 140:
      HASH_INVOKE(0x4F1D1ED7B087208CLL, exec);
      HASH_INVOKE(0x3A0B58797E8FE08CLL, xml_set_external_entity_ref_handler);
      break;
    case 141:
      HASH_INVOKE(0x200864F8F053C08DLL, magickgetversionstring);
      break;
    case 142:
      HASH_INVOKE(0x3E4AE974AFA9708ELL, pixelsetquantumcolor);
      break;
    case 145:
      HASH_INVOKE(0x3E5CF6378A49C091LL, ldap_get_attributes);
      HASH_INVOKE(0x673B36244DC87091LL, closelog);
      HASH_INVOKE(0x1C32BB63986C8091LL, socket_strerror);
      break;
    case 147:
      HASH_INVOKE(0x3B5E32078E37A093LL, imagedestroy);
      break;
    case 158:
      HASH_INVOKE(0x4AF87BA91163D09ELL, mysql_db_name);
      HASH_INVOKE(0x74F0D6D8F1F2709ELL, drawsetstrokedashoffset);
      break;
    case 159:
      HASH_INVOKE(0x2B130322DEC4B09FLL, pixelgetopacityquantum);
      break;
    case 161:
      HASH_INVOKE(0x0DF945F12533F0A1LL, abs);
      break;
    case 162:
      HASH_INVOKE(0x10DF7941C3F3E0A2LL, socket_bind);
      break;
    case 163:
      HASH_INVOKE(0x54242D2846BC60A3LL, magickunsharpmaskimage);
      break;
    case 167:
      HASH_INVOKE(0x74C787060F7290A7LL, icu_transliterate);
      break;
    case 168:
      HASH_INVOKE(0x6E8C61326DCE40A8LL, var_export);
      break;
    case 169:
      HASH_INVOKE(0x431F4E8713B9D0A9LL, oci_field_scale);
      break;
    case 171:
      HASH_INVOKE(0x439DF153FC32D0ABLL, printf);
      HASH_INVOKE(0x5B1D9F56698A40ABLL, html_entity_decode);
      break;
    case 172:
      HASH_INVOKE(0x6E27DC1E74C5B0ACLL, drawpathstart);
      break;
    case 173:
      HASH_INVOKE(0x4C9252FB9C3300ADLL, pixelsetalphaquantum);
      break;
    case 174:
      HASH_INVOKE(0x47AB4A08446BD0AELL, bcmod);
      HASH_INVOKE(0x4BBD5D8A6E0110AELL, error_log);
      break;
    case 175:
      HASH_INVOKE(0x3954FFED1E0650AFLL, stream_register_wrapper);
      break;
    case 176:
      HASH_INVOKE(0x5B9F8B3E1D8330B0LL, stream_socket_sendto);
      break;
    case 178:
      HASH_INVOKE(0x48BBFB59FB7F90B2LL, iconv_strlen);
      break;
    case 184:
      HASH_INVOKE(0x05A4C165810A30B8LL, gzread);
      break;
    case 185:
      HASH_INVOKE(0x5C659372B2CD80B9LL, imagecolorstotal);
      break;
    case 187:
      HASH_INVOKE(0x331E7DFBE6E240BBLL, libxml_get_errors);
      break;
    case 188:
      HASH_INVOKE(0x3900350CD9D990BCLL, imagecreatefromjpeg);
      break;
    case 197:
      HASH_INVOKE(0x7424946F7ED520C5LL, magickgetimagefilename);
      HASH_INVOKE(0x6B477F3B9CDB10C5LL, base64_decode);
      break;
    case 199:
      HASH_INVOKE(0x677F33E78342A0C7LL, function_exists);
      break;
    case 200:
      HASH_INVOKE(0x30AB38D851C440C8LL, magickgetimagebackgroundcolor);
      break;
    case 202:
      HASH_INVOKE(0x2EE0967F6EB5A0CALL, date_format);
      HASH_INVOKE(0x4C67DEE74080E0CALL, magicksetimagecompose);
      break;
    case 206:
      HASH_INVOKE(0x64E390E5F2FDC0CELL, ismagickwand);
      break;
    case 210:
      HASH_INVOKE(0x7D1FAF3322A360D2LL, hphp_splfileobject___construct);
      HASH_INVOKE(0x5365BD7509BE60D2LL, ldap_dn2ufn);
      HASH_INVOKE(0x3E4DAD592CD0A0D2LL, magickdescribeimage);
      break;
    case 213:
      HASH_INVOKE(0x3BF44C6DECD790D5LL, xmlwriter_start_dtd_entity);
      break;
    case 217:
      HASH_INVOKE(0x08F6B727D60670D9LL, magicksetimagedepth);
      break;
    case 218:
      HASH_INVOKE(0x6F242340B2E930DALL, hphp_splfileinfo_setfileclass);
      break;
    case 219:
      HASH_INVOKE(0x3801923AD84670DBLL, apc_inc);
      break;
    case 224:
      HASH_INVOKE(0x2E4612DF112010E0LL, imagecopyresized);
      break;
    case 228:
      HASH_INVOKE(0x2B9425038D4230E4LL, imagecreatefromxpm);
      break;
    case 231:
      HASH_INVOKE(0x79E6FD78989B10E7LL, tmpfile);
      HASH_INVOKE(0x59DE3A26AFF570E7LL, magickshaveimage);
      break;
    case 232:
      HASH_INVOKE(0x476F4B6CC987E0E8LL, magickframeimage);
      HASH_INVOKE(0x17CB328F55FDF0E8LL, drawsetstrokeantialias);
      break;
    case 233:
      HASH_INVOKE(0x47F8A63A709D70E9LL, oci_new_cursor);
      break;
    case 234:
      HASH_INVOKE(0x53BA3992F8C240EALL, imagegrabwindow);
      break;
    case 243:
      HASH_INVOKE(0x315CCBC8C5C7D0F3LL, xmlwriter_write_raw);
      break;
    case 249:
      HASH_INVOKE(0x480797DB7165A0F9LL, xmlwriter_set_indent);
      break;
    case 259:
      HASH_INVOKE(0x1FFCBCF1927D7103LL, posix_setpgid);
      break;
    case 261:
      HASH_INVOKE(0x71E3372AA1AD0105LL, is_infinite);
      HASH_INVOKE(0x509B763CDAD9D105LL, gethostbyaddr);
      break;
    case 264:
      HASH_INVOKE(0x60B8B61133F59108LL, quoted_printable_decode);
      break;
    case 267:
      HASH_INVOKE(0x7DE1BEE0C35D010BLL, pcntl_signal);
      break;
    case 273:
      HASH_INVOKE(0x3A9A5D4FEE79A111LL, getmxrr);
      break;
    case 274:
      HASH_INVOKE(0x0B1BA48B0CFB1112LL, strval);
      HASH_INVOKE(0x28C44527BD59D112LL, is_link);
      break;
    case 276:
      HASH_INVOKE(0x02A4724E6A881114LL, mb_decode_numericentity);
      break;
    case 281:
      HASH_INVOKE(0x3AB82455A70F5119LL, imagecolortransparent);
      HASH_INVOKE(0x2B31A877824A1119LL, stristr);
      break;
    case 284:
      HASH_INVOKE(0x070A63F6A0B8711CLL, array_walk_recursive);
      break;
    case 285:
      HASH_INVOKE(0x291088666B8BF11DLL, drawsetfontfamily);
      break;
    case 286:
      HASH_INVOKE(0x658444BB4E29E11ELL, openssl_free_key);
      break;
    case 287:
      HASH_INVOKE(0x4C70C24C84F5511FLL, magicksetimagegamma);
      break;
    case 291:
      HASH_INVOKE(0x3669138315204123LL, mcrypt_module_get_algo_key_size);
      break;
    case 292:
      HASH_INVOKE(0x7D4D28D561392124LL, drawsettextalignment);
      break;
    case 293:
      HASH_INVOKE(0x7A8B3EC0235EF125LL, magickprofileimage);
      break;
    case 301:
      HASH_INVOKE(0x7579DBE83CE5812DLL, imagerectangle);
      break;
    case 307:
      HASH_INVOKE(0x6A7E0B15FF689133LL, mb_ereg_search_init);
      break;
    case 311:
      HASH_INVOKE(0x5666016FA3C0F137LL, socket_clear_error);
      break;
    case 312:
      HASH_INVOKE(0x2676902697E37138LL, xmlwriter_start_comment);
      break;
    case 314:
      HASH_INVOKE(0x2A57E5D29D73D13ALL, register_tick_function);
      break;
    case 315:
      HASH_INVOKE(0x1F61AFCDC510413BLL, imagefilter);
      break;
    case 323:
      HASH_INVOKE(0x296C739F28D6C143LL, drawsetfontsize);
      break;
    case 335:
      HASH_INVOKE(0x61A61E91C477514FLL, chop);
      HASH_INVOKE(0x7863294A8F33D14FLL, file);
      break;
    case 337:
      HASH_INVOKE(0x3044E9F91628E151LL, mb_strlen);
      break;
    case 338:
      HASH_INVOKE(0x5D170BCBBBA02152LL, system);
      HASH_INVOKE(0x26DD46D8C1F47152LL, ldap_bind);
      break;
    case 341:
      HASH_INVOKE(0x2623917110168155LL, fclose);
      HASH_INVOKE(0x4F43FE32079C0155LL, magickgetimagesblob);
      break;
    case 347:
      HASH_INVOKE(0x3711AF36391EA15BLL, mysql_list_tables);
      break;
    case 348:
      HASH_INVOKE(0x6CD7466174B9A15CLL, pixelsetredquantum);
      break;
    case 353:
      HASH_INVOKE(0x309E780586D6C161LL, socket_set_nonblock);
      break;
    case 355:
      HASH_INVOKE(0x36D6B73D289DD163LL, date_sunset);
      break;
    case 360:
      HASH_INVOKE(0x14E46EA3CBCFB168LL, magickgetsamplingfactors);
      break;
    case 361:
      HASH_INVOKE(0x4983571BFEAE6169LL, magickaffinetransformimage);
      HASH_INVOKE(0x1612E331D1726169LL, drawsetstrokecolor);
      break;
    case 366:
      HASH_INVOKE(0x15B61E061268B16ELL, magickenhanceimage);
      HASH_INVOKE(0x0125F8B9428E416ELL, hphp_create_object);
      break;
    case 370:
      HASH_INVOKE(0x59FE6A862E1CB172LL, get_browser);
      break;
    case 372:
      HASH_INVOKE(0x345E070844E3F174LL, create_function);
      break;
    case 375:
      HASH_INVOKE(0x174DB93CAF0D1177LL, hphp_splfileinfo___tostring);
      break;
    case 377:
      HASH_INVOKE(0x6884FAF0D1EF3179LL, posix_mknod);
      break;
    case 379:
      HASH_INVOKE(0x59594143EFC7617BLL, mcrypt_module_open);
      break;
    case 380:
      HASH_INVOKE(0x3E1343B4A3AD717CLL, magickgettextascent);
      break;
    case 383:
      HASH_INVOKE(0x4EF9496D16F9D17FLL, xmlwriter_start_element_ns);
      break;
    case 385:
      HASH_INVOKE(0x1CBD3B58296C8181LL, xmlwriter_write_dtd);
      break;
    case 386:
      HASH_INVOKE(0x7BB7C27B2C118182LL, get_magic_quotes_gpc);
      HASH_INVOKE(0x130B62A8C77F3182LL, mb_ereg_search_getregs);
      break;
    case 389:
      HASH_INVOKE(0x13E90F8874839185LL, ob_get_status);
      HASH_INVOKE(0x54DB5DC6A069A185LL, hphp_get_class_info);
      break;
    case 390:
      HASH_INVOKE(0x5DB5E45860801186LL, openssl_csr_export);
      break;
    case 391:
      HASH_INVOKE(0x1BC448670BA4E187LL, iconv_strpos);
      break;
    case 393:
      HASH_INVOKE(0x0CC53B2F0D38D189LL, timezone_offset_get);
      break;
    case 402:
      HASH_INVOKE(0x07B5BF934F6EA192LL, imagesettile);
      break;
    case 407:
      HASH_INVOKE(0x15AD9CE061C75197LL, timezone_transitions_get);
      break;
    case 409:
      HASH_INVOKE(0x0CE71BC3B75D8199LL, mb_strimwidth);
      break;
    case 411:
      HASH_INVOKE(0x7FF6C2A693CE119BLL, magickcyclecolormapimage);
      HASH_INVOKE(0x74F20C284227219BLL, similar_text);
      break;
    case 416:
      HASH_INVOKE(0x6FB5104FC97A31A0LL, drawpathcurvetorelative);
      break;
    case 418:
      HASH_INVOKE(0x6DFC0765EBAB81A2LL, mcrypt_decrypt);
      HASH_INVOKE(0x2A9015499A2EB1A2LL, fnmatch);
      HASH_INVOKE(0x615723D21421A1A2LL, sem_remove);
      break;
    case 419:
      HASH_INVOKE(0x735B81C45C2971A3LL, drawgetfillopacity);
      break;
    case 424:
      HASH_INVOKE(0x2691B602BFA8A1A8LL, oci_field_size);
      break;
    case 425:
      HASH_INVOKE(0x740DC7FFAD8BB1A9LL, imagecolorat);
      HASH_INVOKE(0x0DDFE3B1F6EEE1A9LL, array_reduce);
      break;
    case 426:
      HASH_INVOKE(0x11A5C66A3D0711AALL, apc_sma_info);
      break;
    case 429:
      HASH_INVOKE(0x5A6EFF8C71A431ADLL, socket_get_status);
      HASH_INVOKE(0x50538F37398AF1ADLL, ldap_get_option);
      break;
    case 431:
      HASH_INVOKE(0x5B1F9C2E9FE111AFLL, fb_utf8ize);
      break;
    case 434:
      HASH_INVOKE(0x4B96F870584541B2LL, hphp_splfileobject_setflags);
      break;
    case 438:
      HASH_INVOKE(0x33BD672B4AC301B6LL, mt_rand);
      break;
    case 445:
      HASH_INVOKE(0x4B3F35310DEA31BDLL, socket_create_pair);
      break;
    case 447:
      HASH_INVOKE(0x0E88ACEB15A581BFLL, magickgetimageextrema);
      HASH_INVOKE(0x681CD0E7D9DB71BFLL, pow);
      break;
    case 450:
      HASH_INVOKE(0x02103322F88C71C2LL, pixelgetcolorcount);
      break;
    case 452:
      HASH_INVOKE(0x3617DAE43A23D1C4LL, xml_parser_set_option);
      break;
    case 455:
      HASH_INVOKE(0x5AE12CB1FFDC21C7LL, drawellipse);
      break;
    case 456:
      HASH_INVOKE(0x11C0B5DA066891C8LL, preg_match_all);
      break;
    case 458:
      HASH_INVOKE(0x75CA86838D24A1CALL, hash_algos);
      break;
    case 460:
      HASH_INVOKE(0x3DF488365DAAF1CCLL, drawgettextencoding);
      break;
    case 461:
      HASH_INVOKE(0x37340B707E7CD1CDLL, magickgetimagebordercolor);
      break;
    case 462:
      HASH_INVOKE(0x2E7741B5440FB1CELL, magicksetlastiterator);
      break;
    case 464:
      HASH_INVOKE(0x03012F3DDD7AB1D0LL, getservbyport);
      break;
    case 468:
      HASH_INVOKE(0x219F3257BA3371D4LL, decbin);
      break;
    case 470:
      HASH_INVOKE(0x78831282736801D6LL, stream_context_get_default);
      break;
    case 472:
      HASH_INVOKE(0x60E9E392663921D8LL, readlink);
      break;
    case 473:
      HASH_INVOKE(0x7A69D0078F4F31D9LL, ldap_start_tls);
      break;
    case 474:
      HASH_INVOKE(0x0482E069503A91DALL, posix_setgid);
      break;
    case 475:
      HASH_INVOKE(0x3FEBBC0DA79F31DBLL, fb_call_user_func_safe);
      break;
    case 476:
      HASH_INVOKE(0x14FB46333D6D11DCLL, xml_set_default_handler);
      HASH_INVOKE(0x5B3A4A72846B21DCLL, current);
      break;
    case 477:
      HASH_INVOKE(0x04666D6F67C7A1DDLL, mysql_list_processes);
      HASH_INVOKE(0x03A183D73942B1DDLL, apc_filehits);
      break;
    case 479:
      HASH_INVOKE(0x7403251412E931DFLL, syslog);
      break;
    case 480:
      HASH_INVOKE(0x5932D2750A8A91E0LL, magickgetpackagename);
      break;
    case 481:
      HASH_INVOKE(0x2771C632A60371E1LL, ftok);
      HASH_INVOKE(0x0ED729A444C611E1LL, openssl_x509_read);
      break;
    case 482:
      HASH_INVOKE(0x67D4BA8513BF41E2LL, newpixelwand);
      break;
    case 483:
      HASH_INVOKE(0x131D11F79A8801E3LL, mb_http_output);
      HASH_INVOKE(0x406BDC51A3FD81E3LL, pcntl_waitpid);
      break;
    case 484:
      HASH_INVOKE(0x08F7A6C37FC7B1E4LL, shm_get_var);
      break;
    case 488:
      HASH_INVOKE(0x7F843353646391E8LL, rad2deg);
      break;
    case 493:
      HASH_INVOKE(0x1B09A9A533FFA1EDLL, drawgetexceptiontype);
      HASH_INVOKE(0x19932EEC5CAE01EDLL, hphp_splfileinfo_getfileinfo);
      break;
    case 497:
      HASH_INVOKE(0x02BCE5B0FBED61F1LL, strlen);
      break;
    case 498:
      HASH_INVOKE(0x46AFE55982B371F2LL, posix_geteuid);
      break;
    case 499:
      HASH_INVOKE(0x582D10141D5601F3LL, stream_context_set_option);
      HASH_INVOKE(0x11BB3CDC5E4971F3LL, xmlwriter_end_pi);
      break;
    case 501:
      HASH_INVOKE(0x542FBDCF960031F5LL, fprintf);
      HASH_INVOKE(0x02ABC00C046291F5LL, imageellipse);
      break;
    case 506:
      HASH_INVOKE(0x135D5CBF936B11FALL, msg_receive);
      break;
    case 509:
      HASH_INVOKE(0x5304E6B47ED0B1FDLL, srand);
      break;
    case 514:
      HASH_INVOKE(0x16699E33370A8202LL, idn_to_unicode);
      break;
    case 515:
      HASH_INVOKE(0x5B3C354575BB8203LL, mysql_free_result);
      break;
    case 520:
      HASH_INVOKE(0x7B525920E026C208LL, gztell);
      break;
    case 524:
      HASH_INVOKE(0x41B15671649A320CLL, curl_multi_getcontent);
      HASH_INVOKE(0x257BEA4D6DC9920CLL, ctype_alnum);
      break;
    case 525:
      HASH_INVOKE(0x5C0DECC8CC67E20DLL, magickwriteimagesfile);
      break;
    case 526:
      HASH_INVOKE(0x533642044A00520ELL, pixelgetmagentaquantum);
      break;
    case 527:
      HASH_INVOKE(0x08DC8BF3ADAE520FLL, getallheaders);
      HASH_INVOKE(0x53631CF3A937320FLL, get_class_methods);
      break;
    case 528:
      HASH_INVOKE(0x15EF510022CAF210LL, xml_parser_create_ns);
      HASH_INVOKE(0x2D41D7F8F4113210LL, sinh);
      break;
    case 529:
      HASH_INVOKE(0x438CD1A0327A8211LL, apc_define_constants);
      break;
    case 532:
      HASH_INVOKE(0x7D85E9FACB92D214LL, magickgetimageblob);
      break;
    case 536:
      HASH_INVOKE(0x56C95225813A5218LL, memory_get_usage);
      break;
    case 538:
      HASH_INVOKE(0x72C0C89D897E721ALL, magicksetimagetype);
      break;
    case 539:
      HASH_INVOKE(0x3A90CC67D58A021BLL, hash_hmac_file);
      break;
    case 545:
      HASH_INVOKE(0x345E2BAE171FA221LL, date_sunrise);
      break;
    case 546:
      HASH_INVOKE(0x39E4E0175FADC222LL, drawskewx);
      break;
    case 550:
      HASH_INVOKE(0x007B6BD94D767226LL, hphp_splfileobject_fpassthru);
      break;
    case 551:
      HASH_INVOKE(0x5A26F00A81BA5227LL, xmlwriter_start_attribute_ns);
      break;
    case 552:
      HASH_INVOKE(0x44911AEE34D63228LL, time_sleep_until);
      break;
    case 556:
      HASH_INVOKE(0x4129FFBF3548E22CLL, mb_strpos);
      break;
    case 560:
      HASH_INVOKE(0x036A5935D9936230LL, hphp_splfileinfo_openfile);
      break;
    case 561:
      HASH_INVOKE(0x61A192D10C004231LL, magickconvolveimage);
      HASH_INVOKE(0x7C07D66F70E43231LL, mailparse_determine_best_xfer_encoding);
      break;
    case 564:
      HASH_INVOKE(0x422C51C95928A234LL, str_replace);
      break;
    case 566:
      HASH_INVOKE(0x5542AABF33A2F236LL, stream_filter_remove);
      break;
    case 568:
      HASH_INVOKE(0x695AC59F79E2A238LL, mb_encode_mimeheader);
      break;
    case 570:
      HASH_INVOKE(0x679ABBE5A08C523ALL, xml_parse_into_struct);
      break;
    case 574:
      HASH_INVOKE(0x5E54CE856B78223ELL, array_flip);
      break;
    case 576:
      HASH_INVOKE(0x0DB9DD4AE24B0240LL, base64_encode);
      break;
    case 579:
      HASH_INVOKE(0x78183A24F2ACB243LL, strtotime);
      break;
    case 584:
      HASH_INVOKE(0x7071BB6F0591E248LL, serialize);
      break;
    case 591:
      HASH_INVOKE(0x1D8FE8E68F7EA24FLL, pixelsetiteratorrow);
      break;
    case 592:
      HASH_INVOKE(0x30747B708DA1D250LL, pushdrawingwand);
      break;
    case 598:
      HASH_INVOKE(0x0384346A8857D256LL, clonemagickwand);
      break;
    case 603:
      HASH_INVOKE(0x2F8F40E95EDF925BLL, sizeof);
      break;
    case 605:
      HASH_INVOKE(0x7E6024E53AEEE25DLL, apc_delete);
      break;
    case 608:
      HASH_INVOKE(0x71D2D4757B7E4260LL, apache_request_headers);
      break;
    case 609:
      HASH_INVOKE(0x383800902035F261LL, apache_child_terminate);
      HASH_INVOKE(0x48305E8ABB8BC261LL, hphp_instanceof);
      break;
    case 610:
      HASH_INVOKE(0x63AC0EED6D946262LL, pcntl_fork);
      break;
    case 612:
      HASH_INVOKE(0x261F403C4174D264LL, posix_getsid);
      break;
    case 613:
      HASH_INVOKE(0x561DB8F1DC0BC265LL, magickseparateimagechannel);
      break;
    case 615:
      HASH_INVOKE(0x50C5488E19492267LL, mb_list_encodings_alias_names);
      HASH_INVOKE(0x38B376B9D9091267LL, xmlwriter_write_attribute);
      break;
    case 620:
      HASH_INVOKE(0x188DF1EB5FD1B26CLL, mailparse_msg_parse_file);
      break;
    case 622:
      HASH_INVOKE(0x5672949384A4F26ELL, stream_filter_register);
      break;
    case 626:
      HASH_INVOKE(0x1C65F32FF28BC272LL, pathinfo);
      break;
    case 627:
      HASH_INVOKE(0x61C991F216E85273LL, inet_ntop);
      break;
    case 634:
      HASH_INVOKE(0x39E05F957C7DD27ALL, magickgetimagedepth);
      break;
    case 636:
      HASH_INVOKE(0x0F7E33D551E0727CLL, posix_getpid);
      break;
    case 637:
      HASH_INVOKE(0x7DB57C59E607627DLL, mcrypt_generic_deinit);
      break;
    case 638:
      HASH_INVOKE(0x4111669F4862E27ELL, drawpathlinetoverticalrelative);
      break;
    case 639:
      HASH_INVOKE(0x5B94A6962F1EC27FLL, magickechoimagesblob);
      HASH_INVOKE(0x57E8781CF111727FLL, fileowner);
      break;
    case 640:
      HASH_INVOKE(0x2E54EF1891172280LL, hphp_splfileinfo_isexecutable);
      break;
    case 641:
      HASH_INVOKE(0x1765A2E5186DE281LL, socket_write);
      HASH_INVOKE(0x0881440DCF5D3281LL, magickflattenimages);
      break;
    case 643:
      HASH_INVOKE(0x4C83B098C8BDA283LL, posix_setsid);
      break;
    case 645:
      HASH_INVOKE(0x5F7DC3612050A285LL, drawsetfontweight);
      HASH_INVOKE(0x1A895A2307126285LL, openssl_pkcs7_decrypt);
      break;
    case 646:
      HASH_INVOKE(0x3A2E2C40B019E286LL, is_a);
      HASH_INVOKE(0x4F028FA6AAEEC286LL, call_user_method);
      break;
    case 647:
      HASH_INVOKE(0x27698DDEDAD6E287LL, openssl_pkey_new);
      break;
    case 656:
      HASH_INVOKE(0x04C11602C720A290LL, convert_cyr_string);
      break;
    case 660:
      HASH_INVOKE(0x4D05DD57E4052294LL, xmlwriter_output_memory);
      break;
    case 661:
      HASH_INVOKE(0x69868C648BC12295LL, apc_store);
      break;
    case 665:
      HASH_INVOKE(0x22D380E06E67E299LL, stream_encoding);
      break;
    case 666:
      HASH_INVOKE(0x68272A37CC9E729ALL, mb_strtolower);
      break;
    case 667:
      HASH_INVOKE(0x4A09634AE6DFF29BLL, fileperms);
      break;
    case 668:
      HASH_INVOKE(0x0F71D3E47044E29CLL, drawpathcurvetosmoothrelative);
      break;
    case 675:
      HASH_INVOKE(0x10E7B5A0E29CF2A3LL, bcscale);
      HASH_INVOKE(0x743EA4BF2CC8F2A3LL, mysql_field_type);
      break;
    case 678:
      HASH_INVOKE(0x73EF3A19F76872A6LL, iconv_strrpos);
      break;
    case 680:
      HASH_INVOKE(0x5409127FEDE332A8LL, exif_imagetype);
      break;
    case 685:
      HASH_INVOKE(0x35D259398CDDA2ADLL, pixelgetredquantum);
      HASH_INVOKE(0x00AB6FC4E9EE62ADLL, imagefilledrectangle);
      break;
    case 686:
      HASH_INVOKE(0x36AB9E6AA687F2AELL, xmlwriter_start_dtd_element);
      break;
    case 691:
      HASH_INVOKE(0x44530C37F2B522B3LL, drawgetstrokedasharray);
      HASH_INVOKE(0x59BB7B8078AC22B3LL, tempnam);
      break;
    case 694:
      HASH_INVOKE(0x0C4B98B47B0862B6LL, apd_echo);
      HASH_INVOKE(0x0E9C9B409F94B2B6LL, setcookie);
      break;
    case 696:
      HASH_INVOKE(0x3C6D50F3BB8102B8LL, next);
      break;
    case 698:
      HASH_INVOKE(0x4A3D2113D3DFD2BALL, newpixelwandarray);
      break;
    case 700:
      HASH_INVOKE(0x33E08846F3EB42BCLL, ldap_get_values);
      HASH_INVOKE(0x41F7E2214DDE12BCLL, mcrypt_enc_self_test);
      break;
    case 701:
      HASH_INVOKE(0x327C865E52FD12BDLL, ldap_get_values_len);
      break;
    case 702:
      HASH_INVOKE(0x72D6F9B3661AB2BELL, magickgetimage);
      break;
    case 704:
      HASH_INVOKE(0x5B7C1B74BA3452C0LL, newpixelregioniterator);
      break;
    case 707:
      HASH_INVOKE(0x446D76A95365D2C3LL, pixelgetyellow);
      break;
    case 708:
      HASH_INVOKE(0x6018C9F7DF40C2C4LL, xml_get_current_column_number);
      break;
    case 716:
      HASH_INVOKE(0x407EF03C23BF92CCLL, drawpathellipticarcabsolute);
      HASH_INVOKE(0x44273F8BA3F542CCLL, imagesx);
      break;
    case 718:
      HASH_INVOKE(0x1922D51F3E1522CELL, xmlwriter_end_dtd_attlist);
      break;
    case 719:
      HASH_INVOKE(0x4ACE27EC476632CFLL, apc_bin_dumpfile);
      break;
    case 722:
      HASH_INVOKE(0x4D9A87BD0CF742D2LL, imagepsextendfont);
      break;
    case 725:
      HASH_INVOKE(0x4D04C580CF9212D5LL, posix_getgroups);
      break;
    case 728:
      HASH_INVOKE(0x56C4896BA2FF52D8LL, drawsetstrokeopacity);
      break;
    case 730:
      HASH_INVOKE(0x5C6A85B448C352DALL, posix_uname);
      break;
    case 733:
      HASH_INVOKE(0x5F585DF7CB82E2DDLL, hphp_splfileinfo_iswritable);
      break;
    case 738:
      HASH_INVOKE(0x4AEC19D75BF652E2LL, magickremoveimage);
      break;
    case 739:
      HASH_INVOKE(0x45382D0BA5B262E3LL, mysql_get_proto_info);
      break;
    case 749:
      HASH_INVOKE(0x215E0E2EFA7422EDLL, drawgetstrokeantialias);
      break;
    case 750:
      HASH_INVOKE(0x2884B7B3252B02EELL, imagealphablending);
      break;
    case 752:
      HASH_INVOKE(0x25CA0794823AA2F0LL, openssl_csr_get_public_key);
      break;
    case 754:
      HASH_INVOKE(0x2EE56D216BB832F2LL, time_nanosleep);
      break;
    case 756:
      HASH_INVOKE(0x418EC805C5FD32F4LL, mcrypt_get_key_size);
      break;
    case 761:
      HASH_INVOKE(0x00CFD56391DF82F9LL, mysql_data_seek);
      HASH_INVOKE(0x319EF52B36AAB2F9LL, posix_isatty);
      break;
    case 763:
      HASH_INVOKE(0x4D393D30CE1112FBLL, drawpathmovetoabsolute);
      break;
    case 764:
      HASH_INVOKE(0x66D59E4DBC7382FCLL, drawscale);
      break;
    case 766:
      HASH_INVOKE(0x208B66A8731F72FELL, sem_get);
      HASH_INVOKE(0x755A9950B65472FELL, drawgetgravity);
      break;
    case 770:
      HASH_INVOKE(0x0103FE1E2C307302LL, socket_recvfrom);
      break;
    case 773:
      HASH_INVOKE(0x65D40C6B4842F305LL, clearpixelwand);
      break;
    case 774:
      HASH_INVOKE(0x689D60184DD81306LL, htmlspecialchars_decode);
      break;
    case 777:
      HASH_INVOKE(0x414038596F552309LL, magickgetversionnumber);
      HASH_INVOKE(0x47CB27E8FDB60309LL, array_fill);
      break;
    case 779:
      HASH_INVOKE(0x0C6F751411F5E30BLL, strrev);
      HASH_INVOKE(0x65F586C35A88030BLL, magickresizeimage);
      break;
    case 780:
      HASH_INVOKE(0x553940FCE453330CLL, hphp_splfileobject_getmaxlinelen);
      break;
    case 789:
      HASH_INVOKE(0x4F1E663AE18FD315LL, msg_remove_queue);
      break;
    case 798:
      HASH_INVOKE(0x27FF9DB54420531ELL, xml_error_string);
      break;
    case 804:
      HASH_INVOKE(0x5E5E4F998C8E7324LL, pcntl_wifexited);
      break;
    case 808:
      HASH_INVOKE(0x73FEB3BF75FFB328LL, ctype_space);
      break;
    case 811:
      HASH_INVOKE(0x2BDB1EE3869E132BLL, restore_error_handler);
      break;
    case 815:
      HASH_INVOKE(0x7DD6461A6290B32FLL, mysql_real_escape_string);
      break;
    case 816:
      HASH_INVOKE(0x300F758BB0E16330LL, mysql_num_rows);
      HASH_INVOKE(0x1601C1826E90B330LL, strptime);
      break;
    case 817:
      HASH_INVOKE(0x00DAFE46631AE331LL, stream_set_timeout);
      break;
    case 818:
      HASH_INVOKE(0x037055C215998332LL, bcsub);
      break;
    case 824:
      HASH_INVOKE(0x549D51040C250338LL, cleardrawingwand);
      break;
    case 825:
      HASH_INVOKE(0x48D57F17C5132339LL, drawgetclippath);
      break;
    case 826:
      HASH_INVOKE(0x34DDF0DFC546033ALL, xbox_task_start);
      break;
    case 829:
      HASH_INVOKE(0x4E166ECE0EC6A33DLL, openssl_pkey_get_public);
      break;
    case 830:
      HASH_INVOKE(0x758EA7E9AA45C33ELL, xmlwriter_end_document);
      break;
    case 835:
      HASH_INVOKE(0x6794CFB89DEEF343LL, curl_exec);
      break;
    case 836:
      HASH_INVOKE(0x1A9DC76AB74F6344LL, openssl_verify);
      break;
    case 837:
      HASH_INVOKE(0x45FAE3D08E96B345LL, curl_errno);
      break;
    case 842:
      HASH_INVOKE(0x208BB4C3C0BA534ALL, xmlwriter_write_dtd_element);
      break;
    case 843:
      HASH_INVOKE(0x57A9E8878872D34BLL, parse_ini_file);
      break;
    case 844:
      HASH_INVOKE(0x0644E5FB91C8134CLL, array_udiff);
      break;
    case 845:
      HASH_INVOKE(0x5998E61D600D634DLL, drawaffine);
      break;
    case 847:
      HASH_INVOKE(0x5C8B3B9FA833934FLL, ldap_first_attribute);
      break;
    case 849:
      HASH_INVOKE(0x2B422699C3A57351LL, sha1);
      break;
    case 852:
      HASH_INVOKE(0x501F4DF5C8997354LL, hphp_get_property);
      HASH_INVOKE(0x77EB4D2F5BDDB354LL, magickgetimageresolution);
      break;
    case 858:
      HASH_INVOKE(0x4BF5DEBDB76EC35ALL, mcrypt_enc_get_iv_size);
      HASH_INVOKE(0x0E0C79E42812235ALL, imagepng);
      break;
    case 859:
      HASH_INVOKE(0x1AC48909BEEF935BLL, func_get_arg);
      break;
    case 861:
      HASH_INVOKE(0x54C3E9AB6FB8E35DLL, magickswirlimage);
      break;
    case 863:
      HASH_INVOKE(0x280DE04F84FB235FLL, popdrawingwand);
      break;
    case 869:
      HASH_INVOKE(0x68DBF8ABB26A8365LL, hphp_directoryiterator_rewind);
      break;
    case 870:
      HASH_INVOKE(0x4EF3469306E44366LL, floatval);
      break;
    case 871:
      HASH_INVOKE(0x4810A9774785C367LL, posix_getpgrp);
      break;
    case 872:
      HASH_INVOKE(0x5D406167C673D368LL, magickcompareimages);
      break;
    case 873:
      HASH_INVOKE(0x6C715D7DD63DA369LL, is_integer);
      break;
    case 878:
      HASH_INVOKE(0x7CE90898E882F36ELL, pixelsetyellow);
      break;
    case 882:
      HASH_INVOKE(0x7107AE03689F5372LL, hphp_invoke);
      break;
    case 889:
      HASH_INVOKE(0x5ED8901DB5D14379LL, magickcharcoalimage);
      break;
    case 890:
      HASH_INVOKE(0x69EA8DC005FEC37ALL, hphp_splfileobject_fwrite);
      break;
    case 900:
      HASH_INVOKE(0x44C1BC500D175384LL, wandgetexception);
      break;
    case 901:
      HASH_INVOKE(0x7C5CA3E2E3C8F385LL, magickflipimage);
      HASH_INVOKE(0x57554E082E0ED385LL, pcntl_exec);
      HASH_INVOKE(0x0B0B8765A4CDD385LL, hphp_splfileobject_fgets);
      break;
    case 902:
      HASH_INVOKE(0x589E24C7664D5386LL, doubleval);
      break;
    case 904:
      HASH_INVOKE(0x791E946E04F50388LL, magicksetresourcelimit);
      break;
    case 907:
      HASH_INVOKE(0x73A3F87C0A56238BLL, stat);
      break;
    case 908:
      HASH_INVOKE(0x7F18BA1FBD95B38CLL, hphp_directoryiterator_next);
      break;
    case 909:
      HASH_INVOKE(0x4127DE142CD4A38DLL, xml_get_error_code);
      break;
    case 913:
      HASH_INVOKE(0x25FA64929C619391LL, asin);
      break;
    case 914:
      HASH_INVOKE(0x2052D8D4822EF392LL, is_subclass_of);
      HASH_INVOKE(0x2395B0A85E292392LL, hphp_splfileobject_flock);
      break;
    case 916:
      HASH_INVOKE(0x269A220896FD2394LL, deg2rad);
      HASH_INVOKE(0x36953788781F4394LL, mailparse_msg_extract_part);
      break;
    case 917:
      HASH_INVOKE(0x7B0552A224E27395LL, bcsqrt);
      HASH_INVOKE(0x422599B9E8AC0395LL, stream_bucket_make_writeable);
      break;
    case 918:
      HASH_INVOKE(0x15EC64198D93C396LL, openssl_pkcs12_read);
      break;
    case 919:
      HASH_INVOKE(0x1D2C305EA5C82397LL, idn_to_utf8);
      break;
    case 920:
      HASH_INVOKE(0x215547858BA7E398LL, hphp_recursiveiteratoriterator___construct);
      break;
    case 921:
      HASH_INVOKE(0x66DA89629BA5D399LL, posix_getgrgid);
      break;
    case 922:
      HASH_INVOKE(0x0CC562CBD773639ALL, i18n_loc_get_default);
      break;
    case 923:
      HASH_INVOKE(0x25DF28703309C39BLL, idate);
      HASH_INVOKE(0x5B33B55D4B7E339BLL, fpassthru);
      break;
    case 926:
      HASH_INVOKE(0x27AD0D17AA7FB39ELL, ldap_set_rebind_proc);
      break;
    case 927:
      HASH_INVOKE(0x57E72C21F67D039FLL, user_error);
      HASH_INVOKE(0x0368F1779E3AE39FLL, mysql_field_table);
      break;
    case 929:
      HASH_INVOKE(0x5C29B6D7973903A1LL, proc_nice);
      break;
    case 930:
      HASH_INVOKE(0x0207E332D629A3A2LL, mailparse_msg_get_structure);
      HASH_INVOKE(0x0A2A4AA078D433A2LL, hexdec);
      break;
    case 932:
      HASH_INVOKE(0x1676FB393F8493A4LL, constant);
      break;
    case 934:
      HASH_INVOKE(0x40E0D496EE29B3A6LL, call_user_func_array);
      break;
    case 936:
      HASH_INVOKE(0x4120B8157ED413A8LL, i18n_loc_set_strength);
      break;
    case 937:
      HASH_INVOKE(0x03A023F87CB923A9LL, oci_field_name);
      break;
    case 938:
      HASH_INVOKE(0x3238A5BD362443AALL, escapeshellcmd);
      break;
    case 946:
      HASH_INVOKE(0x3DB7EBC0B670C3B2LL, magicksetimageredprimary);
      break;
    case 947:
      HASH_INVOKE(0x61720D771D1A23B3LL, posix_getpwnam);
      break;
    case 948:
      HASH_INVOKE(0x2788C40C6AB4E3B4LL, oci_free_descriptor);
      break;
    case 950:
      HASH_INVOKE(0x6C07640F7C5BD3B6LL, imagettfbbox);
      break;
    case 955:
      HASH_INVOKE(0x5A3F5AAD1B13A3BBLL, is_executable);
      break;
    case 956:
      HASH_INVOKE(0x0629158C42C893BCLL, compact);
      break;
    case 957:
      HASH_INVOKE(0x60294C2616F6A3BDLL, mcrypt_enc_get_supported_key_sizes);
      break;
    case 958:
      HASH_INVOKE(0x49A34964289453BELL, eregi);
      break;
    case 959:
      HASH_INVOKE(0x0E38CDC93E5893BFLL, magicksetimagemattecolor);
      break;
    case 968:
      HASH_INVOKE(0x4D100C70E86593C8LL, stream_set_write_buffer);
      HASH_INVOKE(0x3101CE70BA49A3C8LL, error_reporting);
      break;
    case 971:
      HASH_INVOKE(0x0173CC6FACAB93CBLL, quotemeta);
      HASH_INVOKE(0x4C3B6BE9112E63CBLL, str_split);
      break;
    case 972:
      HASH_INVOKE(0x50C88817090C63CCLL, pcntl_wait);
      break;
    case 974:
      HASH_INVOKE(0x4F9F68F60FD7A3CELL, drawgetfillrule);
      HASH_INVOKE(0x02BEFBEE8287D3CELL, get_magic_quotes_runtime);
      break;
    case 978:
      HASH_INVOKE(0x67C155632E5373D2LL, mailparse_msg_create);
      break;
    case 979:
      HASH_INVOKE(0x734FD402E190E3D3LL, evhttp_async_get);
      HASH_INVOKE(0x0A8D4FAF266973D3LL, bcpow);
      break;
    case 983:
      HASH_INVOKE(0x7677A58EF5D593D7LL, oci_parse);
      HASH_INVOKE(0x382B5B1EF00153D7LL, imagecreatefrompng);
      break;
    case 996:
      HASH_INVOKE(0x7E7718CC939D63E4LL, setrawcookie);
      break;
    case 1000:
      HASH_INVOKE(0x6BB9D669DDB703E8LL, xml_get_current_byte_index);
      HASH_INVOKE(0x4A3127C309B0C3E8LL, drawsetstrokelinecap);
      break;
    case 1002:
      HASH_INVOKE(0x0D3C8F00B0C633EALL, inet_pton);
      HASH_INVOKE(0x6DA49696220FE3EALL, mailparse_rfc822_parse_addresses);
      break;
    case 1003:
      HASH_INVOKE(0x1DAE0831CECB63EBLL, ob_get_clean);
      break;
    case 1006:
      HASH_INVOKE(0x598472448937E3EELL, magickqueryfontmetrics);
      break;
    case 1009:
      HASH_INVOKE(0x5EFE291585A713F1LL, method_exists);
      break;
    case 1010:
      HASH_INVOKE(0x0FE12E46BC9853F2LL, stream_filter_append);
      HASH_INVOKE(0x41A19AE18BC8B3F2LL, curl_error);
      HASH_INVOKE(0x696241660648B3F2LL, magickwhitethresholdimage);
      break;
    case 1012:
      HASH_INVOKE(0x26D53A77483EF3F4LL, drawbezier);
      break;
    case 1013:
      HASH_INVOKE(0x34159AB5FE8FC3F5LL, oci_internal_debug);
      break;
    case 1015:
      HASH_INVOKE(0x43F22CB4E3E8F3F7LL, apache_note);
      break;
    case 1016:
      HASH_INVOKE(0x4C024573FCD5B3F8LL, var_dump);
      HASH_INVOKE(0x514EA9C8FF5B33F8LL, posix_getrlimit);
      break;
    case 1018:
      HASH_INVOKE(0x1B217E78CBC713FALL, zend_thread_id);
      break;
    case 1025:
      HASH_INVOKE(0x36B9C440B1881401LL, fmod);
      HASH_INVOKE(0x3DCB1C92B5864401LL, gzrewind);
      break;
    case 1028:
      HASH_INVOKE(0x2B12B0E9109D0404LL, iptcembed);
      break;
    case 1033:
      HASH_INVOKE(0x2E57E06900594409LL, xbox_send_message);
      break;
    case 1034:
      HASH_INVOKE(0x6DC61C51FA1D340ALL, show_source);
      break;
    case 1035:
      HASH_INVOKE(0x6C2CE092B900D40BLL, hphp_splfileinfo___construct);
      break;
    case 1037:
      HASH_INVOKE(0x2939C5BAE0C4A40DLL, nl2br);
      HASH_INVOKE(0x267529454569840DLL, ob_flush);
      HASH_INVOKE(0x152C7161567F940DLL, func_num_args);
      HASH_INVOKE(0x002CCCD877D9640DLL, drawpathclose);
      break;
    case 1043:
      HASH_INVOKE(0x56EC1A6732D07413LL, drawgetfontsize);
      HASH_INVOKE(0x20C24D873DC65413LL, openssl_csr_get_subject);
      break;
    case 1051:
      HASH_INVOKE(0x47279C717370B41BLL, acos);
      break;
    case 1054:
      HASH_INVOKE(0x3E4E7C561D3A541ELL, fgetss);
      break;
    case 1055:
      HASH_INVOKE(0x301963016A91741FLL, hphp_stats);
      break;
    case 1059:
      HASH_INVOKE(0x4C9108B5A5807423LL, drawsetfillcolor);
      break;
    case 1062:
      HASH_INVOKE(0x21EFB0B9D1514426LL, magicksetpassphrase);
      HASH_INVOKE(0x161D8EA3339AB426LL, apc_cas);
      break;
    case 1068:
      HASH_INVOKE(0x12D324CC744BF42CLL, pixelgetcolorasstring);
      break;
    case 1069:
      HASH_INVOKE(0x333D1E2E28B0942DLL, imagejpeg);
      HASH_INVOKE(0x2A5A519E4BFE442DLL, mb_eregi);
      break;
    case 1071:
      HASH_INVOKE(0x316F2725AC15042FLL, stream_resolve_include_path);
      break;
    case 1074:
      HASH_INVOKE(0x71C6E38BC56CE432LL, stream_wrapper_register);
      break;
    case 1075:
      HASH_INVOKE(0x6829094421CDB433LL, touch);
      break;
    case 1077:
      HASH_INVOKE(0x75DAFEF5BFEF1435LL, imagesetstyle);
      HASH_INVOKE(0x044386A0E8B25435LL, drawgetclipunits);
      break;
    case 1079:
      HASH_INVOKE(0x1AAF02CF6DEBB437LL, magickdeconstructimages);
      break;
    case 1081:
      HASH_INVOKE(0x34C52EF423EFD439LL, proc_open);
      break;
    case 1082:
      HASH_INVOKE(0x5019A1FBF377C43ALL, imagepsbbox);
      break;
    case 1084:
      HASH_INVOKE(0x59ECE01C7629643CLL, mysql_drop_db);
      break;
    case 1088:
      HASH_INVOKE(0x5247425ED698B440LL, hphp_thread_is_warmup_enabled);
      break;
    case 1089:
      HASH_INVOKE(0x158E2271E381C441LL, hash_file);
      HASH_INVOKE(0x05892E3C5B9EB441LL, closedir);
      break;
    case 1090:
      HASH_INVOKE(0x3F869126D0336442LL, trigger_error);
      break;
    case 1105:
      HASH_INVOKE(0x7539134E1CC61451LL, xmlwriter_start_cdata);
      break;
    case 1106:
      HASH_INVOKE(0x1056EF1C14D2A452LL, socket_connect);
      break;
    case 1116:
      HASH_INVOKE(0x436AB52B2099145CLL, ldap_close);
      break;
    case 1117:
      HASH_INVOKE(0x0246AF48CD31245DLL, count_chars);
      break;
    case 1118:
      HASH_INVOKE(0x0ED191E71A60545ELL, magicksetfirstiterator);
      break;
    case 1125:
      HASH_INVOKE(0x05D72365192CE465LL, fwrite);
      HASH_INVOKE(0x406A1404F48E4465LL, posix_getuid);
      break;
    case 1130:
      HASH_INVOKE(0x32643AE461D3F46ALL, mailparse_stream_encode);
      break;
    case 1132:
      HASH_INVOKE(0x07D959A8C0CF546CLL, stream_wrapper_unregister);
      HASH_INVOKE(0x4F39BD300305746CLL, hphp_splfileobject_key);
      break;
    case 1133:
      HASH_INVOKE(0x738D381800CE946DLL, ldap_parse_result);
      HASH_INVOKE(0x5229C0069FD7D46DLL, vfprintf);
      break;
    case 1136:
      HASH_INVOKE(0x0C626F268F120470LL, __halt_compiler);
      break;
    case 1139:
      HASH_INVOKE(0x0F8F276A48900473LL, drawgetstrokelinecap);
      break;
    case 1141:
      HASH_INVOKE(0x268706C46202C475LL, sem_acquire);
      break;
    case 1143:
      HASH_INVOKE(0x18666906A8001477LL, array_diff_assoc);
      break;
    case 1144:
      HASH_INVOKE(0x080594ABE715B478LL, hphp_splfileobject_current);
      HASH_INVOKE(0x6497CC8295DDB478LL, fb_thrift_unserialize);
      break;
    case 1145:
      HASH_INVOKE(0x4859AF715D5A3479LL, magickmagnifyimage);
      break;
    case 1148:
      HASH_INVOKE(0x1A08C578AD3BC47CLL, apache_response_headers);
      HASH_INVOKE(0x2FA7269AB0E1147CLL, mysql_field_seek);
      break;
    case 1150:
      HASH_INVOKE(0x1D583AA4F7F6547ELL, drawpathlinetorelative);
      HASH_INVOKE(0x0AC36D9F961B247ELL, newpixeliterator);
      break;
    case 1151:
      HASH_INVOKE(0x68AE04B02253B47FLL, mb_parse_str);
      break;
    case 1154:
      HASH_INVOKE(0x4590C853C2027482LL, magickembossimage);
      break;
    case 1157:
      HASH_INVOKE(0x250DD3D58EA37485LL, gmstrftime);
      HASH_INVOKE(0x61499C92F4FBA485LL, hphp_splfileobject_fgetc);
      break;
    case 1161:
      HASH_INVOKE(0x4F7EAF5B37663489LL, magickgetimageredprimary);
      break;
    case 1162:
      HASH_INVOKE(0x7E88764A1DE8548ALL, drawgetstrokewidth);
      break;
    case 1163:
      HASH_INVOKE(0x5860ACF621DD948BLL, is_file);
      break;
    case 1165:
      HASH_INVOKE(0x23511F83C2BC548DLL, header);
      HASH_INVOKE(0x275D127C87EF048DLL, mysql_db_query);
      break;
    case 1167:
      HASH_INVOKE(0x43672229728A648FLL, drawpushpattern);
      break;
    case 1171:
      HASH_INVOKE(0x56377FCC2447D493LL, magicksetimagepixels);
      break;
    case 1175:
      HASH_INVOKE(0x353E2A635A47F497LL, evhttp_get);
      HASH_INVOKE(0x5388045C2D13D497LL, mysql_num_fields);
      break;
    case 1181:
      HASH_INVOKE(0x7A59813AC331449DLL, mb_ereg_search_regs);
      break;
    case 1183:
      HASH_INVOKE(0x2B8C2AFB154E449FLL, oci_num_fields);
      HASH_INVOKE(0x7FF66005524E649FLL, drawgettextdecoration);
      break;
    case 1188:
      HASH_INVOKE(0x6EC476E42A53A4A4LL, ldap_err2str);
      break;
    case 1189:
      HASH_INVOKE(0x18BE9B1C2DE6D4A5LL, imagexbm);
      break;
    case 1193:
      HASH_INVOKE(0x386378F2BA3234A9LL, magickevaluateimage);
      break;
    case 1196:
      HASH_INVOKE(0x245AA2790C87C4ACLL, image_type_to_mime_type);
      HASH_INVOKE(0x6E8FFA56842304ACLL, drawgetfont);
      break;
    case 1197:
      HASH_INVOKE(0x3D98ACFCEBB764ADLL, hphp_set_property);
      break;
    case 1199:
      HASH_INVOKE(0x42463E7E5C3434AFLL, mb_strrichr);
      HASH_INVOKE(0x6AC751181531F4AFLL, simplexml_load_string);
      break;
    case 1200:
      HASH_INVOKE(0x0E11D317044974B0LL, magickgetnumberimages);
      HASH_INVOKE(0x3AF65A9F3653E4B0LL, addslashes);
      break;
    case 1201:
      HASH_INVOKE(0x060619D7A1B5F4B1LL, checkdate);
      break;
    case 1203:
      HASH_INVOKE(0x57034CAD772AF4B3LL, magickgetimagechannelmean);
      break;
    case 1204:
      HASH_INVOKE(0x00621C58E54D44B4LL, hphp_recursiveiteratoriterator_key);
      break;
    case 1206:
      HASH_INVOKE(0x12A9166E68DCF4B6LL, pixelgetgreen);
      break;
    case 1207:
      HASH_INVOKE(0x7EEBC81AF9BC54B7LL, xml_parser_free);
      break;
    case 1209:
      HASH_INVOKE(0x5351290CD139A4B9LL, mb_strrpos);
      break;
    case 1210:
      HASH_INVOKE(0x6B49D11E633274BALL, fopen);
      break;
    case 1213:
      HASH_INVOKE(0x35BE8F6E7726C4BDLL, dechex);
      HASH_INVOKE(0x5BA371A93F60F4BDLL, use_soap_error_handler);
      break;
    case 1214:
      HASH_INVOKE(0x57278846B8B0E4BELL, ldap_count_entries);
      break;
    case 1215:
      HASH_INVOKE(0x01681C307C5AE4BFLL, strtoupper);
      break;
    case 1219:
      HASH_INVOKE(0x7AAC29849263C4C3LL, getprotobyname);
      break;
    case 1220:
      HASH_INVOKE(0x67EADCF4E81084C4LL, mb_ereg);
      HASH_INVOKE(0x4A24DB9D6B0334C4LL, hphp_recursivedirectoryiterator_next);
      break;
    case 1221:
      HASH_INVOKE(0x34A38DDF2CD914C5LL, long2ip);
      break;
    case 1222:
      HASH_INVOKE(0x651F7FBBA90604C6LL, magickgetimageindex);
      break;
    case 1224:
      HASH_INVOKE(0x1B8BBFC882FDB4C8LL, magicktintimage);
      break;
    case 1230:
      HASH_INVOKE(0x60783C20BF7724CELL, mailparse_msg_free);
      break;
    case 1231:
      HASH_INVOKE(0x72DECE786967A4CFLL, magickpreviousimage);
      break;
    case 1232:
      HASH_INVOKE(0x7DF31BD0D23FD4D0LL, oci_num_rows);
      break;
    case 1233:
      HASH_INVOKE(0x29EE24C41FD3D4D1LL, mysql_field_name);
      break;
    case 1238:
      HASH_INVOKE(0x19ECDD5A937DD4D6LL, mailparse_msg_get_part_data);
      break;
    case 1239:
      HASH_INVOKE(0x215403F1E335C4D7LL, magicksolarizeimage);
      break;
    case 1240:
      HASH_INVOKE(0x2532EB687D51E4D8LL, unregister_tick_function);
      HASH_INVOKE(0x14BF763DDDC014D8LL, imagepsencodefont);
      HASH_INVOKE(0x56B908FC91C834D8LL, magickflopimage);
      HASH_INVOKE(0x1301F911ED6D54D8LL, is_nan);
      HASH_INVOKE(0x575C5AE3D2A694D8LL, ob_end_clean);
      break;
    case 1247:
      HASH_INVOKE(0x747A7F585CD694DFLL, zend_version);
      HASH_INVOKE(0x2E5E5A0FC3B5C4DFLL, xml_set_character_data_handler);
      break;
    case 1248:
      HASH_INVOKE(0x340A51AE22A924E0LL, reset);
      break;
    case 1251:
      HASH_INVOKE(0x7D57A0D72D6254E3LL, ob_implicit_flush);
      break;
    case 1262:
      HASH_INVOKE(0x5895ADDD91F354EELL, hphp_thread_set_warmup_enabled);
      break;
    case 1265:
      HASH_INVOKE(0x65BD541EAB38E4F1LL, mysql_close);
      break;
    case 1268:
      HASH_INVOKE(0x436B36C5EB8DB4F4LL, mcrypt_generic);
      break;
    case 1269:
      HASH_INVOKE(0x528AC8D252D224F5LL, log10);
      HASH_INVOKE(0x112A0ACDD8B9D4F5LL, mb_list_mime_names);
      break;
    case 1272:
      HASH_INVOKE(0x011006D90D79E4F8LL, mysql_errno);
      break;
    case 1277:
      HASH_INVOKE(0x002387F1D23B44FDLL, mcrypt_list_modes);
      break;
    case 1287:
      HASH_INVOKE(0x197A5D237BD4C507LL, mb_ereg_search_getpos);
      break;
    case 1288:
      HASH_INVOKE(0x63A08D6AD1209508LL, magickgetexception);
      break;
    case 1291:
      HASH_INVOKE(0x71DCF11E3640C50BLL, hphp_directoryiterator_valid);
      break;
    case 1295:
      HASH_INVOKE(0x5A66CCB3D924450FLL, xml_parser_create);
      break;
    case 1297:
      HASH_INVOKE(0x09D5355CA8198511LL, mb_internal_encoding);
      HASH_INVOKE(0x3C0304A55503D511LL, magickgetimageiterations);
      break;
    case 1299:
      HASH_INVOKE(0x772E8BF114FEF513LL, eregi_replace);
      break;
    case 1300:
      HASH_INVOKE(0x100385A0988FD514LL, magickgetfilename);
      break;
    case 1314:
      HASH_INVOKE(0x7DA98E0379D33522LL, chdir);
      break;
    case 1316:
      HASH_INVOKE(0x28E724EDE0BB6524LL, mb_strcut);
      break;
    case 1317:
      HASH_INVOKE(0x230FE1D6EC599525LL, link);
      break;
    case 1318:
      HASH_INVOKE(0x57DDA4C3F7FF8526LL, fputcsv);
      break;
    case 1319:
      HASH_INVOKE(0x6B2B942CAF1A2527LL, array_shift);
      break;
    case 1324:
      HASH_INVOKE(0x1AB55BBA0967952CLL, mb_convert_variables);
      break;
    case 1327:
      HASH_INVOKE(0x6770E2559C9A152FLL, openssl_private_decrypt);
      break;
    case 1329:
      HASH_INVOKE(0x6776C27C6123D531LL, dl);
      break;
    case 1330:
      HASH_INVOKE(0x6193A26936F4D532LL, disk_total_space);
      break;
    case 1331:
      HASH_INVOKE(0x313D2A505076A533LL, dir);
      break;
    case 1333:
      HASH_INVOKE(0x6C87406DDC0AB535LL, mcrypt_ecb);
      break;
    case 1334:
      HASH_INVOKE(0x0E80D04691227536LL, eval);
      break;
    case 1335:
      HASH_INVOKE(0x557C72DE98679537LL, hash_update_stream);
      HASH_INVOKE(0x175B86BCB3124537LL, magickgetexceptionstring);
      break;
    case 1337:
      HASH_INVOKE(0x3C88F0FAC3EDD539LL, phpversion);
      break;
    case 1340:
      HASH_INVOKE(0x5CA55E62F2A5953CLL, drawgetstrokeopacity);
      break;
    case 1341:
      HASH_INVOKE(0x0F32841DBF7A053DLL, fb_crossall_query);
      break;
    case 1342:
      HASH_INVOKE(0x36A80B48E08B753ELL, implode);
      break;
    case 1346:
      HASH_INVOKE(0x59A44591E67D4542LL, drawrender);
      break;
    case 1347:
      HASH_INVOKE(0x20E2B1D920122543LL, die);
      HASH_INVOKE(0x0962EACAE0F0B543LL, hphp_splfileinfo_getlinktarget);
      break;
    case 1348:
      HASH_INVOKE(0x4D397FE5D0C0B544LL, magickmedianfilterimage);
      break;
    case 1350:
      HASH_INVOKE(0x12A739BE0ED32546LL, ignore_user_abort);
      HASH_INVOKE(0x081F76AC889BC546LL, getrusage);
      break;
    case 1352:
      HASH_INVOKE(0x0AD3BFAB5F780548LL, magickcoalesceimages);
      break;
    case 1355:
      HASH_INVOKE(0x40CE61115E11154BLL, msg_stat_queue);
      break;
    case 1357:
      HASH_INVOKE(0x0F0702D91EAFB54DLL, drawgettextantialias);
      HASH_INVOKE(0x1B9E769FFEC3C54DLL, pcntl_wtermsig);
      break;
    case 1359:
      HASH_INVOKE(0x063200B5AAFEC54FLL, mysql_thread_id);
      break;
    case 1370:
      HASH_INVOKE(0x268EE73DB2EA555ALL, get_object_vars);
      break;
    case 1372:
      HASH_INVOKE(0x5749AD20CAFCD55CLL, pixelgetbluequantum);
      break;
    case 1379:
      HASH_INVOKE(0x1B1B2D70792D9563LL, mysql_get_client_info);
      break;
    case 1382:
      HASH_INVOKE(0x6E2FDBD28F895566LL, timezone_abbreviations_list);
      HASH_INVOKE(0x3DA2058E5C540566LL, spliti);
      break;
    case 1386:
      HASH_INVOKE(0x74599147803DC56ALL, magickgetstringwidth);
      break;
    case 1387:
      HASH_INVOKE(0x0DE86977367F656BLL, register_shutdown_function);
      break;
    case 1390:
      HASH_INVOKE(0x2A1F1B52160DE56ELL, zend_logo_guid);
      break;
    case 1391:
      HASH_INVOKE(0x016722439BBA756FLL, filetype);
      break;
    case 1392:
      HASH_INVOKE(0x13D0427F3BB3E570LL, get_declared_interfaces);
      HASH_INVOKE(0x21B3935EB3140570LL, mysql_fetch_object);
      break;
    case 1393:
      HASH_INVOKE(0x2AD3361DE8B1D571LL, pcntl_signal_dispatch);
      break;
    case 1396:
      HASH_INVOKE(0x636C871213F37574LL, mcrypt_encrypt);
      break;
    case 1399:
      HASH_INVOKE(0x412521E7ADB21577LL, iconv_mime_decode_headers);
      HASH_INVOKE(0x1E154D823451B577LL, magicksetresolution);
      break;
    case 1400:
      HASH_INVOKE(0x588DE7449C8E0578LL, oci_connect);
      break;
    case 1401:
      HASH_INVOKE(0x1DC8A386E219C579LL, ldap_add);
      break;
    case 1405:
      HASH_INVOKE(0x78EDB608B02A857DLL, join);
      HASH_INVOKE(0x22E08DEDF360057DLL, pixelsetmagenta);
      break;
    case 1406:
      HASH_INVOKE(0x31529E9BCA1E157ELL, shm_remove);
      HASH_INVOKE(0x132776D93181E57ELL, ldap_set_option);
      break;
    case 1410:
      HASH_INVOKE(0x02688986D5D76582LL, magickspreadimage);
      HASH_INVOKE(0x0B1F0EB755BDB582LL, ispixeliterator);
      break;
    case 1411:
      HASH_INVOKE(0x3B2CD86F5DB72583LL, magickblackthresholdimage);
      break;
    case 1419:
      HASH_INVOKE(0x3A34B44E4C51C58BLL, xml_set_element_handler);
      break;
    case 1420:
      HASH_INVOKE(0x560C2F71978CE58CLL, shm_put_var);
      break;
    case 1426:
      HASH_INVOKE(0x3E9519FE856C4592LL, curl_multi_init);
      HASH_INVOKE(0x5464E148E8A0C592LL, get_extension_funcs);
      HASH_INVOKE(0x7F65501600346592LL, mcrypt_get_block_size);
      break;
    case 1427:
      HASH_INVOKE(0x0F5984B8A7FD8593LL, hphp_splfileinfo_getperms);
      break;
    case 1431:
      HASH_INVOKE(0x513787A813DB0597LL, date_date_set);
      break;
    case 1433:
      HASH_INVOKE(0x12F502A88E0AA599LL, magickcompositeimage);
      break;
    case 1434:
      HASH_INVOKE(0x77F1EDE7D5EF759ALL, apc_cache_info);
      break;
    case 1435:
      HASH_INVOKE(0x37D003B09D0C759BLL, stream_get_contents);
      break;
    case 1440:
      HASH_INVOKE(0x20502FCACBB9F5A0LL, convert_uuencode);
      break;
    case 1441:
      HASH_INVOKE(0x297690F3A63335A1LL, magickrotateimage);
      break;
    case 1444:
      HASH_INVOKE(0x3C014439AE5D75A4LL, magickgetcharheight);
      break;
    case 1448:
      HASH_INVOKE(0x4FBB1F662399A5A8LL, is_soap_fault);
      break;
    case 1451:
      HASH_INVOKE(0x79E0380A18A345ABLL, apache_get_modules);
      break;
    case 1452:
      HASH_INVOKE(0x763BA2B1C60A55ACLL, pixelgetalphaquantum);
      break;
    case 1453:
      HASH_INVOKE(0x4110AF96B98B25ADLL, gzeof);
      break;
    case 1455:
      HASH_INVOKE(0x1636FBA5043CF5AFLL, ldap_error);
      break;
    case 1459:
      HASH_INVOKE(0x001DBE44BC0B55B3LL, magicksetimagecolormapcolor);
      break;
    case 1461:
      HASH_INVOKE(0x3F9C5B4708FC55B5LL, timezone_name_get);
      HASH_INVOKE(0x5EFE573046B565B5LL, mcrypt_module_close);
      break;
    case 1466:
      HASH_INVOKE(0x05B8EB2C515885BALL, vprintf);
      break;
    case 1472:
      HASH_INVOKE(0x61465CD8C67905C0LL, openssl_pkey_free);
      break;
    case 1473:
      HASH_INVOKE(0x7731B90FB7C975C1LL, magickremoveimageprofile);
      break;
    case 1478:
      HASH_INVOKE(0x3B3D5CE69B1565C6LL, mcrypt_module_is_block_mode);
      break;
    case 1481:
      HASH_INVOKE(0x75B299F5E35A95C9LL, mb_strwidth);
      HASH_INVOKE(0x60F8818C0F38D5C9LL, hphp_directoryiterator___tostring);
      break;
    case 1483:
      HASH_INVOKE(0x6751946191FBE5CBLL, override_function);
      break;
    case 1484:
      HASH_INVOKE(0x2A6F86821A39C5CCLL, expm1);
      break;
    case 1487:
      HASH_INVOKE(0x5D9818B3E1C385CFLL, openssl_pkey_export_to_file);
      break;
    case 1489:
      HASH_INVOKE(0x054503DBBF5CA5D1LL, imagecopy);
      break;
    case 1492:
      HASH_INVOKE(0x2FE56B4C457AB5D4LL, ctype_graph);
      break;
    case 1493:
      HASH_INVOKE(0x43901543EA8625D5LL, curl_multi_select);
      break;
    case 1494:
      HASH_INVOKE(0x6D265875A19685D6LL, is_float);
      break;
    case 1495:
      HASH_INVOKE(0x617AD1AD708785D7LL, magickmodulateimage);
      break;
    case 1508:
      HASH_INVOKE(0x3A9643992AC805E4LL, magickdrawimage);
      break;
    case 1510:
      HASH_INVOKE(0x6FE2E44FBC44E5E6LL, magickaddnoiseimage);
      HASH_INVOKE(0x08069ECE0EA3C5E6LL, imagecopymergegray);
      break;
    case 1514:
      HASH_INVOKE(0x0B7ACBAB402015EALL, mb_send_mail);
      break;
    case 1518:
      HASH_INVOKE(0x3076D369F63E65EELL, pixelgetalpha);
      break;
    case 1524:
      HASH_INVOKE(0x1E89F15B7F2805F4LL, openssl_pkcs7_encrypt);
      HASH_INVOKE(0x459330C31956A5F4LL, vsprintf);
      break;
    case 1525:
      HASH_INVOKE(0x0D1BD0E5AF4175F5LL, drawsetfont);
      HASH_INVOKE(0x73A1F34DF95B35F5LL, get_defined_constants);
      break;
    case 1527:
      HASH_INVOKE(0x18E4CC945005E5F7LL, drawpushclippath);
      break;
    case 1528:
      HASH_INVOKE(0x7C48F6EA39B7B5F8LL, magickadaptivethresholdimage);
      break;
    case 1531:
      HASH_INVOKE(0x0FEC4ED541B7F5FBLL, magickgetimagevirtualpixelmethod);
      break;
    case 1532:
      HASH_INVOKE(0x39156C7CCE2D75FCLL, hash_update);
      break;
    case 1533:
      HASH_INVOKE(0x0C1CB24A3FC065FDLL, bcmul);
      break;
    case 1534:
      HASH_INVOKE(0x397D3C6576ED75FELL, set_include_path);
      break;
    case 1535:
      HASH_INVOKE(0x40A557CBB9FC35FFLL, mysql_tablename);
      break;
    case 1537:
      HASH_INVOKE(0x0F3403D8676C2601LL, mysql_query);
      break;
    case 1545:
      HASH_INVOKE(0x52D5698F31D12609LL, pcntl_setpriority);
      break;
    case 1555:
      HASH_INVOKE(0x36783304F63C4613LL, sscanf);
      HASH_INVOKE(0x4AC405EA2B8C4613LL, magickresetiterator);
      break;
    case 1557:
      HASH_INVOKE(0x6AD774816F8F7615LL, mb_strrchr);
      break;
    case 1558:
      HASH_INVOKE(0x66C7616225F1C616LL, pixelsetgreen);
      HASH_INVOKE(0x7FA6D13B0D38E616LL, imagegif);
      break;
    case 1561:
      HASH_INVOKE(0x6DD51BF03F003619LL, mailparse_uudecode_all);
      HASH_INVOKE(0x2F29627AF1A97619LL, shm_attach);
      break;
    case 1563:
      HASH_INVOKE(0x40DDE277D934061BLL, gzputs);
      break;
    case 1564:
      HASH_INVOKE(0x70725954DC99F61CLL, mcrypt_create_iv);
      break;
    case 1565:
      HASH_INVOKE(0x7E98B97C1B5D861DLL, magickqueryconfigureoptions);
      break;
    case 1569:
      HASH_INVOKE(0x0F71DDE51AA55621LL, hphp_output_global_state);
      break;
    case 1570:
      HASH_INVOKE(0x134550B9EB596622LL, drawgetfontstyle);
      break;
    case 1576:
      HASH_INVOKE(0x1E77B3BCF062D628LL, magickreadimage);
      break;
    case 1577:
      HASH_INVOKE(0x679B81CE06EE0629LL, bcdiv);
      break;
    case 1578:
      HASH_INVOKE(0x608EA42B08A7462ALL, linkinfo);
      break;
    case 1580:
      HASH_INVOKE(0x5CEA60D9C54A162CLL, pcntl_wifstopped);
      break;
    case 1583:
      HASH_INVOKE(0x652C331CE138362FLL, is_string);
      break;
    case 1585:
      HASH_INVOKE(0x5AD6595ACA656631LL, pixelresetiterator);
      break;
    case 1591:
      HASH_INVOKE(0x60276BC7990F9637LL, mysql_list_dbs);
      break;
    case 1595:
      HASH_INVOKE(0x391C68F2BE85E63BLL, pixelgetiteratorexceptionstring);
      break;
    case 1596:
      HASH_INVOKE(0x62DE03461EF4663CLL, symlink);
      break;
    case 1598:
      HASH_INVOKE(0x60302D15A677963ELL, ldap_free_result);
      break;
    case 1599:
      HASH_INVOKE(0x17242BC6C9C9563FLL, crypt);
      break;
    case 1606:
      HASH_INVOKE(0x4901517CB796F646LL, msg_set_queue);
      HASH_INVOKE(0x234F6A0A486E8646LL, natcasesort);
      break;
    case 1613:
      HASH_INVOKE(0x4FAA0B35DDAB364DLL, oci_statement_type);
      break;
    case 1614:
      HASH_INVOKE(0x7E978C38D741664ELL, fgetcsv);
      HASH_INVOKE(0x769E5C6A5369F64ELL, ob_list_handlers);
      break;
    case 1617:
      HASH_INVOKE(0x5F3DA61B6506A651LL, oci_error);
      break;
    case 1618:
      HASH_INVOKE(0x03066277F647E652LL, hphp_splfileobject_ftell);
      break;
    case 1621:
      HASH_INVOKE(0x629EDDC1E74ED655LL, array_uintersect_assoc);
      HASH_INVOKE(0x6BE3B1277BBF8655LL, oci_pconnect);
      break;
    case 1628:
      HASH_INVOKE(0x381BBFEABFEC865CLL, libxml_get_last_error);
      break;
    case 1630:
      HASH_INVOKE(0x205BB9CFF397B65ELL, ldap_mod_replace);
      break;
    case 1631:
      HASH_INVOKE(0x1355AFB40AB1165FLL, drawsetfontstyle);
      break;
    case 1636:
      HASH_INVOKE(0x5B0759F776EC2664LL, newdrawingwand);
      break;
    case 1637:
      HASH_INVOKE(0x08A6AD20C2C5A665LL, hphp_set_static_property);
      break;
    case 1639:
      HASH_INVOKE(0x557A08AC57724667LL, hphp_splfileinfo_getpathinfo);
      break;
    case 1647:
      HASH_INVOKE(0x7D68CADB8069466FLL, magickaverageimages);
      break;
    case 1651:
      HASH_INVOKE(0x126FC82D358E9673LL, magicksetimagevirtualpixelmethod);
      break;
    case 1655:
      HASH_INVOKE(0x001F23CAC36E3677LL, magickgetimagescene);
      break;
    case 1658:
      HASH_INVOKE(0x583AA7498A40E67ALL, drawgetcliprule);
      break;
    case 1659:
      HASH_INVOKE(0x5BCED33A57D9B67BLL, intval);
      break;
    case 1661:
      HASH_INVOKE(0x69616E2817E1967DLL, fileinode);
      break;
    case 1662:
      HASH_INVOKE(0x20B9799C1BDDE67ELL, oci_fetch);
      break;
    case 1666:
      HASH_INVOKE(0x665D2615E377A682LL, pagelet_server_task_start);
      HASH_INVOKE(0x5F6750E1C7E5D682LL, imageinterlace);
      break;
    case 1677:
      HASH_INVOKE(0x07A946E3DD8E968DLL, ldap_connect);
      break;
    case 1679:
      HASH_INVOKE(0x2EFF4F69EB1DF68FLL, apache_get_config);
      break;
    case 1680:
      HASH_INVOKE(0x166D5E2336878690LL, imagepolygon);
      break;
    case 1681:
      HASH_INVOKE(0x57BA0BC1A4870691LL, magickgetquantumdepth);
      break;
    case 1682:
      HASH_INVOKE(0x16BE0DBA42800692LL, magickgetimagesize);
      break;
    case 1684:
      HASH_INVOKE(0x2673FAB2B4DE4694LL, destroypixelwands);
      break;
    case 1685:
      HASH_INVOKE(0x7186EF5EF0581695LL, exp);
      break;
    case 1686:
      HASH_INVOKE(0x0DD7A2DB53093696LL, utf8_decode);
      break;
    case 1691:
      HASH_INVOKE(0x24D34E49C21DE69BLL, mb_stristr);
      break;
    case 1694:
      HASH_INVOKE(0x5E9821F06711669ELL, gethostbynamel);
      break;
    case 1702:
      HASH_INVOKE(0x0D841874977646A6LL, krsort);
      break;
    case 1703:
      HASH_INVOKE(0x38BBEE42F136D6A7LL, magickgetimageblueprimary);
      break;
    case 1704:
      HASH_INVOKE(0x45AB8F419BA666A8LL, drawpathlinetohorizontalabsolute);
      break;
    case 1706:
      HASH_INVOKE(0x6E9D4D3A119D76AALL, wandgetexceptiontype);
      HASH_INVOKE(0x48C4DB333172F6AALL, parse_url);
      HASH_INVOKE(0x541926FB6D6FC6AALL, magickgetimagecolors);
      break;
    case 1707:
      HASH_INVOKE(0x72B3F8E02D8B16ABLL, array_unshift);
      break;
    case 1711:
      HASH_INVOKE(0x65497D63C0D716AFLL, getdate);
      break;
    case 1712:
      HASH_INVOKE(0x23AAF570C78AC6B0LL, ip2long);
      break;
    case 1714:
      HASH_INVOKE(0x0D669C546C0EC6B2LL, proc_terminate);
      break;
    case 1717:
      HASH_INVOKE(0x798B4197212456B5LL, bcpowmod);
      HASH_INVOKE(0x623CE67C41A9E6B5LL, ldap_next_attribute);
      HASH_INVOKE(0x7E773A36449576B5LL, imagecharup);
      break;
    case 1720:
      HASH_INVOKE(0x44A226F0E402D6B8LL, oci_execute);
      break;
    case 1721:
      HASH_INVOKE(0x316F054CB76446B9LL, openssl_sign);
      break;
    case 1722:
      HASH_INVOKE(0x72B901C3605CB6BALL, pixelsetopacity);
      break;
    case 1726:
      HASH_INVOKE(0x081D5EA9920076BELL, drawgetfillalpha);
      break;
    case 1732:
      HASH_INVOKE(0x4842AF70A71BE6C4LL, uksort);
      HASH_INVOKE(0x34184B42D6AA86C4LL, mb_ereg_search_pos);
      HASH_INVOKE(0x3C042C09F662C6C4LL, drawsetstrokepatternurl);
      break;
    case 1733:
      HASH_INVOKE(0x28526EF49FF516C5LL, pixelsetgreenquantum);
      break;
    case 1736:
      HASH_INVOKE(0x29DD2C9F889246C8LL, passthru);
      break;
    case 1737:
      HASH_INVOKE(0x2D8DF100C30D06C9LL, xmlwriter_set_indent_string);
      break;
    case 1738:
      HASH_INVOKE(0x41BCD0A72B1396CALL, xmlwriter_start_dtd_attlist);
      break;
    case 1745:
      HASH_INVOKE(0x2B3D5B9AF915D6D1LL, imagecopymerge);
      break;
    case 1748:
      HASH_INVOKE(0x04A0E6E8337E56D4LL, drawcolor);
      break;
    case 1749:
      HASH_INVOKE(0x317FFA522A7D96D5LL, imagefilledpolygon);
      break;
    case 1750:
      HASH_INVOKE(0x158348EB08F406D6LL, strtr);
      break;
    case 1761:
      HASH_INVOKE(0x11DA0A0EB8E0D6E1LL, clock_getres);
      break;
    case 1764:
      HASH_INVOKE(0x40D0E3AF799226E4LL, bin2hex);
      HASH_INVOKE(0x1CF3544CB5C9D6E4LL, xml_set_processing_instruction_handler);
      HASH_INVOKE(0x31FFFC333AA6D6E4LL, drawsetfillrule);
      break;
    case 1767:
      HASH_INVOKE(0x44201A16F3D876E7LL, trim);
      break;
    case 1772:
      HASH_INVOKE(0x0A5EFECAE87EA6ECLL, hphp_splfileobject_eof);
      break;
    case 1773:
      HASH_INVOKE(0x04BD4B43921956EDLL, ldap_search);
      break;
    case 1774:
      HASH_INVOKE(0x76382756EA00B6EELL, is_object);
      break;
    case 1775:
      HASH_INVOKE(0x0FA74D85885F86EFLL, output_add_rewrite_var);
      break;
    case 1776:
      HASH_INVOKE(0x014BD9A6823256F0LL, extract);
      break;
    case 1777:
      HASH_INVOKE(0x6B7347DF1AA7E6F1LL, drawpopdefs);
      break;
    case 1779:
      HASH_INVOKE(0x6F1968BE449FB6F3LL, stream_socket_pair);
      HASH_INVOKE(0x5768A80BB0B926F3LL, apd_set_session_trace_socket);
      break;
    case 1785:
      HASH_INVOKE(0x20740D956F0236F9LL, image2wbmp);
      break;
    case 1791:
      HASH_INVOKE(0x623C20A027A606FFLL, array_uintersect_uassoc);
      break;
    case 1793:
      HASH_INVOKE(0x1A80392751AA7701LL, magickgetformat);
      break;
    case 1796:
      HASH_INVOKE(0x5EFE15CE970A5704LL, drawpolyline);
      break;
    case 1801:
      HASH_INVOKE(0x7681C631B34CC709LL, hphp_splfileobject_fflush);
      HASH_INVOKE(0x21972B2BC7A14709LL, imageistruecolor);
      break;
    case 1803:
      HASH_INVOKE(0x5F7873F2DF5BE70BLL, ctype_cntrl);
      break;
    case 1805:
      HASH_INVOKE(0x7CE752299E80B70DLL, unserialize);
      HASH_INVOKE(0x4F3C0DB2F6C8F70DLL, unlink);
      break;
    case 1807:
      HASH_INVOKE(0x2FB2FA1DD832C70FLL, xmlwriter_write_attribute_ns);
      break;
    case 1812:
      HASH_INVOKE(0x1778ED2AF035F714LL, rsort);
      break;
    case 1813:
      HASH_INVOKE(0x25D578B4772C1715LL, define);
      break;
    case 1816:
      HASH_INVOKE(0x7971A5647C957718LL, date_time_set);
      break;
    case 1819:
      HASH_INVOKE(0x3C16230CBC6D471BLL, imagecreatetruecolor);
      break;
    case 1820:
      HASH_INVOKE(0x50AC61A28C5AC71CLL, imagecolorclosestalpha);
      break;
    case 1824:
      HASH_INVOKE(0x2D213FD80048F720LL, usleep);
      break;
    case 1827:
      HASH_INVOKE(0x78420E0B5D110723LL, imagetruecolortopalette);
      break;
    case 1828:
      HASH_INVOKE(0x4DAA3FBC2BD3A724LL, magickequalizeimage);
      break;
    case 1829:
      HASH_INVOKE(0x31EAD049860CE725LL, posix_kill);
      break;
    case 1830:
      HASH_INVOKE(0x523AB2EA95DAD726LL, get_included_files);
      break;
    case 1831:
      HASH_INVOKE(0x11641BE0F11CD727LL, magickgammaimage);
      break;
    case 1833:
      HASH_INVOKE(0x1D30F1E638D71729LL, readgzfile);
      break;
    case 1834:
      HASH_INVOKE(0x17C0D9B1C10B872ALL, openssl_x509_export);
      HASH_INVOKE(0x1F98B41362CDA72ALL, magickgetimagegreenprimary);
      break;
    case 1837:
      HASH_INVOKE(0x14563723F798172DLL, magickpaintopaqueimage);
      break;
    case 1840:
      HASH_INVOKE(0x0D558F552A784730LL, ob_get_contents);
      break;
    case 1842:
      HASH_INVOKE(0x2B1C192C419B8732LL, drawgetexception);
      break;
    case 1855:
      HASH_INVOKE(0x650E641CC0E3873FLL, connection_aborted);
      break;
    case 1857:
      HASH_INVOKE(0x5062777D2B947741LL, wordwrap);
      break;
    case 1863:
      HASH_INVOKE(0x3CD58419E181A747LL, magickstereoimage);
      HASH_INVOKE(0x13BB9EC5A2D2E747LL, hphp_splfileinfo_isdir);
      break;
    case 1864:
      HASH_INVOKE(0x0D7BBA9608A36748LL, magickcombineimages);
      break;
    case 1865:
      HASH_INVOKE(0x73E4417BA7B49749LL, curl_multi_info_read);
      break;
    case 1866:
      HASH_INVOKE(0x1FF03B7DE19DD74ALL, drawpathmovetorelative);
      break;
    case 1867:
      HASH_INVOKE(0x7DA9307A6149B74BLL, get_meta_tags);
      break;
    case 1873:
      HASH_INVOKE(0x017FF216C00D9751LL, property_exists);
      break;
    case 1875:
      HASH_INVOKE(0x42795829DF700753LL, mysql_get_host_info);
      break;
    case 1876:
      HASH_INVOKE(0x53AEFD595C044754LL, max);
      break;
    case 1879:
      HASH_INVOKE(0x7554E3E8674F2757LL, mb_list_encodings);
      break;
    case 1883:
      HASH_INVOKE(0x05D293F45C15F75BLL, ldap_mod_del);
      break;
    case 1884:
      HASH_INVOKE(0x6D5B592E524AF75CLL, hphp_splfileinfo_getbasename);
      break;
    case 1887:
      HASH_INVOKE(0x3EDB48C5DDD9675FLL, socket_select);
      break;
    case 1888:
      HASH_INVOKE(0x1BD984C11BB16760LL, array_merge);
      HASH_INVOKE(0x7AB5E6EA37196760LL, date_timezone_set);
      break;
    case 1889:
      HASH_INVOKE(0x6AF50085AC2AC761LL, xmlwriter_write_element);
      break;
    case 1893:
      HASH_INVOKE(0x1D803CE961921765LL, md5);
      HASH_INVOKE(0x45631C592AD6D765LL, str_ireplace);
      break;
    case 1894:
      HASH_INVOKE(0x1F4505BE6460D766LL, scandir);
      break;
    case 1895:
      HASH_INVOKE(0x6C280D5855D20767LL, drawsetfillalpha);
      break;
    case 1896:
      HASH_INVOKE(0x179A72074C778768LL, openssl_x509_export_to_file);
      break;
    case 1901:
      HASH_INVOKE(0x3304663FBC6C976DLL, get_html_translation_table);
      HASH_INVOKE(0x553ADA5A41AE976DLL, mb_ereg_replace);
      break;
    case 1902:
      HASH_INVOKE(0x6DB71D850799D76ELL, hphp_splfileobject_fscanf);
      break;
    case 1904:
      HASH_INVOKE(0x6F6C5B9E3DC64770LL, drawgetstrokemiterlimit);
      break;
    case 1909:
      HASH_INVOKE(0x04D9076808F79775LL, getenv);
      break;
    case 1910:
      HASH_INVOKE(0x616DDB67073A0776LL, ord);
      HASH_INVOKE(0x4102C410C5031776LL, magickcolorizeimage);
      break;
    case 1914:
      HASH_INVOKE(0x1FBF36B5D65E677ALL, fb_call_user_func_safe_return);
      HASH_INVOKE(0x4330CE9C9002477ALL, array_udiff_uassoc);
      break;
    case 1915:
      HASH_INVOKE(0x129E39AC523A977BLL, magickgethomeurl);
      break;
    case 1920:
      HASH_INVOKE(0x29824AAA934CE780LL, array_filter);
      break;
    case 1923:
      HASH_INVOKE(0x53B4DBE58B356783LL, imagesetthickness);
      HASH_INVOKE(0x38704D99FEA9B783LL, mysql_fetch_array);
      break;
    case 1924:
      HASH_INVOKE(0x784FD2E7191A3784LL, drawpathellipticarcrelative);
      break;
    case 1925:
      HASH_INVOKE(0x5BFC6198960A5785LL, in_array);
      break;
    case 1926:
      HASH_INVOKE(0x3D3F7C6DE95D5786LL, oci_field_is_null);
      break;
    case 1927:
      HASH_INVOKE(0x4991643BD854D787LL, drawgetexceptionstring);
      break;
    case 1928:
      HASH_INVOKE(0x32D8CE5D0FA6D788LL, ldap_rename);
      break;
    case 1930:
      HASH_INVOKE(0x70A1EC006032E78ALL, pixelgetquantumcolor);
      break;
    case 1935:
      HASH_INVOKE(0x7B4E25772D0AC78FLL, simplexml_load_file);
      break;
    case 1938:
      HASH_INVOKE(0x0D4891A5E1A20792LL, get_defined_functions);
      break;
    case 1945:
      HASH_INVOKE(0x26D226FD28566799LL, date_isodate_set);
      break;
    case 1947:
      HASH_INVOKE(0x1196D899ACCD379BLL, evhttp_recv);
      break;
    case 1949:
      HASH_INVOKE(0x02ECD8C169DF579DLL, feof);
      break;
    case 1951:
      HASH_INVOKE(0x4B092931EFB7979FLL, mysql_create_db);
      break;
    case 1959:
      HASH_INVOKE(0x1F76E954F9A147A7LL, magickcontrastimage);
      break;
    case 1961:
      HASH_INVOKE(0x7C251B7DE8DB87A9LL, mcrypt_list_algorithms);
      HASH_INVOKE(0x7707A7FEA07FB7A9LL, hphp_recursivedirectoryiterator___construct);
      break;
    case 1962:
      HASH_INVOKE(0x45A53A884414A7AALL, pack);
      HASH_INVOKE(0x58D6464A3A9127AALL, apc_bin_loadfile);
      break;
    case 1965:
      HASH_INVOKE(0x7DA08D9D148837ADLL, posix_mkfifo);
      HASH_INVOKE(0x217C52A1EBDF87ADLL, apache_get_version);
      break;
    case 1966:
      HASH_INVOKE(0x00141B0E3E6F77AELL, xml_set_unparsed_entity_decl_handler);
      break;
    case 1967:
      HASH_INVOKE(0x16CB9891EF26D7AFLL, drawgetstrokedashoffset);
      break;
    case 1977:
      HASH_INVOKE(0x1FC9406FD7FCD7B9LL, strrpos);
      HASH_INVOKE(0x1B6467AD87E167B9LL, log1p);
      break;
    case 1983:
      HASH_INVOKE(0x3F46374E6E1B07BFLL, posix_getpwuid);
      break;
    case 1984:
      HASH_INVOKE(0x152D1AB941A647C0LL, hphp_get_extension_info);
      HASH_INVOKE(0x52FDAC1D298D67C0LL, mcrypt_enc_get_algorithms_name);
      break;
    case 1985:
      HASH_INVOKE(0x4E172EA6743697C1LL, ldap_first_entry);
      break;
    case 1988:
      HASH_INVOKE(0x3C696836396BE7C4LL, mb_language);
      break;
    case 1990:
      HASH_INVOKE(0x0C8A7BE6ABC957C6LL, clearpixeliterator);
      HASH_INVOKE(0x3D6D684AF537A7C6LL, ldap_explode_dn);
      break;
    case 1991:
      HASH_INVOKE(0x686C5142FD0337C7LL, lcg_value);
      break;
    case 1994:
      HASH_INVOKE(0x3C781898488687CALL, xml_parse);
      HASH_INVOKE(0x55B68546CFAC87CALL, magicksetimageresolution);
      break;
    case 1998:
      HASH_INVOKE(0x3AE33FEA6830C7CELL, magickshearimage);
      break;
    case 1999:
      HASH_INVOKE(0x2FAB1F75659707CFLL, is_scalar);
      break;
    case 2001:
      HASH_INVOKE(0x35B661C87484D7D1LL, openssl_csr_sign);
      break;
    case 2009:
      HASH_INVOKE(0x2ED6760DAA3A67D9LL, strcasecmp);
      break;
    case 2012:
      HASH_INVOKE(0x1FE65AFCC92967DCLL, rmdir);
      break;
    case 2013:
      HASH_INVOKE(0x2B5AEDF1A5FC47DDLL, strripos);
      break;
    case 2018:
      HASH_INVOKE(0x0888289CBD2887E2LL, iconv_substr);
      break;
    case 2020:
      HASH_INVOKE(0x2621680306BC97E4LL, magicksetimagescene);
      break;
    case 2023:
      HASH_INVOKE(0x4215DDB57604F7E7LL, xmlwriter_start_pi);
      break;
    case 2024:
      HASH_INVOKE(0x53B7BF8991FA67E8LL, i18n_loc_get_error_code);
      break;
    case 2025:
      HASH_INVOKE(0x6BB8AC68771287E9LL, strcmp);
      break;
    case 2027:
      HASH_INVOKE(0x54AE7140B95027EBLL, pixelgetgreenquantum);
      HASH_INVOKE(0x1A397501431EC7EBLL, is_numeric);
      break;
    case 2031:
      HASH_INVOKE(0x5367B0F3A4D2D7EFLL, ldap_list);
      break;
    case 2032:
      HASH_INVOKE(0x14F700DD189DB7F0LL, drawsetclipunits);
      break;
    case 2035:
      HASH_INVOKE(0x73877357478137F3LL, posix_ctermid);
      HASH_INVOKE(0x4B57E07A323FE7F3LL, drawpathlinetoverticalabsolute);
      HASH_INVOKE(0x7F436B50B7BBD7F3LL, getcwd);
      break;
    case 2041:
      HASH_INVOKE(0x376FB2649384A7F9LL, str_pad);
      break;
    case 2042:
      HASH_INVOKE(0x0FD7C3144B4007FALL, libxml_set_streams_context);
      break;
    case 2045:
      HASH_INVOKE(0x238E501F2536E7FDLL, drawsetclippath);
      break;
    case 2048:
      HASH_INVOKE(0x0E66983DD04B0800LL, get_current_user);
      break;
    case 2051:
      HASH_INVOKE(0x10F7244AA9CB5803LL, imagepstext);
      break;
    case 2052:
      HASH_INVOKE(0x349A0DF6723B6804LL, pixelsetcolorcount);
      break;
    case 2053:
      HASH_INVOKE(0x54ED49F8B155C805LL, ldap_t61_to_8859);
      break;
    case 2056:
      HASH_INVOKE(0x19279D6DB4F70808LL, hash_hmac);
      HASH_INVOKE(0x083B8F01AE15B808LL, assert);
      break;
    case 2057:
      HASH_INVOKE(0x221F5A9D5E021809LL, magickwriteimages);
      break;
    case 2058:
      HASH_INVOKE(0x5A0D1AE1D4C6F80ALL, array_slice);
      break;
    case 2060:
      HASH_INVOKE(0x3FF63423EC4B280CLL, posix_getegid);
      break;
    case 2061:
      HASH_INVOKE(0x11EC19E702F2C80DLL, getmyinode);
      HASH_INVOKE(0x727F5A6D8E26B80DLL, extension_loaded);
      break;
    case 2063:
      HASH_INVOKE(0x2342E5B393F0680FLL, oci_password_change);
      break;
    case 2064:
      HASH_INVOKE(0x4297B1072CE76810LL, fb_call_user_func_array_safe);
      break;
    case 2067:
      HASH_INVOKE(0x1A6B577442218813LL, pixelsetmagentaquantum);
      HASH_INVOKE(0x5F7940A713863813LL, floor);
      break;
    case 2068:
      HASH_INVOKE(0x3C0DFA15D3447814LL, rawurldecode);
      break;
    case 2071:
      HASH_INVOKE(0x0D8B1D0A8C381817LL, stream_bucket_new);
      break;
    case 2072:
      HASH_INVOKE(0x0FBDB0B22A59B818LL, mailparse_msg_parse);
      break;
    case 2077:
      HASH_INVOKE(0x4D624A655A9B581DLL, drawpoint);
      break;
    case 2081:
      HASH_INVOKE(0x2D52FB9B52EC2821LL, xml_set_notation_decl_handler);
      HASH_INVOKE(0x107DBCA79C15B821LL, addcslashes);
      break;
    case 2084:
      HASH_INVOKE(0x2B78E204F615A824LL, openssl_pkcs12_export_to_file);
      break;
    case 2087:
      HASH_INVOKE(0x33EC567341B9C827LL, magickgetmaxtextadvance);
      break;
    case 2089:
      HASH_INVOKE(0x39EE4CCCA716E829LL, stream_context_get_options);
      HASH_INVOKE(0x57FFCEB7FA2D9829LL, usort);
      break;
    case 2092:
      HASH_INVOKE(0x34F0E032AB05C82CLL, pixelsetblue);
      break;
    case 2093:
      HASH_INVOKE(0x1C4AE57BF4E4A82DLL, apc_dec);
      break;
    case 2094:
      HASH_INVOKE(0x3402C1E7544C382ELL, lstat);
      break;
    case 2095:
      HASH_INVOKE(0x79A05154A7F5482FLL, magickgetimagedelay);
      break;
    case 2096:
      HASH_INVOKE(0x5BBFA7EAEBD25830LL, pixelgetcyanquantum);
      break;
    case 2100:
      HASH_INVOKE(0x605132E71CE7D834LL, array_push);
      break;
    case 2101:
      HASH_INVOKE(0x1C4A162E6635B835LL, imageftbbox);
      HASH_INVOKE(0x43A96BA7F58EB835LL, hphp_splfileobject_valid);
      break;
    case 2104:
      HASH_INVOKE(0x63E554E0F11CE838LL, mysql_unbuffered_query);
      HASH_INVOKE(0x03098F16B0AD5838LL, mcrypt_module_get_supported_key_sizes);
      HASH_INVOKE(0x0890F9052322E838LL, fstat);
      break;
    case 2107:
      HASH_INVOKE(0x63E2EA180786B83BLL, pixelsetblack);
      break;
    case 2108:
      HASH_INVOKE(0x7C8969C75CA1783CLL, get_declared_classes);
      HASH_INVOKE(0x034EDEBD109FD83CLL, filesize);
      break;
    case 2115:
      HASH_INVOKE(0x567A7139AD476843LL, socket_listen);
      break;
    case 2116:
      HASH_INVOKE(0x1639883196856844LL, oci_close);
      break;
    case 2118:
      HASH_INVOKE(0x50088ED5D482C846LL, ldap_mod_add);
      break;
    case 2119:
      HASH_INVOKE(0x4E69A952E3EA4847LL, magicksetfilename);
      break;
    case 2122:
      HASH_INVOKE(0x7D3F626E636C084ALL, ldap_delete);
      break;
    case 2123:
      HASH_INVOKE(0x68B7597C22FA484BLL, openssl_public_encrypt);
      break;
    case 2124:
      HASH_INVOKE(0x26A2BBC465A2B84CLL, strcoll);
      break;
    case 2126:
      HASH_INVOKE(0x488C2F267BF2884ELL, array_intersect);
      break;
    case 2128:
      HASH_INVOKE(0x4DDB82A3632FA850LL, atan);
      break;
    case 2129:
      HASH_INVOKE(0x488BFCC942C73851LL, gzopen);
      break;
    case 2140:
      HASH_INVOKE(0x5A017A4C6A41E85CLL, curl_multi_add_handle);
      break;
    case 2142:
      HASH_INVOKE(0x6B4DE6865142285ELL, destroypixeliterator);
      break;
    case 2145:
      HASH_INVOKE(0x2AD6B0E3B9F3B861LL, array_search);
      break;
    case 2147:
      HASH_INVOKE(0x21B30164F5D49863LL, is_resource);
      break;
    case 2148:
      HASH_INVOKE(0x168EDA8238EEE864LL, mb_detect_order);
      break;
    case 2151:
      HASH_INVOKE(0x65A68A31B96E7867LL, hash);
      break;
    case 2152:
      HASH_INVOKE(0x785C812E6292E868LL, i18n_loc_set_default);
      break;
    case 2153:
      HASH_INVOKE(0x246EC2B1844DB869LL, pixelgetexception);
      break;
    case 2155:
      HASH_INVOKE(0x0C1BBEDECEF1C86BLL, newmagickwand);
      break;
    case 2156:
      HASH_INVOKE(0x6414504A6658286CLL, stripos);
      break;
    case 2159:
      HASH_INVOKE(0x1476A177CC50686FLL, mb_strstr);
      break;
    case 2160:
      HASH_INVOKE(0x34F50577C14C6870LL, array_diff_uassoc);
      break;
    case 2162:
      HASH_INVOKE(0x3C7B86F57AFA0872LL, hebrev);
      HASH_INVOKE(0x558D62FBEB210872LL, str_rot13);
      break;
    case 2163:
      HASH_INVOKE(0x4C06B4AFC1C08873LL, str_shuffle);
      break;
    case 2167:
      HASH_INVOKE(0x6AA3788C9B737877LL, magickdespeckleimage);
      break;
    case 2168:
      HASH_INVOKE(0x00F8C6758B50B878LL, drawpathcurvetoquadraticbezierabsolute);
      break;
    case 2172:
      HASH_INVOKE(0x11DFC3C9D916387CLL, hphp_splfileobject_ftruncate);
      HASH_INVOKE(0x6451BCB825D1787CLL, chroot);
      break;
    case 2173:
      HASH_INVOKE(0x54F84DC9A334287DLL, gzencode);
      HASH_INVOKE(0x2B36081E0828487DLL, debug_print_backtrace);
      break;
    case 2176:
      HASH_INVOKE(0x7549612A72BA5880LL, hphp_splfileinfo_getrealpath);
      break;
    case 2179:
      HASH_INVOKE(0x3EBD8F559B4EA883LL, hphp_splfileobject_getflags);
      break;
    case 2180:
      HASH_INVOKE(0x766CD15A7F2A0884LL, array_uintersect);
      break;
    case 2184:
      HASH_INVOKE(0x1062CF2DA5443888LL, imagedashedline);
      break;
    case 2191:
      HASH_INVOKE(0x539868C56806688FLL, imagecopyresampled);
      break;
    case 2200:
      HASH_INVOKE(0x4AC522FF7BB60898LL, xmlwriter_write_dtd_entity);
      break;
    case 2205:
      HASH_INVOKE(0x1FC855F0E4F1189DLL, magickminifyimage);
      break;
    case 2208:
      HASH_INVOKE(0x6B1A3BCE67BAC8A0LL, openssl_csr_new);
      break;
    case 2209:
      HASH_INVOKE(0x1756D4437A4098A1LL, date_modify);
      break;
    case 2215:
      HASH_INVOKE(0x57105D4E43B078A7LL, magicksetformat);
      HASH_INVOKE(0x6C6B4B739AE1B8A7LL, curl_close);
      break;
    case 2217:
      HASH_INVOKE(0x346B2DB3BA2378A9LL, imagecolormatch);
      break;
    case 2218:
      HASH_INVOKE(0x44BC069A75EE98AALL, xhprof_disable);
      break;
    case 2219:
      HASH_INVOKE(0x39F11BA6A4D778ABLL, strnatcmp);
      break;
    case 2220:
      HASH_INVOKE(0x5B1F4C6424DDD8ACLL, openlog);
      break;
    case 2224:
      HASH_INVOKE(0x2CEF8DDC092698B0LL, drawgetvectorgraphics);
      break;
    case 2226:
      HASH_INVOKE(0x31830AA5032428B2LL, is_double);
      break;
    case 2236:
      HASH_INVOKE(0x7AE3AE9B634988BCLL, stream_context_create);
      break;
    case 2244:
      HASH_INVOKE(0x5C28BE7FFE6A68C4LL, xml_set_start_namespace_decl_handler);
      break;
    case 2245:
      HASH_INVOKE(0x146A1A7658CCA8C5LL, asinh);
      break;
    case 2247:
      HASH_INVOKE(0x4623383F8534E8C7LL, array_multisort);
      HASH_INVOKE(0x6D9B9BE3CED388C7LL, apc_load_constants);
      break;
    case 2254:
      HASH_INVOKE(0x3FFAA982E4B1E8CELL, date_offset_get);
      break;
    case 2257:
      HASH_INVOKE(0x1015EB3F52B098D1LL, print);
      break;
    case 2260:
      HASH_INVOKE(0x6DB4EE8696C7E8D4LL, magicksetimageiterations);
      break;
    case 2262:
      HASH_INVOKE(0x2F585B36DDDB68D6LL, mb_convert_case);
      HASH_INVOKE(0x26DC8AB4A9CBE8D6LL, iconv);
      break;
    case 2264:
      HASH_INVOKE(0x3A65182A3E8908D8LL, openssl_open);
      break;
    case 2265:
      HASH_INVOKE(0x18B64D6BFE4208D9LL, stream_get_transports);
      break;
    case 2267:
      HASH_INVOKE(0x4052842EC87038DBLL, magickcropimage);
      break;
    case 2268:
      HASH_INVOKE(0x31F50FDA18B888DCLL, magickgetimagetype);
      break;
    case 2276:
      HASH_INVOKE(0x16A18007E10F48E4LL, socket_getsockname);
      break;
    case 2278:
      HASH_INVOKE(0x69887F054A1E28E6LL, strtok);
      break;
    case 2279:
      HASH_INVOKE(0x608729F27FA428E7LL, error_get_last);
      break;
    case 2280:
      HASH_INVOKE(0x4F7ED8C3156AD8E8LL, magicksetimagedispose);
      break;
    case 2293:
      HASH_INVOKE(0x45DA105C5B48F8F5LL, apd_set_pprof_trace);
      break;
    case 2295:
      HASH_INVOKE(0x17582BEA497D48F7LL, ctype_alpha);
      break;
    case 2298:
      HASH_INVOKE(0x6F0F82818B68A8FALL, array_values);
      break;
    case 2299:
      HASH_INVOKE(0x214532C4A2BC28FBLL, ldap_next_entry);
      break;
    case 2300:
      HASH_INVOKE(0x4C2AFB2EFDB1B8FCLL, stripslashes);
      break;
    case 2302:
      HASH_INVOKE(0x047BF4D3D0ED08FELL, strchr);
      break;
    case 2315:
      HASH_INVOKE(0x67B879A1120C190BLL, headers_sent);
      HASH_INVOKE(0x2987B15E11FE890BLL, clock_settime);
      break;
    case 2316:
      HASH_INVOKE(0x72E1EBF65C25F90CLL, oci_fetch_assoc);
      break;
    case 2321:
      HASH_INVOKE(0x04F822B7817E5911LL, bindec);
      HASH_INVOKE(0x0AFD4F231D6CB911LL, magickaddimage);
      HASH_INVOKE(0x5B9B2C3B32906911LL, drawsetfillpatternurl);
      break;
    case 2323:
      HASH_INVOKE(0x55757E1242390913LL, cos);
      break;
    case 2324:
      HASH_INVOKE(0x6E22C6D840B44914LL, mcrypt_generic_init);
      break;
    case 2326:
      HASH_INVOKE(0x245A2DC3B6B62916LL, apache_lookup_uri);
      break;
    case 2329:
      HASH_INVOKE(0x022B16C0D64D7919LL, file_put_contents);
      HASH_INVOKE(0x4AA4DD47E99E5919LL, oci_bind_array_by_name);
      break;
    case 2333:
      HASH_INVOKE(0x069C028EFEF8C91DLL, date);
      break;
    case 2335:
      HASH_INVOKE(0x277D7E2D1F5C191FLL, drawpathcurvetoquadraticbezierrelative);
      HASH_INVOKE(0x4E2C55C92D71F91FLL, magickcolorfloodfillimage);
      break;
    case 2337:
      HASH_INVOKE(0x0F5917FFCDD6C921LL, mb_substr);
      break;
    case 2339:
      HASH_INVOKE(0x044B276686B77923LL, fscanf);
      break;
    case 2346:
      HASH_INVOKE(0x174C510386E6492ALL, hphp_directoryiterator_key);
      break;
    case 2349:
      HASH_INVOKE(0x27363CE6CBFC392DLL, pcntl_wexitstatus);
      HASH_INVOKE(0x2337F8C3EE17192DLL, sprintf);
      break;
    case 2350:
      HASH_INVOKE(0x26E8B741BDDDC92ELL, xmlwriter_start_element);
      break;
    case 2352:
      HASH_INVOKE(0x507CE1912FD74930LL, mail);
      HASH_INVOKE(0x30972530BD557930LL, shell_exec);
      break;
    case 2354:
      HASH_INVOKE(0x72C01E1D90BE5932LL, mcrypt_enc_get_block_size);
      break;
    case 2356:
      HASH_INVOKE(0x4FB95164A5F84934LL, mcrypt_generic_end);
      break;
    case 2357:
      HASH_INVOKE(0x46BD9A56BDE40935LL, mysql_escape_string);
      HASH_INVOKE(0x06486B6912479935LL, zlib_get_coding_type);
      HASH_INVOKE(0x48D3CA6CA0B29935LL, mb_regex_set_options);
      break;
    case 2359:
      HASH_INVOKE(0x0447476ED176F937LL, oci_bind_by_name);
      break;
    case 2361:
      HASH_INVOKE(0x5B60C8396C624939LL, mb_substitute_character);
      break;
    case 2366:
      HASH_INVOKE(0x3946D67A0D16D93ELL, hphp_splfileinfo_isreadable);
      HASH_INVOKE(0x0CADFE289C92893ELL, socket_getpeername);
      break;
    case 2371:
      HASH_INVOKE(0x7C565AD57BC84943LL, pixelsetindex);
      break;
    case 2373:
      HASH_INVOKE(0x7CB0596B6CCFA945LL, split);
      break;
    case 2375:
      HASH_INVOKE(0x630288865DE68947LL, php_strip_whitespace);
      break;
    case 2376:
      HASH_INVOKE(0x6A3412DE82715948LL, openssl_x509_checkpurpose);
      break;
    case 2377:
      HASH_INVOKE(0x243BB8B284895949LL, apache_get_rewrite_rules);
      break;
    case 2379:
      HASH_INVOKE(0x37F356F578FA394BLL, substr);
      break;
    case 2381:
      HASH_INVOKE(0x3D3AD12E52FF294DLL, imagecreatefromwbmp);
      break;
    case 2387:
      HASH_INVOKE(0x068438AFD33A9953LL, imagecolorclosesthwb);
      break;
    case 2391:
      HASH_INVOKE(0x253AC5D4E450A957LL, magickgetreleasedate);
      break;
    case 2394:
      HASH_INVOKE(0x103C12985527295ALL, hphp_splfileobject_setcsvcontrol);
      HASH_INVOKE(0x7056E766A274895ALL, virtual);
      break;
    case 2397:
      HASH_INVOKE(0x21DBCE74EB1FC95DLL, xmlwriter_text);
      break;
    case 2401:
      HASH_INVOKE(0x5EA7052A00E88961LL, magickgetcopyright);
      break;
    case 2407:
      HASH_INVOKE(0x1419B3BF428B2967LL, evhttp_async_post);
      break;
    case 2415:
      HASH_INVOKE(0x134EF88685C0396FLL, magickgetexceptiontype);
      break;
    case 2417:
      HASH_INVOKE(0x442A28FB6F6C3971LL, xmlwriter_start_attribute);
      HASH_INVOKE(0x72C73F5DA7D6F971LL, magickgetimagecolormapcolor);
      break;
    case 2418:
      HASH_INVOKE(0x758263CEBF2E8972LL, assert_options);
      break;
    case 2421:
      HASH_INVOKE(0x7E26D48503362975LL, drawpathcurvetoabsolute);
      HASH_INVOKE(0x488141281A75E975LL, imagecreatefromgif);
      break;
    case 2423:
      HASH_INVOKE(0x0C16C797916C2977LL, posix_setegid);
      break;
    case 2430:
      HASH_INVOKE(0x5067A65AD1D0297ELL, pixelgetiteratorexception);
      break;
    case 2432:
      HASH_INVOKE(0x3D3445105C335980LL, filectime);
      break;
    case 2434:
      HASH_INVOKE(0x214EA70BDD8FB982LL, magickmorphimages);
      break;
    case 2435:
      HASH_INVOKE(0x3DA64BF893DBF983LL, strncmp);
      break;
    case 2436:
      HASH_INVOKE(0x2B2A9D6B27656984LL, oci_new_connect);
      break;
    case 2438:
      HASH_INVOKE(0x6ECE4BDB8842E986LL, posix_strerror);
      break;
    case 2439:
      HASH_INVOKE(0x22B3CF8DD3D1A987LL, pixelsynciterator);
      break;
    case 2440:
      HASH_INVOKE(0x489355BDBE396988LL, drawsettextencoding);
      HASH_INVOKE(0x55BE7AE8DEF3F988LL, magickgetstringheight);
      break;
    case 2443:
      HASH_INVOKE(0x0E863EF8C11A598BLL, is_writable);
      break;
    case 2445:
      HASH_INVOKE(0x23DEB9C15DF9D98DLL, oci_commit);
      HASH_INVOKE(0x69003892F71C798DLL, apache_get_scoreboard);
      HASH_INVOKE(0x651A8CBB8D2A398DLL, mysql_stat);
      break;
    case 2446:
      HASH_INVOKE(0x45CFDEE19995398ELL, hphp_recursiveiteratoriterator_next);
      HASH_INVOKE(0x333D4DFD4927898ELL, magickgetimagewhitepoint);
      break;
    case 2448:
      HASH_INVOKE(0x342D957A86A03990LL, hphp_splfileobject_seek);
      break;
    case 2456:
      HASH_INVOKE(0x501AAD31C8086998LL, posix_getcwd);
      break;
    case 2459:
      HASH_INVOKE(0x564D8D3DA1E8E99BLL, xml_get_current_line_number);
      break;
    case 2462:
      HASH_INVOKE(0x59D2DFF08F4DB99ELL, imagecreate);
      break;
    case 2466:
      HASH_INVOKE(0x01D2367A02F0A9A2LL, magicksetsize);
      HASH_INVOKE(0x3FE0D440B157A9A2LL, oci_field_precision);
      break;
    case 2467:
      HASH_INVOKE(0x43D1339C52E309A3LL, hphp_service_thread_started);
      HASH_INVOKE(0x78261FA60B8D89A3LL, imagepsloadfont);
      break;
    case 2468:
      HASH_INVOKE(0x6F8676B049C919A4LL, array_intersect_uassoc);
      break;
    case 2469:
      HASH_INVOKE(0x76988956F35329A5LL, xmlwriter_end_cdata);
      break;
    case 2473:
      HASH_INVOKE(0x6F9CF95104CAE9A9LL, pixelgetyellowquantum);
      break;
    case 2476:
      HASH_INVOKE(0x522256BAA78159ACLL, popen);
      HASH_INVOKE(0x1D4F0A3AEA18F9ACLL, oci_server_version);
      break;
    case 2477:
      HASH_INVOKE(0x05C5AD90751159ADLL, drawpathcurvetoquadraticbeziersmoothabsolute);
      break;
    case 2479:
      HASH_INVOKE(0x25268012A48A99AFLL, magickclipimage);
      break;
    case 2481:
      HASH_INVOKE(0x7C1CE38F14E529B1LL, date_default_timezone_set);
      break;
    case 2482:
      HASH_INVOKE(0x65D7CBE8681CE9B2LL, gzgetss);
      break;
    case 2486:
      HASH_INVOKE(0x5FC1B94446EA59B6LL, magickremoveimageprofiles);
      break;
    case 2487:
      HASH_INVOKE(0x18F2C246FACAD9B7LL, each);
      break;
    case 2488:
      HASH_INVOKE(0x3741447B159359B8LL, mcrypt_get_cipher_name);
      HASH_INVOKE(0x4EFD7A9C90E559B8LL, posix_ttyname);
      break;
    case 2489:
      HASH_INVOKE(0x145702974C97F9B9LL, ltrim);
      break;
    case 2490:
      HASH_INVOKE(0x13B3172E092D99BALL, is_dir);
      break;
    case 2492:
      HASH_INVOKE(0x7E7BF1BDA6DB49BCLL, hphp_splfileinfo_getgroup);
      break;
    case 2494:
      HASH_INVOKE(0x458B5ABEDAC1C9BELL, disk_free_space);
      break;
    case 2498:
      HASH_INVOKE(0x6A7BDB900E7429C2LL, magickconstituteimage);
      break;
    case 2500:
      HASH_INVOKE(0x47B7D3745D80B9C4LL, socket_get_option);
      break;
    case 2502:
      HASH_INVOKE(0x080F661DB8BFC9C6LL, hphp_splfileinfo_getmtime);
      break;
    case 2503:
      HASH_INVOKE(0x6ECDF24B29D789C7LL, strtolower);
      break;
    case 2506:
      HASH_INVOKE(0x5C5B0CC85133B9CALL, mkdir);
      break;
    case 2509:
      HASH_INVOKE(0x4E61FE901C1C29CDLL, array_intersect_key);
      break;
    case 2510:
      HASH_INVOKE(0x7A9FB932873D09CELL, gmmktime);
      break;
    case 2511:
      HASH_INVOKE(0x415B91CAEE0689CFLL, magickgetimageinterlacescheme);
      break;
    case 2514:
      HASH_INVOKE(0x3DCCD1FEAD8759D2LL, array_sum);
      break;
    case 2515:
      HASH_INVOKE(0x1C31A9E1207209D3LL, mb_split);
      HASH_INVOKE(0x10C82F357BB7E9D3LL, curl_version);
      HASH_INVOKE(0x25CA0299103F49D3LL, magickgetsize);
      break;
    case 2517:
      HASH_INVOKE(0x245860A2FE4CB9D5LL, socket_set_blocking);
      break;
    case 2523:
      HASH_INVOKE(0x48B2E069B89489DBLL, magickappendimages);
      break;
    case 2526:
      HASH_INVOKE(0x5C039967E60089DELL, array_intersect_ukey);
      break;
    case 2527:
      HASH_INVOKE(0x349E2E0F2CD7B9DFLL, magickgetversion);
      break;
    case 2534:
      HASH_INVOKE(0x1B44CF284E9B09E6LL, interface_exists);
      break;
    case 2537:
      HASH_INVOKE(0x4ADFA265F07AB9E9LL, drawgettextalignment);
      HASH_INVOKE(0x6A45EB471332A9E9LL, imagecolorexactalpha);
      HASH_INVOKE(0x330EE2729DB7C9E9LL, drawgetfontstretch);
      break;
    case 2538:
      HASH_INVOKE(0x25DDD924EFE979EALL, hash_update_file);
      break;
    case 2539:
      HASH_INVOKE(0x71B0FF80B88459EBLL, diskfreespace);
      break;
    case 2543:
      HASH_INVOKE(0x7EA6200B688459EFLL, ldap_modify);
      break;
    case 2544:
      HASH_INVOKE(0x1FC307200E8959F0LL, stream_bucket_append);
      break;
    case 2547:
      HASH_INVOKE(0x6535B60A4BC449F3LL, dns_get_record);
      break;
    case 2548:
      HASH_INVOKE(0x51201EE65BC729F4LL, localtime);
      break;
    case 2549:
      HASH_INVOKE(0x2BC61637253BE9F5LL, drawgetfontweight);
      HASH_INVOKE(0x35BABFBC091759F5LL, socket_server);
      break;
    case 2557:
      HASH_INVOKE(0x2394D4E030AB69FDLL, getmypid);
      break;
    case 2564:
      HASH_INVOKE(0x17B83C425BD09A04LL, atanh);
      break;
    case 2567:
      HASH_INVOKE(0x391E0A4CF1EC9A07LL, stream_socket_recvfrom);
      break;
    case 2568:
      HASH_INVOKE(0x0436CA4DFB315A08LL, soundex);
      break;
    case 2571:
      HASH_INVOKE(0x70075DC878825A0BLL, ctype_lower);
      break;
    case 2573:
      HASH_INVOKE(0x736C133EFF8E5A0DLL, mysql_list_fields);
      HASH_INVOKE(0x50A7146A79877A0DLL, pcntl_alarm);
      break;
    case 2577:
      HASH_INVOKE(0x472CA39715598A11LL, mb_eregi_replace);
      break;
    case 2588:
      HASH_INVOKE(0x12D49AD562F38A1CLL, date_timezone_get);
      break;
    case 2591:
      HASH_INVOKE(0x35C8BD7DFDADEA1FLL, hphp_directoryiterator_current);
      break;
    case 2592:
      HASH_INVOKE(0x2A420675E6AF0A20LL, basename);
      break;
    case 2593:
      HASH_INVOKE(0x14279BB1A6872A21LL, atan2);
      break;
    case 2597:
      HASH_INVOKE(0x5EC0A3DD935EEA25LL, magickresampleimage);
      HASH_INVOKE(0x1DB9A1FB97A3AA25LL, magicksetimageoption);
      break;
    case 2601:
      HASH_INVOKE(0x618D2A98986B1A29LL, ldap_unbind);
      break;
    case 2602:
      HASH_INVOKE(0x3CAEA6B8D1C92A2ALL, stream_bucket_prepend);
      break;
    case 2609:
      HASH_INVOKE(0x1F3E32847C1CCA31LL, mb_ereg_match);
      break;
    case 2612:
      HASH_INVOKE(0x2D948E4099975A34LL, restore_include_path);
      HASH_INVOKE(0x5AB266C6E7075A34LL, mysql_error);
      break;
    case 2616:
      HASH_INVOKE(0x3E65EF9761BE5A38LL, pixelgetiteratorexceptiontype);
      break;
    case 2619:
      HASH_INVOKE(0x545A7BE199EC4A3BLL, pcntl_getpriority);
      HASH_INVOKE(0x785ECCF53D98BA3BLL, curl_multi_exec);
      break;
    case 2620:
      HASH_INVOKE(0x21DF7BAEEFABCA3CLL, umask);
      break;
    case 2622:
      HASH_INVOKE(0x31C3A072D092FA3ELL, socket_create_listen);
      break;
    case 2623:
      HASH_INVOKE(0x4C0E2C6882051A3FLL, magickgetresourcelimit);
      break;
    case 2624:
      HASH_INVOKE(0x4926EE59103B2A40LL, destroydrawingwand);
      HASH_INVOKE(0x682C14726D484A40LL, fileatime);
      break;
    case 2626:
      HASH_INVOKE(0x128914E131AFFA42LL, microtime);
      HASH_INVOKE(0x5FF7C3A6BDDCFA42LL, mb_convert_kana);
      break;
    case 2628:
      HASH_INVOKE(0x7F6A6306BBE8AA44LL, imagelayereffect);
      break;
    case 2631:
      HASH_INVOKE(0x1B45CFF586F85A47LL, utf8_encode);
      break;
    case 2636:
      HASH_INVOKE(0x7039B1C3356B8A4CLL, hphp_splfileobject_rewind);
      break;
    case 2647:
      HASH_INVOKE(0x5088945958DD4A57LL, mktime);
      HASH_INVOKE(0x7E929ED7D9BE6A57LL, ini_get);
      break;
    case 2648:
      HASH_INVOKE(0x6E823A722DE1EA58LL, stream_socket_client);
      break;
    case 2651:
      HASH_INVOKE(0x2B18DFF183C0BA5BLL, mb_get_info);
      break;
    case 2653:
      HASH_INVOKE(0x7E1E9C4C3D4E8A5DLL, stream_select);
      break;
    case 2654:
      HASH_INVOKE(0x2C6826999658AA5ELL, getopt);
      break;
    case 2655:
      HASH_INVOKE(0x7CAE3FE798EC0A5FLL, php_logo_guid);
      break;
    case 2661:
      HASH_INVOKE(0x469199B8FD886A65LL, putenv);
      HASH_INVOKE(0x3590F3AAC94E0A65LL, array_change_key_case);
      break;
    case 2662:
      HASH_INVOKE(0x60C4B9EEDBD5FA66LL, pos);
      break;
    case 2664:
      HASH_INVOKE(0x01DD2057FD9B1A68LL, xmlwriter_write_cdata);
      HASH_INVOKE(0x32AD0455A7689A68LL, magickoilpaintimage);
      break;
    case 2665:
      HASH_INVOKE(0x10CDCF2BB4057A69LL, debug_zval_dump);
      break;
    case 2667:
      HASH_INVOKE(0x0912965F4440FA6BLL, str_repeat);
      break;
    case 2673:
      HASH_INVOKE(0x5B5DA6AD0AD63A71LL, drawannotation);
      break;
    case 2674:
      HASH_INVOKE(0x71AFF1D58D103A72LL, imagefontheight);
      break;
    case 2677:
      HASH_INVOKE(0x7A957BEC6CA57A75LL, preg_replace_callback);
      break;
    case 2681:
      HASH_INVOKE(0x28AC28C54C4E6A79LL, openssl_error_string);
      break;
    case 2685:
      HASH_INVOKE(0x414C2E31304E9A7DLL, stream_get_filters);
      break;
    case 2689:
      HASH_INVOKE(0x09367774F803EA81LL, hphp_recursiveiteratoriterator_valid);
      break;
    case 2690:
      HASH_INVOKE(0x258205B54DC06A82LL, newpixelwands);
      HASH_INVOKE(0x79786FABC5551A82LL, jpeg2wbmp);
      break;
    case 2691:
      HASH_INVOKE(0x11149278DB0A9A83LL, levenshtein);
      break;
    case 2692:
      HASH_INVOKE(0x08C1A5A05B6A0A84LL, ob_get_length);
      break;
    case 2693:
      HASH_INVOKE(0x755DEFDEDF35DA85LL, ctype_print);
      HASH_INVOKE(0x2180916F8D4F6A85LL, drawcomment);
      break;
    case 2695:
      HASH_INVOKE(0x7C5A22328CAB4A87LL, ereg_replace);
      break;
    case 2696:
      HASH_INVOKE(0x1818A3CFBA357A88LL, magicksetwandsize);
      break;
    case 2699:
      HASH_INVOKE(0x7588BD0546C8BA8BLL, hphp_recursivedirectoryiterator_valid);
      HASH_INVOKE(0x7ACBCD9CF335AA8BLL, xmlwriter_start_document);
      break;
    case 2700:
      HASH_INVOKE(0x6A2EEE463F969A8CLL, getservbyname);
      break;
    case 2706:
      HASH_INVOKE(0x1257DB9F159E9A92LL, magickmontageimage);
      break;
    case 2707:
      HASH_INVOKE(0x4A32653C8E719A93LL, pixelgetcyan);
      break;
    case 2708:
      HASH_INVOKE(0x465E6C67F885AA94LL, drawgetstrokelinejoin);
      HASH_INVOKE(0x7761D019E0B5EA94LL, magickstripimage);
      HASH_INVOKE(0x4B1501C4C22FFA94LL, quoted_printable_encode);
      HASH_INVOKE(0x0AC7CBCE30442A94LL, imagepalettecopy);
      break;
    case 2709:
      HASH_INVOKE(0x34B8A4E5AE0EFA95LL, pixelgetopacity);
      break;
    case 2711:
      HASH_INVOKE(0x0089115038C03A97LL, array_diff_ukey);
      break;
    case 2714:
      HASH_INVOKE(0x19AFF8596E19DA9ALL, xhprof_enable);
      break;
    case 2717:
      HASH_INVOKE(0x1234AB687C515A9DLL, mb_encode_numericentity);
      break;
    case 2719:
      HASH_INVOKE(0x2E5E23ECA0525A9FLL, bcadd);
      break;
    case 2720:
      HASH_INVOKE(0x55FAF12AF1920AA0LL, sha1_file);
      break;
    case 2723:
      HASH_INVOKE(0x2B75B48A53AACAA3LL, imagestring);
      break;
    case 2725:
      HASH_INVOKE(0x2418528164415AA5LL, magickscaleimage);
      HASH_INVOKE(0x421C6B40EB370AA5LL, ldap_sasl_bind);
      break;
    case 2726:
      HASH_INVOKE(0x4BBA1E164DF9CAA6LL, localeconv);
      break;
    case 2727:
      HASH_INVOKE(0x797CEC173CBB7AA7LL, ob_get_flush);
      break;
    case 2729:
      HASH_INVOKE(0x2238FC7870E9CAA9LL, strspn);
      break;
    case 2731:
      HASH_INVOKE(0x1331979EF8EF0AABLL, mb_ereg_search);
      break;
    case 2732:
      HASH_INVOKE(0x18CF3E4A60E4AAACLL, pi);
      break;
    case 2738:
      HASH_INVOKE(0x569EED88F20BAAB2LL, drawgettextundercolor);
      HASH_INVOKE(0x62519270CC9F1AB2LL, stream_get_meta_data);
      break;
    case 2740:
      HASH_INVOKE(0x1BAFB965204D0AB4LL, openssl_x509_check_private_key);
      break;
    case 2751:
      HASH_INVOKE(0x030DFC3D3C88BABFLL, filegroup);
      break;
    case 2757:
      HASH_INVOKE(0x3754E97715176AC5LL, hphp_get_stats);
      break;
    case 2759:
      HASH_INVOKE(0x5D2F899A270D9AC7LL, xmlwriter_end_dtd_element);
      HASH_INVOKE(0x79215854355CBAC7LL, proc_get_status);
      HASH_INVOKE(0x3886D2664F874AC7LL, openssl_pkcs7_verify);
      break;
    case 2761:
      HASH_INVOKE(0x5CA9671385EF0AC9LL, sem_release);
      break;
    case 2762:
      HASH_INVOKE(0x45B30CD663284ACALL, is_int);
      break;
    case 2763:
      HASH_INVOKE(0x348888DDF223AACBLL, mt_getrandmax);
      break;
    case 2764:
      HASH_INVOKE(0x750D0396676E6ACCLL, imagecolorexact);
      HASH_INVOKE(0x2BD6476D2C467ACCLL, pagelet_server_task_status);
      break;
    case 2765:
      HASH_INVOKE(0x173EDC165B673ACDLL, magicktransformimage);
      break;
    case 2769:
      HASH_INVOKE(0x47E2B4F7B8DE5AD1LL, xmlwriter_write_dtd_attlist);
      HASH_INVOKE(0x314317450857FAD1LL, ctype_punct);
      break;
    case 2773:
      HASH_INVOKE(0x0D5DAF8034B41AD5LL, get_include_path);
      HASH_INVOKE(0x5338F971C6DCEAD5LL, hphp_splfileinfo_islink);
      break;
    case 2774:
      HASH_INVOKE(0x231BCE6071220AD6LL, drawcircle);
      break;
    case 2776:
      HASH_INVOKE(0x52401023E146AAD8LL, xmlwriter_end_dtd);
      break;
    case 2779:
      HASH_INVOKE(0x24771ED112008ADBLL, echo);
      break;
    case 2780:
      HASH_INVOKE(0x547E7EE64761AADCLL, imagecreatefromxbm);
      break;
    case 2781:
      HASH_INVOKE(0x3E319E451A32FADDLL, magicksharpenimage);
      break;
    case 2782:
      HASH_INVOKE(0x31D1C58F7BD89ADELL, hphp_directoryiterator_seek);
      break;
    case 2788:
      HASH_INVOKE(0x47B15A7136E94AE4LL, strnatcasecmp);
      HASH_INVOKE(0x1827F1C22F1CCAE4LL, hebrevc);
      break;
    case 2790:
      HASH_INVOKE(0x0E09D0FEA30B6AE6LL, hphp_get_function_info);
      break;
    case 2795:
      HASH_INVOKE(0x225F05071947BAEBLL, drawpathlinetoabsolute);
      break;
    case 2797:
      HASH_INVOKE(0x46C33B4739C2FAEDLL, shm_remove_var);
      break;
    case 2798:
      HASH_INVOKE(0x160A82E3E2CBBAEELL, is_finite);
      break;
    case 2800:
      HASH_INVOKE(0x6B259D5D9D681AF0LL, register_postsend_function);
      break;
    case 2804:
      HASH_INVOKE(0x2EC0ABF9A979FAF4LL, ob_get_level);
      break;
    case 2806:
      HASH_INVOKE(0x2C7C9772AE983AF6LL, drawsetgravity);
      break;
    case 2808:
      HASH_INVOKE(0x12859AD75BAF3AF8LL, magickreadimageblob);
      break;
    case 2813:
      HASH_INVOKE(0x16BA422EB6C51AFDLL, gzwrite);
      break;
    case 2814:
      HASH_INVOKE(0x04E86BA79B6CBAFELL, stream_socket_shutdown);
      break;
    case 2815:
      HASH_INVOKE(0x7833F4C337542AFFLL, openssl_pkey_export);
      break;
    case 2817:
      HASH_INVOKE(0x6F3503C7FB12DB01LL, lchgrp);
      break;
    case 2819:
      HASH_INVOKE(0x673A96C50F00FB03LL, str_word_count);
      HASH_INVOKE(0x32458C11C6E74B03LL, pixelsetblackquantum);
      break;
    case 2826:
      HASH_INVOKE(0x14B366EF64A66B0ALL, get_loaded_extensions);
      HASH_INVOKE(0x14AF32A23B507B0ALL, metaphone);
      break;
    case 2829:
      HASH_INVOKE(0x368DBC0699272B0DLL, magicknegateimage);
      break;
    case 2836:
      HASH_INVOKE(0x76675F14C1138B14LL, gzuncompress);
      break;
    case 2837:
      HASH_INVOKE(0x24D0895FBB7BCB15LL, is_callable);
      HASH_INVOKE(0x773E3809C4954B15LL, hphp_recursivedirectoryiterator_current);
      break;
    case 2839:
      HASH_INVOKE(0x66F9A476DAB47B17LL, pixelsetcolor);
      break;
    case 2840:
      HASH_INVOKE(0x70448A629A74FB18LL, ksort);
      break;
    case 2841:
      HASH_INVOKE(0x0551EACBE8278B19LL, decoct);
      break;
    case 2842:
      HASH_INVOKE(0x399522EE0CF3EB1ALL, drawsetstrokewidth);
      break;
    case 2843:
      HASH_INVOKE(0x1B7CE8114AEACB1BLL, magickannotateimage);
      break;
    case 2844:
      HASH_INVOKE(0x249399CEC35B7B1CLL, png2wbmp);
      break;
    case 2845:
      HASH_INVOKE(0x6791459B883F0B1DLL, apache_reset_timeout);
      break;
    case 2846:
      HASH_INVOKE(0x7160AA24D4251B1ELL, mb_strripos);
      break;
    case 2848:
      HASH_INVOKE(0x2563BB012A5C3B20LL, oci_define_by_name);
      HASH_INVOKE(0x1112712715D75B20LL, pixelgetblackquantum);
      break;
    case 2853:
      HASH_INVOKE(0x798F2776FECAEB25LL, get_required_files);
      break;
    case 2854:
      HASH_INVOKE(0x24CE95457EACBB26LL, get_parent_class);
      break;
    case 2857:
      HASH_INVOKE(0x17C38BE3A6EE8B29LL, mysql_field_flags);
      break;
    case 2858:
      HASH_INVOKE(0x1F4984938E1DBB2ALL, sort);
      break;
    case 2860:
      HASH_INVOKE(0x70742211FA3EFB2CLL, imagettftext);
      break;
    case 2865:
      HASH_INVOKE(0x442B1E05FC146B31LL, stream_context_set_param);
      break;
    case 2867:
      HASH_INVOKE(0x00DCD60DD8752B33LL, set_exception_handler);
      HASH_INVOKE(0x4D5D45D1F1EB3B33LL, posix_access);
      break;
    case 2868:
      HASH_INVOKE(0x0B7D52E2540ABB34LL, tan);
      break;
    case 2869:
      HASH_INVOKE(0x78842C1950B38B35LL, drawpathfinish);
      break;
    case 2871:
      HASH_INVOKE(0x053B14F52350FB37LL, socket_shutdown);
      break;
    case 2872:
      HASH_INVOKE(0x68C09D6CB8E79B38LL, class_exists);
      break;
    case 2873:
      HASH_INVOKE(0x02A2C373E54FFB39LL, hash_init);
      break;
    case 2874:
      HASH_INVOKE(0x49A45F75B2B25B3ALL, apd_breakpoint);
      break;
    case 2876:
      HASH_INVOKE(0x35F4A0789F367B3CLL, drawpathlinetohorizontalrelative);
      break;
    case 2878:
      HASH_INVOKE(0x5E2AF775FEB04B3ELL, posix_getppid);
      break;
    case 2879:
      HASH_INVOKE(0x0B07AD87DF1B5B3FLL, urldecode);
      break;
    case 2880:
      HASH_INVOKE(0x24CBCBA5C4407B40LL, evhttp_set_cache);
      break;
    case 2884:
      HASH_INVOKE(0x4E4449EBAADD7B44LL, magickpingimage);
      break;
    case 2885:
      HASH_INVOKE(0x684881C79ED1AB45LL, func_get_args);
      HASH_INVOKE(0x72E3AE55A0B33B45LL, ispixelwand);
      break;
    case 2886:
      HASH_INVOKE(0x00D8FE7A00252B46LL, escapeshellarg);
      break;
    case 2893:
      HASH_INVOKE(0x37DF53E4D9348B4DLL, xbox_post_message);
      break;
    case 2896:
      HASH_INVOKE(0x6237393C71E56B50LL, array_fill_keys);
      break;
    case 2899:
      HASH_INVOKE(0x40F0B69D55F7EB53LL, drawsetstrokealpha);
      break;
    case 2901:
      HASH_INVOKE(0x333FB673518A1B55LL, ldap_get_entries);
      break;
    case 2904:
      HASH_INVOKE(0x6158E2E0A5ACCB58LL, idn_to_ascii);
      break;
    case 2907:
      HASH_INVOKE(0x23FD09A13E0D8B5BLL, xmlwriter_open_memory);
      break;
    case 2913:
      HASH_INVOKE(0x7636825871399B61LL, highlight_file);
      break;
    case 2920:
      HASH_INVOKE(0x674F1DA24EDE7B68LL, xmlwriter_end_attribute);
      break;
    case 2922:
      HASH_INVOKE(0x4BD4E9D9D4A56B6ALL, exif_tagname);
      break;
    case 2923:
      HASH_INVOKE(0x5543A0CACD153B6BLL, substr_replace);
      HASH_INVOKE(0x1D4136B4CEAE4B6BLL, stripcslashes);
      break;
    case 2927:
      HASH_INVOKE(0x2D8D57FC1DC6CB6FLL, import_request_variables);
      break;
    case 2928:
      HASH_INVOKE(0x1A73FD4416FECB70LL, magickwriteimagefile);
      break;
    case 2929:
      HASH_INVOKE(0x5E5C875DB04CFB71LL, drawrectangle);
      break;
    case 2933:
      HASH_INVOKE(0x42F0AED7599C1B75LL, magickechoimageblob);
      break;
    case 2934:
      HASH_INVOKE(0x2A63A0BF9B7E3B76LL, ini_alter);
      break;
    case 2935:
      HASH_INVOKE(0x7F5F29D8E63ABB77LL, mcrypt_module_self_test);
      HASH_INVOKE(0x5025B43B46679B77LL, openssl_x509_free);
      break;
    case 2937:
      HASH_INVOKE(0x31242F51AA828B79LL, drawpoppattern);
      break;
    case 2940:
      HASH_INVOKE(0x3A096F905FBF7B7CLL, magickcommentimage);
      break;
    case 2941:
      HASH_INVOKE(0x28DE19828167FB7DLL, magickmapimage);
      break;
    case 2943:
      HASH_INVOKE(0x308C90AD9478CB7FLL, substr_compare);
      break;
    case 2946:
      HASH_INVOKE(0x5BDE96FD5015AB82LL, base_convert);
      break;
    case 2949:
      HASH_INVOKE(0x41F8FDD700C0CB85LL, socket_last_error);
      break;
    case 2955:
      HASH_INVOKE(0x3B72159A4B04FB8BLL, set_time_limit);
      break;
    case 2957:
      HASH_INVOKE(0x3B831DB1A615FB8DLL, xhprof_sample_enable);
      break;
    case 2958:
      HASH_INVOKE(0x62A4D7A03F7C3B8ELL, ceil);
      break;
    case 2965:
      HASH_INVOKE(0x687104D0A7C11B95LL, oci_new_descriptor);
      break;
    case 2967:
      HASH_INVOKE(0x09837A82A928AB97LL, is_null);
      break;
    case 2969:
      HASH_INVOKE(0x076E66D4089A3B99LL, mb_stripos);
      break;
    case 2970:
      HASH_INVOKE(0x023133732CB51B9ALL, exif_thumbnail);
      break;
    case 2975:
      HASH_INVOKE(0x390A267EC6B51B9FLL, socket_sendto);
      break;
    case 2978:
      HASH_INVOKE(0x4870ADD98EE02BA2LL, pcntl_wifsignaled);
      break;
    case 2979:
      HASH_INVOKE(0x444A3375EFBC2BA3LL, openssl_public_decrypt);
      break;
    case 2980:
      HASH_INVOKE(0x0D95DD13A2D3BBA4LL, drawtranslate);
      break;
    case 2986:
      HASH_INVOKE(0x7C833A303C7CFBAALL, getrandmax);
      break;
    case 2987:
      HASH_INVOKE(0x006481EAF2A70BABLL, ldap_errno);
      break;
    case 2991:
      HASH_INVOKE(0x6A2236CDDFF12BAFLL, magickhaspreviousimage);
      break;
    case 2992:
      HASH_INVOKE(0x1F3E4C6660247BB0LL, imagecolorresolve);
      HASH_INVOKE(0x7D9BF61D6CDE3BB0LL, fb_parallel_query);
      break;
    case 2993:
      HASH_INVOKE(0x04A24B397CF46BB1LL, strrchr);
      break;
    case 2997:
      HASH_INVOKE(0x3F7DCC3A00800BB5LL, imagecolorallocate);
      break;
    case 2998:
      HASH_INVOKE(0x3AD840AB993DDBB6LL, ldap_8859_to_t61);
      break;
    case 3004:
      HASH_INVOKE(0x43B74276235F4BBCLL, is_bool);
      break;
    case 3006:
      HASH_INVOKE(0x79617ED8EFD1ABBELL, get_class_vars);
      HASH_INVOKE(0x3F56AF1511AEDBBELL, magicklabelimage);
      HASH_INVOKE(0x5ECB0B145B88EBBELL, imagefilledarc);
      HASH_INVOKE(0x42684202E2E62BBELL, mcrypt_get_iv_size);
      break;
    case 3015:
      HASH_INVOKE(0x10C5CF7B55173BC7LL, settype);
      break;
    case 3017:
      HASH_INVOKE(0x0B4E7B9180C4ABC9LL, xml_set_end_namespace_decl_handler);
      HASH_INVOKE(0x22BA0903D344CBC9LL, array_rand);
      break;
    case 3018:
      HASH_INVOKE(0x4122DFAC25BDFBCALL, hphp_splfileinfo_getowner);
      break;
    case 3021:
      HASH_INVOKE(0x22251ECF8CD58BCDLL, array_product);
      HASH_INVOKE(0x53A88C8F973CFBCDLL, apc_clear_cache);
      break;
    case 3022:
      HASH_INVOKE(0x45D6BA980AFFDBCELL, msg_get_queue);
      HASH_INVOKE(0x600AFF0A6378ABCELL, is_writeable);
      break;
    case 3024:
      HASH_INVOKE(0x7046755D8374EBD0LL, ctype_digit);
      HASH_INVOKE(0x6846CA07A5E21BD0LL, hphp_directoryiterator___construct);
      break;
    case 3026:
      HASH_INVOKE(0x6FE3C5FF5E883BD2LL, round);
      break;
    case 3028:
      HASH_INVOKE(0x5B2F2A23D8368BD4LL, magickraiseimage);
      HASH_INVOKE(0x4E4EB301A994DBD4LL, drawpolygon);
      break;
    case 3032:
      HASH_INVOKE(0x21E44C7C7A911BD8LL, phpinfo);
      break;
    case 3038:
      HASH_INVOKE(0x58D0D9B66F045BDELL, strpos);
      break;
    case 3040:
      HASH_INVOKE(0x2E10B74DC6067BE0LL, strip_tags);
      break;
    case 3041:
      HASH_INVOKE(0x25FBB61480091BE1LL, mysql_client_encoding);
      break;
    case 3047:
      HASH_INVOKE(0x1BB5D99C1D29CBE7LL, strstr);
      break;
    case 3048:
      HASH_INVOKE(0x4E903B706977ABE8LL, imagepsslantfont);
      break;
    case 3051:
      HASH_INVOKE(0x505B44DDF2383BEBLL, drawgetfillcolor);
      HASH_INVOKE(0x0C1904372E8EDBEBLL, stream_copy_to_stream);
      break;
    case 3052:
      HASH_INVOKE(0x44279BB3E2191BECLL, socket_accept);
      break;
    case 3054:
      HASH_INVOKE(0x03F50E435DE20BEELL, magickclippathimage);
      HASH_INVOKE(0x790B7C44A3442BEELL, asort);
      break;
    case 3056:
      HASH_INVOKE(0x187C049E785A1BF0LL, iconv_get_encoding);
      HASH_INVOKE(0x04C0582DB1AD7BF0LL, mt_srand);
      break;
    case 3057:
      HASH_INVOKE(0x0CA96856E5BEFBF1LL, iptcparse);
      break;
    case 3060:
      HASH_INVOKE(0x1444DB037B4D5BF4LL, imagegammacorrect);
      break;
    case 3062:
      HASH_INVOKE(0x08B4BEBAB3312BF6LL, image_type_to_extension);
      break;
    case 3063:
      HASH_INVOKE(0x74ABB4A1E10BBBF7LL, time);
      break;
    case 3065:
      HASH_INVOKE(0x5B7F6E0A642BBBF9LL, sleep);
      break;
    case 3068:
      HASH_INVOKE(0x64F52E1DB5E95BFCLL, curl_multi_remove_handle);
      break;
    case 3074:
      HASH_INVOKE(0x249340DF734D9C02LL, magickgetimageheight);
      break;
    case 3077:
      HASH_INVOKE(0x2EC378A759F9EC05LL, xbox_task_status);
      break;
    case 3080:
      HASH_INVOKE(0x48E1616EE837FC08LL, is_uploaded_file);
      break;
    case 3083:
      HASH_INVOKE(0x0EEE484739520C0BLL, magickthresholdimage);
      HASH_INVOKE(0x0833BCE91C40CC0BLL, magickqueryconfigureoption);
      break;
    case 3090:
      HASH_INVOKE(0x510B683F2E764C12LL, fb_load_local_databases);
      break;
    case 3099:
      HASH_INVOKE(0x67742A0F218F6C1BLL, posix_initgroups);
      HASH_INVOKE(0x7D615C7E3ADB2C1BLL, xmlwriter_write_comment);
      break;
    case 3100:
      HASH_INVOKE(0x758A62BD65E6FC1CLL, imagegd2);
      break;
    case 3102:
      HASH_INVOKE(0x7039C5EBB1D6BC1ELL, array_walk);
      break;
    case 3103:
      HASH_INVOKE(0x3A5D921797669C1FLL, hphp_log);
      HASH_INVOKE(0x0D321888A29C6C1FLL, oci_fetch_object);
      break;
    case 3104:
      HASH_INVOKE(0x7BD43EB167198C20LL, xmlwriter_write_pi);
      break;
    case 3105:
      HASH_INVOKE(0x0179CBA2C5F4DC21LL, magickgetimageformat);
      break;
    case 3111:
      HASH_INVOKE(0x5A02EE8ED39F0C27LL, posix_getgrnam);
      break;
    case 3112:
      HASH_INVOKE(0x79A4E240F18BAC28LL, rand);
      break;
    case 3115:
      HASH_INVOKE(0x09A98E99D51E8C2BLL, hphp_recursivedirectoryiterator_seek);
      break;
    case 3116:
      HASH_INVOKE(0x116C3EC924B9AC2CLL, imagegd);
      break;
    case 3122:
      HASH_INVOKE(0x0B9B362534621C32LL, isdrawingwand);
      break;
    case 3123:
      HASH_INVOKE(0x49965C44E9EE3C33LL, set_file_buffer);
      break;
    case 3128:
      HASH_INVOKE(0x21564F9315F3FC38LL, drawsettextdecoration);
      break;
    case 3132:
      HASH_INVOKE(0x69488CC69B897C3CLL, hphp_recursiveiteratoriterator_getinneriterator);
      break;
    case 3134:
      HASH_INVOKE(0x15EC581662651C3ELL, date_parse);
      break;
    case 3141:
      HASH_INVOKE(0x6EF89BCAD607CC45LL, strncasecmp);
      break;
    case 3142:
      HASH_INVOKE(0x7D992445F5E37C46LL, magicktextureimage);
      break;
    case 3143:
      HASH_INVOKE(0x44055093E56E4C47LL, mcrypt_enc_get_key_size);
      break;
    case 3146:
      HASH_INVOKE(0x3C23768CFB492C4ALL, gzinflate);
      break;
    case 3150:
      HASH_INVOKE(0x5DAC1C64D8F08C4ELL, openssl_pkey_get_private);
      break;
    case 3152:
      HASH_INVOKE(0x04534F26B8D05C50LL, drawgetstrokecolor);
      break;
    case 3153:
      HASH_INVOKE(0x56EDB60C824E8C51LL, key);
      break;
    case 3154:
      HASH_INVOKE(0x1FC294B806F76C52LL, php_sapi_name);
      break;
    case 3159:
      HASH_INVOKE(0x313E8EB28A111C57LL, hphp_splfileinfo_setinfoclass);
      break;
    case 3160:
      HASH_INVOKE(0x1B8C3DA27170DC58LL, dirname);
      break;
    case 3161:
      HASH_INVOKE(0x57633BDF8DB3FC59LL, i18n_loc_set_attribute);
      break;
    case 3165:
      HASH_INVOKE(0x1F032B064680FC5DLL, oci_field_type);
      break;
    case 3169:
      HASH_INVOKE(0x6E54EEDA1D887C61LL, magicksetimageinterlacescheme);
      HASH_INVOKE(0x5176725DA884DC61LL, curl_setopt);
      break;
    case 3171:
      HASH_INVOKE(0x43C0E9827D502C63LL, array_intersect_assoc);
      break;
    case 3172:
      HASH_INVOKE(0x3409D717D9246C64LL, libxml_use_internal_errors);
      break;
    case 3175:
      HASH_INVOKE(0x07DC355325165C67LL, magickwriteimage);
      break;
    case 3176:
      HASH_INVOKE(0x10D6AE9D688D1C68LL, copy);
      break;
    case 3178:
      HASH_INVOKE(0x41BD9EA0BC5E4C6ALL, move_uploaded_file);
      break;
    case 3179:
      HASH_INVOKE(0x7C6B37BF6300AC6BLL, iconv_mime_encode);
      break;
    case 3185:
      HASH_INVOKE(0x1E074215FE5FCC71LL, set_error_handler);
      break;
    case 3189:
      HASH_INVOKE(0x528366F3195ACC75LL, xbox_task_result);
      break;
    case 3190:
      HASH_INVOKE(0x1C35934C6BC52C76LL, libxml_clear_errors);
      HASH_INVOKE(0x296AFFE84B5E4C76LL, oci_fetch_row);
      break;
    case 3192:
      HASH_INVOKE(0x665F08996BD4AC78LL, magicksetimagegreenprimary);
      break;
    case 3194:
      HASH_INVOKE(0x05D7B804ECDE8C7ALL, checkdnsrr);
      HASH_INVOKE(0x05F3BC04D61CAC7ALL, get_defined_vars);
      break;
    case 3195:
      HASH_INVOKE(0x749E45FBD48BEC7BLL, hphp_recursivedirectoryiterator___tostring);
      break;
    case 3198:
      HASH_INVOKE(0x5F41821072A06C7ELL, hphp_splfileinfo_getctime);
      break;
    case 3201:
      HASH_INVOKE(0x767806D6F1053C81LL, sin);
      break;
    case 3204:
      HASH_INVOKE(0x5D49AF7004696C84LL, shm_detach);
      break;
    case 3205:
      HASH_INVOKE(0x56DA17241B793C85LL, mysql_set_timeout);
      break;
    case 3209:
      HASH_INVOKE(0x0F9C0C82F40F2C89LL, pixelsetcyanquantum);
      break;
    case 3214:
      HASH_INVOKE(0x467470230015AC8ELL, mcrypt_module_is_block_algorithm_mode);
      break;
    case 3215:
      HASH_INVOKE(0x4173EFD9A8EECC8FLL, magicknewimage);
      break;
    case 3216:
      HASH_INVOKE(0x05556EDFC1BB0C90LL, mysql_info);
      HASH_INVOKE(0x3F0C947E68D02C90LL, ini_get_all);
      break;
    case 3217:
      HASH_INVOKE(0x4E04B71729485C91LL, clonedrawingwand);
      break;
    case 3219:
      HASH_INVOKE(0x0F8242C6327B5C93LL, dns_check_record);
      break;
    case 3222:
      HASH_INVOKE(0x47C5BC101A512C96LL, magickquantizeimage);
      break;
    case 3225:
      HASH_INVOKE(0x2EA6E1D600786C99LL, mb_strtoupper);
      break;
    case 3226:
      HASH_INVOKE(0x374F20BDAF709C9ALL, mb_preferred_mime_name);
      break;
    case 3227:
      HASH_INVOKE(0x36F7F9FD7766DC9BLL, xmlwriter_end_comment);
      break;
    case 3230:
      HASH_INVOKE(0x50296037C7968C9ELL, preg_split);
      break;
    case 3233:
      HASH_INVOKE(0x4590B5971EC9ACA1LL, getmygid);
      break;
    case 3235:
      HASH_INVOKE(0x737253E9FC112CA3LL, socket_close);
      break;
    case 3242:
      HASH_INVOKE(0x5B13DE83E2DE0CAALL, oci_rollback);
      HASH_INVOKE(0x653C0D78A3501CAALL, oci_fetch_all);
      break;
    case 3245:
      HASH_INVOKE(0x1C1216F2B7C16CADLL, ftell);
      break;
    case 3246:
      HASH_INVOKE(0x3ACD2F1EA5282CAELL, magickmattefloodfillimage);
      break;
    case 3248:
      HASH_INVOKE(0x373B3FADEACB7CB0LL, openssl_private_encrypt);
      break;
    case 3249:
      HASH_INVOKE(0x40D8DC24FA917CB1LL, hphp_splfileobject_fgetss);
      HASH_INVOKE(0x735555B148E58CB1LL, ldap_read);
      break;
    case 3250:
      HASH_INVOKE(0x56023CC5ECC9ECB2LL, dns_get_mx);
      break;
    case 3252:
      HASH_INVOKE(0x41FBEF9F7A024CB4LL, xmlwriter_end_element);
      HASH_INVOKE(0x742AD1AA5A80ECB4LL, output_reset_rewrite_vars);
      break;
    case 3254:
      HASH_INVOKE(0x560637BE51C36CB6LL, ezmlm_hash);
      break;
    case 3255:
      HASH_INVOKE(0x3DFD5CA79919DCB7LL, imageantialias);
      HASH_INVOKE(0x39E03AAC188D3CB7LL, magickgetimagecompressionquality);
      break;
    case 3259:
      HASH_INVOKE(0x41D3B07854936CBBLL, token_get_all);
      HASH_INVOKE(0x15ACD9F32D214CBBLL, mysql_fetch_lengths);
      break;
    case 3260:
      HASH_INVOKE(0x19C1872E55A7ECBCLL, is_long);
      HASH_INVOKE(0x3978BE548631ECBCLL, hash_final);
      HASH_INVOKE(0x733137183026ACBCLL, hphp_splfileobject_next);
      break;
    case 3264:
      HASH_INVOKE(0x3033FE14E114FCC0LL, magicksetimageblueprimary);
      break;
    case 3266:
      HASH_INVOKE(0x42BCEFCF899D0CC2LL, magickgetimagecolorspace);
      HASH_INVOKE(0x34B6388D7730BCC2LL, drawline);
      break;
    case 3278:
      HASH_INVOKE(0x0183A548B759BCCELL, posix_getpgid);
      HASH_INVOKE(0x66273C5932B1FCCELL, clock_gettime);
      break;
    case 3279:
      HASH_INVOKE(0x407B1F3AFEC43CCFLL, pixelgetblue);
      break;
    case 3281:
      HASH_INVOKE(0x576C5DC462663CD1LL, explode);
      break;
    case 3282:
      HASH_INVOKE(0x1FD3FB2AB0F48CD2LL, magickgetimagesignature);
      break;
    case 3283:
      HASH_INVOKE(0x544302E2FAD3FCD3LL, magicknextimage);
      break;
    case 3284:
      HASH_INVOKE(0x323FE1D92C9B3CD4LL, gzdecode);
      break;
    case 3285:
      HASH_INVOKE(0x757BC444FDF79CD5LL, posix_get_last_error);
      break;
    case 3286:
      HASH_INVOKE(0x11166D3106DB6CD6LL, wandhasexception);
      break;
    case 3289:
      HASH_INVOKE(0x27BFAF1293A60CD9LL, ldap_get_dn);
      break;
    case 3290:
      HASH_INVOKE(0x674AA2DBDA5E4CDALL, imageloadfont);
      HASH_INVOKE(0x09C6455B4BC6FCDALL, drawsetviewbox);
      break;
    case 3300:
      HASH_INVOKE(0x7CDDF96AFEA2DCE4LL, chunk_split);
      break;
    case 3306:
      HASH_INVOKE(0x5A8AF4F880DA4CEALL, mailparse_msg_extract_whole_part_file);
      HASH_INVOKE(0x7821BD05E5228CEALL, imagewbmp);
      break;
    case 3310:
      HASH_INVOKE(0x78FFA0E69D6AACEELL, mcrypt_cfb);
      break;
    case 3311:
      HASH_INVOKE(0x6AA89C314C647CEFLL, magickgetimagehistogram);
      break;
    case 3313:
      HASH_INVOKE(0x21C8FC9A94404CF1LL, php_ini_scanned_files);
      break;
    case 3314:
      HASH_INVOKE(0x26C49BBC67475CF2LL, magicksetimagewhitepoint);
      break;
    case 3315:
      HASH_INVOKE(0x5C1F75D51C077CF3LL, pixelgetindex);
      break;
    case 3319:
      HASH_INVOKE(0x1C30C8470100ECF7LL, mcrypt_enc_is_block_mode);
      break;
    case 3321:
      HASH_INVOKE(0x537CF5DE8C43CCF9LL, curl_getinfo);
      break;
    case 3323:
      HASH_INVOKE(0x09B4EE276DCCFCFBLL, mysql_fetch_row);
      break;
    case 3326:
      HASH_INVOKE(0x768F3E6D1CBA5CFELL, socket_recv);
      break;
    case 3327:
      HASH_INVOKE(0x748D3DFF0EB57CFFLL, uniqid);
      HASH_INVOKE(0x48A2F2A7A4620CFFLL, pixelsetyellowquantum);
      break;
    case 3330:
      HASH_INVOKE(0x018F22AEA371ED02LL, filemtime);
      break;
    case 3331:
      HASH_INVOKE(0x48EE7157C4392D03LL, apache_getenv);
      break;
    case 3332:
      HASH_INVOKE(0x1248250E701DAD04LL, magickgaussianblurimage);
      break;
    case 3334:
      HASH_INVOKE(0x2BA9FB0F8B76DD06LL, number_format);
      break;
    case 3335:
      HASH_INVOKE(0x19B643D858DC6D07LL, magickgetimagerenderingintent);
      break;
    case 3337:
      HASH_INVOKE(0x153F7DBFC9047D09LL, pixelsetred);
      break;
    case 3340:
      HASH_INVOKE(0x30A8326034801D0CLL, mysql_pconnect);
      break;
    case 3341:
      HASH_INVOKE(0x3ACE8A8BC9ACDD0DLL, iconv_mime_decode);
      break;
    case 3344:
      HASH_INVOKE(0x42BEEC88EE81FD10LL, imagechar);
      HASH_INVOKE(0x08F41A00D5D57D10LL, mb_decode_mimeheader);
      HASH_INVOKE(0x5CEFA5A265104D10LL, count);
      break;
    case 3345:
      HASH_INVOKE(0x2D484921B5400D11LL, magickradialblurimage);
      break;
    case 3346:
      HASH_INVOKE(0x5F165B40AEEE5D12LL, hphp_splfileinfo_getfilename);
      break;
    case 3348:
      HASH_INVOKE(0x63837ECAF6235D14LL, preg_replace);
      break;
    case 3351:
      HASH_INVOKE(0x12BB5E00E714ED17LL, magickgetimagecompose);
      break;
    case 3354:
      HASH_INVOKE(0x75DB75CA9DE56D1ALL, xml_parser_get_option);
      HASH_INVOKE(0x39994614C6315D1ALL, hphp_recursivedirectoryiterator_key);
      break;
    case 3355:
      HASH_INVOKE(0x70C22A7EEF54CD1BLL, ldap_compare);
      break;
    case 3359:
      HASH_INVOKE(0x566465036CCBCD1FLL, min);
      break;
    case 3365:
      HASH_INVOKE(0x71DF0C17F47EDD25LL, getprotobynumber);
      break;
    case 3368:
      HASH_INVOKE(0x7C12261259F87D28LL, mcrypt_enc_is_block_algorithm_mode);
      break;
    case 3369:
      HASH_INVOKE(0x632D50B69429ED29LL, socket_set_block);
      break;
    case 3370:
      HASH_INVOKE(0x7A9C06B9CF853D2ALL, substr_count);
      break;
    case 3378:
      HASH_INVOKE(0x4DAC43060BA57D32LL, stream_wrapper_restore);
      break;
    case 3383:
      HASH_INVOKE(0x3ACF745D381E9D37LL, rtrim);
      break;
    case 3384:
      HASH_INVOKE(0x0BA3AD85EB597D38LL, pagelet_server_task_result);
      break;
    case 3387:
      HASH_INVOKE(0x0784B2B034560D3BLL, destroypixelwand);
      HASH_INVOKE(0x6C9AE626DAD02D3BLL, mailparse_msg_extract_part_file);
      break;
    case 3392:
      HASH_INVOKE(0x198627C81DABAD40LL, register_cleanup_function);
      break;
    case 3393:
      HASH_INVOKE(0x6B6DA1EE18673D41LL, xmlwriter_end_dtd_entity);
      break;
    case 3394:
      HASH_INVOKE(0x40497FCA4EC4DD42LL, posix_seteuid);
      HASH_INVOKE(0x298BA735FA3ABD42LL, nl_langinfo);
      break;
    case 3397:
      HASH_INVOKE(0x400A44045A999D45LL, rawurlencode);
      break;
    case 3398:
      HASH_INVOKE(0x502CF4EB0A747D46LL, magicksetimagebias);
      HASH_INVOKE(0x455DB7F86BCEDD46LL, pixelsetopacityquantum);
      HASH_INVOKE(0x59AD2C922FF75D46LL, mdecrypt_generic);
      break;
    case 3401:
      HASH_INVOKE(0x113ED435AEFDDD49LL, imagecolorallocatealpha);
      HASH_INVOKE(0x41785512C45FCD49LL, mysql_ping);
      break;
    case 3407:
      HASH_INVOKE(0x0FBCF35ADD209D4FLL, drawarc);
      break;
    case 3408:
      HASH_INVOKE(0x39B11A2A25E40D50LL, mysql_get_server_info);
      HASH_INVOKE(0x337D2252CDA22D50LL, is_real);
      break;
    case 3413:
      HASH_INVOKE(0x36D672EF4FBEFD55LL, json_encode);
      break;
    case 3416:
      HASH_INVOKE(0x146109BDD2F97D58LL, hphp_splfileobject_setmaxlinelen);
      break;
    case 3418:
      HASH_INVOKE(0x4ACCF26A7AE80D5ALL, imagefilltoborder);
      break;
    case 3419:
      HASH_INVOKE(0x41B5E3D2AADE2D5BLL, drawroundrectangle);
      break;
    case 3420:
      HASH_INVOKE(0x1371413B4F6F8D5CLL, pixelgetred);
      break;
    case 3424:
      HASH_INVOKE(0x6FACBD7F02B6FD60LL, uasort);
      HASH_INVOKE(0x567276D68FE12D60LL, preg_quote);
      break;
    case 3425:
      HASH_INVOKE(0x34F150F3D94E6D61LL, gzpassthru);
      HASH_INVOKE(0x357BAB6E700EBD61LL, destroypixelwandarray);
      break;
    case 3427:
      HASH_INVOKE(0x470A406564DBAD63LL, oci_field_type_raw);
      break;
    case 3430:
      HASH_INVOKE(0x0C393EE8F6540D66LL, bccomp);
      break;
    case 3437:
      HASH_INVOKE(0x21D924BA98BFCD6DLL, file_get_contents);
      HASH_INVOKE(0x7D9E024FD8696D6DLL, get_class);
      HASH_INVOKE(0x4351AFD0FD818D6DLL, magickmotionblurimage);
      break;
    case 3438:
      HASH_INVOKE(0x0B1348D1540E7D6ELL, magicksetimageformat);
      break;
    case 3443:
      HASH_INVOKE(0x7D8DCC72522CBD73LL, mb_detect_encoding);
      break;
    case 3446:
      HASH_INVOKE(0x7467E8107EF08D76LL, unpack);
      break;
    case 3447:
      HASH_INVOKE(0x3ED49C2BBDDFAD77LL, ldap_next_reference);
      break;
    case 3448:
      HASH_INVOKE(0x6352349F97557D78LL, stream_socket_get_name);
      break;
    case 3451:
      HASH_INVOKE(0x680A7EB3DA1F5D7BLL, prev);
      break;
    case 3454:
      HASH_INVOKE(0x384E8BC9B5FE2D7ELL, magickfximage);
      break;
    case 3455:
      HASH_INVOKE(0x4E19AFB75A62AD7FLL, imagerotate);
      break;
    case 3457:
      HASH_INVOKE(0x25EA810DAEA74D81LL, ob_clean);
      break;
    case 3458:
      HASH_INVOKE(0x2D15262403ADDD82LL, drawcomposite);
      break;
    case 3459:
      HASH_INVOKE(0x1B0FF5C02F571D83LL, fb_rename_function);
      break;
    case 3463:
      HASH_INVOKE(0x344091B785FE8D87LL, socket_set_timeout);
      break;
    case 3464:
      HASH_INVOKE(0x2AFF8525E93D6D88LL, drawsetfillopacity);
      HASH_INVOKE(0x1F22C82816F9AD88LL, hphp_splfileinfo_getpath);
      break;
    case 3465:
      HASH_INVOKE(0x230E7AD147721D89LL, end);
      break;
    case 3470:
      HASH_INVOKE(0x6A351AEDFC4D0D8ELL, magickgetimagemimetype);
      break;
    case 3471:
      HASH_INVOKE(0x1806DC9468882D8FLL, gzfile);
      break;
    case 3472:
      HASH_INVOKE(0x5E4360FC28D0AD90LL, magicksetinterlacescheme);
      break;
    case 3473:
      HASH_INVOKE(0x48444F8F18E60D91LL, strftime);
      HASH_INVOKE(0x7C2B3FE61FBDFD91LL, openssl_pkey_get_details);
      break;
    case 3480:
      HASH_INVOKE(0x06A796D329C21D98LL, call_user_func);
      break;
    case 3486:
      HASH_INVOKE(0x30C1AE2B06990D9ELL, gzseek);
      break;
    case 3488:
      HASH_INVOKE(0x73B43ABDD5C61DA0LL, shuffle);
      HASH_INVOKE(0x5E8606470A09BDA0LL, magickposterizeimage);
      HASH_INVOKE(0x7084C6294240CDA0LL, octdec);
      HASH_INVOKE(0x167A11C41EB71DA0LL, pixelgetexceptiontype);
      break;
    case 3490:
      HASH_INVOKE(0x71583A8FEF5C7DA2LL, sys_get_temp_dir);
      break;
    case 3494:
      HASH_INVOKE(0x28DC1AD6DA9E7DA6LL, gethostbyname);
      break;
    case 3496:
      HASH_INVOKE(0x572AE270D9E4FDA8LL, socket_set_option);
      HASH_INVOKE(0x474A096265502DA8LL, glob);
      break;
    case 3498:
      HASH_INVOKE(0x6326C14D0FFA7DAALL, fb_thrift_serialize);
      break;
    case 3499:
      HASH_INVOKE(0x188720048AB37DABLL, magickquantizeimages);
      HASH_INVOKE(0x66764CAABFF4CDABLL, array_keys);
      break;
    case 3505:
      HASH_INVOKE(0x67EAC6D7332F3DB1LL, hphp_splfileobject_fgetcsv);
      break;
    case 3506:
      HASH_INVOKE(0x257371BC40186DB2LL, magickblurimage);
      break;
    case 3507:
      HASH_INVOKE(0x628069E483F35DB3LL, hphp_splfileobject_fstat);
      HASH_INVOKE(0x53F2C6F5AE244DB3LL, drawpushdefs);
      break;
    case 3512:
      HASH_INVOKE(0x2B1D442AEA06ADB8LL, strpbrk);
      break;
    case 3514:
      HASH_INVOKE(0x5E0C6E797607DDBALL, mysql_result);
      HASH_INVOKE(0x7964DE73DCA17DBALL, magickhasnextimage);
      break;
    case 3516:
      HASH_INVOKE(0x770DEDCB168B0DBCLL, mb_ereg_search_setpos);
      break;
    case 3517:
      HASH_INVOKE(0x48AA091B1E493DBDLL, setlocale);
      HASH_INVOKE(0x01E6FF7D9746CDBDLL, stream_socket_accept);
      break;
    case 3521:
      HASH_INVOKE(0x683E88F441F9BDC1LL, chgrp);
      break;
    case 3523:
      HASH_INVOKE(0x069EE6F604BA2DC3LL, array_reverse);
      HASH_INVOKE(0x0433140BB339DDC3LL, log);
      break;
    case 3524:
      HASH_INVOKE(0x2A38BA8B4A0F9DC4LL, apc_fetch);
      break;
    case 3526:
      HASH_INVOKE(0x73210FEAA2EACDC6LL, imagecolorsforindex);
      break;
    case 3528:
      HASH_INVOKE(0x66C3E73210067DC8LL, magickgetimageunits);
      break;
    case 3530:
      HASH_INVOKE(0x3BB701F2BDD0ADCALL, magickgetimageprofile);
      break;
    case 3534:
      HASH_INVOKE(0x3E5C990C32470DCELL, array_combine);
      HASH_INVOKE(0x4AD5B65BCE665DCELL, array_key_exists);
      HASH_INVOKE(0x40C3C7DE46D62DCELL, ob_start);
      break;
    case 3536:
      HASH_INVOKE(0x0E1C354339208DD0LL, imagetypes);
      break;
    case 3541:
      HASH_INVOKE(0x7E1801C8E70D1DD5LL, imagefontwidth);
      break;
    case 3543:
      HASH_INVOKE(0x638690DF6D06FDD7LL, imageconvolution);
      HASH_INVOKE(0x1AE08377A1630DD7LL, mysql_insert_id);
      break;
    case 3548:
      HASH_INVOKE(0x5EBE067E3FAECDDCLL, ob_gzhandler);
      HASH_INVOKE(0x2497295AC9F72DDCLL, stream_set_blocking);
      break;
    case 3549:
      HASH_INVOKE(0x3B00B916C3682DDDLL, ctype_upper);
      break;
    case 3560:
      HASH_INVOKE(0x47A4BA8616D02DE8LL, restore_exception_handler);
      break;
    case 3564:
      HASH_INVOKE(0x5B51DD18C3E13DECLL, openssl_x509_parse);
      HASH_INVOKE(0x5ABB7486CE861DECLL, array_merge_recursive);
      break;
    case 3567:
      HASH_INVOKE(0x0BB22147ADADDDEFLL, pfsockopen);
      HASH_INVOKE(0x72293DCE8CC4BDEFLL, htmlspecialchars);
      break;
    case 3571:
      HASH_INVOKE(0x7AE1BE187F18FDF3LL, fgets);
      break;
    case 3572:
      HASH_INVOKE(0x73B30E65808A6DF4LL, ctype_xdigit);
      HASH_INVOKE(0x5046A0D9DFDB5DF4LL, strcspn);
      break;
    case 3575:
      HASH_INVOKE(0x23E563F1EC919DF7LL, hphp_splfileinfo_getpathname);
      break;
    case 3576:
      HASH_INVOKE(0x5E43280BC8DD1DF8LL, magicktrimimage);
      break;
    case 3579:
      HASH_INVOKE(0x47C62D58B0B65DFBLL, thrift_protocol_write_binary);
      break;
    case 3580:
      HASH_INVOKE(0x0432ED7109BBCDFCLL, oci_cancel);
      break;
    case 3582:
      HASH_INVOKE(0x21F24104004CFDFELL, evhttp_post);
      HASH_INVOKE(0x072690BF719D7DFELL, hphp_recursivedirectoryiterator_rewind);
      break;
    case 3586:
      HASH_INVOKE(0x7829D2171DFBFE02LL, magickgetimagegamma);
      break;
    case 3596:
      HASH_INVOKE(0x3AD6E084483B2E0CLL, array_udiff_assoc);
      break;
    case 3597:
      HASH_INVOKE(0x5EB0A2F93E650E0DLL, array_diff_key);
      HASH_INVOKE(0x756B92411E7FBE0DLL, stream_get_wrappers);
      break;
    case 3598:
      HASH_INVOKE(0x5230E4C9D8D64E0ELL, highlight_string);
      break;
    case 3602:
      HASH_INVOKE(0x05FAA2085D94FE12LL, urlencode);
      HASH_INVOKE(0x76636D0F0C090E12LL, curl_copy_handle);
      break;
    case 3604:
      HASH_INVOKE(0x41E394B12170BE14LL, socket_send);
      HASH_INVOKE(0x3192209D50C1FE14LL, pixelsetalpha);
      break;
    case 3605:
      HASH_INVOKE(0x525F197D74423E15LL, get_resource_type);
      break;
    case 3607:
      HASH_INVOKE(0x0F5759A501FAFE17LL, imagecreatefromgd2part);
      HASH_INVOKE(0x3D13FD5FE3AF6E17LL, imagestringup);
      break;
    case 3609:
      HASH_INVOKE(0x4A694B42B21A9E19LL, destroymagickwand);
      break;
    case 3611:
      HASH_INVOKE(0x7FA0B63054221E1BLL, magickrollimage);
      break;
    case 3616:
      HASH_INVOKE(0x7BDA47B5C47EAE20LL, fread);
      break;
    case 3617:
      HASH_INVOKE(0x5B7F218FA08D8E21LL, imagefilledellipse);
      break;
    case 3621:
      HASH_INVOKE(0x1C6246FA51EBDE25LL, hphp_get_static_property);
      break;
    case 3624:
      HASH_INVOKE(0x3456885FF0679E28LL, lchown);
      break;
    case 3625:
      HASH_INVOKE(0x73FE5C79E14A0E29LL, pixelsetbluequantum);
      break;
    case 3629:
      HASH_INVOKE(0x7817FA38BAAEFE2DLL, fsockopen);
      break;
    case 3630:
      HASH_INVOKE(0x3E62C1A48E9EEE2ELL, hphp_splfileinfo_getsize);
      break;
    case 3634:
      HASH_INVOKE(0x000AAF93F814AE32LL, drawsetvectorgraphics);
      break;
    case 3635:
      HASH_INVOKE(0x38433635F28B4E33LL, is_readable);
      break;
    case 3638:
      HASH_INVOKE(0x2E42ED1E15CCFE36LL, mysql_affected_rows);
      break;
    case 3642:
      HASH_INVOKE(0x6E2CF6ECA0987E3ALL, get_headers);
      HASH_INVOKE(0x13048F0A79F7CE3ALL, magicksetsamplingfactors);
      break;
    case 3648:
      HASH_INVOKE(0x11681FDE841D0E40LL, drawskewy);
      break;
    case 3650:
      HASH_INVOKE(0x160B01F095B20E42LL, mb_output_handler);
      break;
    case 3654:
      HASH_INVOKE(0x7F4C1DF551150E46LL, pixelgetnextiteratorrow);
      break;
    case 3660:
      HASH_INVOKE(0x1EEBDFD62B6BEE4CLL, mcrypt_module_get_algo_block_size);
      break;
    case 3661:
      HASH_INVOKE(0x261E9B559C495E4DLL, oci_set_prefetch);
      break;
    case 3663:
      HASH_INVOKE(0x62C934CD93938E4FLL, magickimplodeimage);
      break;
    case 3664:
      HASH_INVOKE(0x4022005DE7E24E50LL, openssl_pkcs7_sign);
      break;
    case 3668:
      HASH_INVOKE(0x6BF155774D546E54LL, define_syslog_variables);
      HASH_INVOKE(0x7B6BF544EB420E54LL, hphp_recursivedirectoryiterator_haschildren);
      break;
    case 3671:
      HASH_INVOKE(0x2DEF52641933CE57LL, magickgetimagemattecolor);
      break;
    case 3675:
      HASH_INVOKE(0x299F1A5895461E5BLL, curl_multi_close);
      break;
    case 3676:
      HASH_INVOKE(0x532D0D905CE60E5CLL, posix_times);
      break;
    case 3677:
      HASH_INVOKE(0x38373F6643B14E5DLL, ldap_parse_reference);
      break;
    case 3681:
      HASH_INVOKE(0x593EA675D239CE61LL, ldap_first_reference);
      break;
    case 3682:
      HASH_INVOKE(0x7639C74DBC4F4E62LL, array_splice);
      break;
    case 3683:
      HASH_INVOKE(0x4B6FE37D66784E63LL, imagesy);
      HASH_INVOKE(0x5697E5F6AAF47E63LL, mb_http_input);
      break;
    case 3684:
      HASH_INVOKE(0x4F0DF8BBC4340E64LL, stream_socket_server);
      break;
    case 3686:
      HASH_INVOKE(0x6CB3DEB458A2DE66LL, apc_bin_load);
      break;
    case 3688:
      HASH_INVOKE(0x5B1DFB89BFC1CE68LL, realpath);
      break;
    case 3689:
      HASH_INVOKE(0x24B836D2C79D0E69LL, magickgetimagepixels);
      break;
    case 3690:
      HASH_INVOKE(0x2F9816D9A2B2CE6ALL, mysql_set_charset);
      HASH_INVOKE(0x25C0C5E961AFDE6ALL, xmlwriter_full_end_element);
      break;
    case 3693:
      HASH_INVOKE(0x714001ABB0D76E6DLL, magickgetinterlacescheme);
      break;
    case 3695:
      HASH_INVOKE(0x7E6223D0CF184E6FLL, magickqueryformats);
      break;
    case 3697:
      HASH_INVOKE(0x6AC126DCE941FE71LL, memory_get_peak_usage);
      break;
    case 3700:
      HASH_INVOKE(0x47D0510206B89E74LL, ini_restore);
      break;
    case 3701:
      HASH_INVOKE(0x4EC7C66593DDEE75LL, sql_regcase);
      break;
    case 3702:
      HASH_INVOKE(0x36E9EC047FC73E76LL, mb_convert_encoding);
      break;
    case 3703:
      HASH_INVOKE(0x12B7B2D835B80E77LL, chmod);
      break;
    case 3706:
      HASH_INVOKE(0x6A3D9F8EDB005E7ALL, flush);
      break;
    case 3708:
      HASH_INVOKE(0x4D9C5B9A944CCE7CLL, convert_uudecode);
      break;
    case 3710:
      HASH_INVOKE(0x51060D186C703E7ELL, headers_list);
      break;
    case 3713:
      HASH_INVOKE(0x0ECFC3676B4FDE81LL, chr);
      break;
    case 3714:
      HASH_INVOKE(0x379F7BF525FF1E82LL, magicksetimagecolorspace);
      break;
    case 3715:
      HASH_INVOKE(0x724011CF7C31AE83LL, sqrt);
      break;
    case 3716:
      HASH_INVOKE(0x1765A63835CC4E84LL, drawgetfontfamily);
      break;
    case 3717:
      HASH_INVOKE(0x4710320ED6638E85LL, rename_function);
      break;
    case 3720:
      HASH_INVOKE(0x1569DCC552EE8E88LL, cosh);
      break;
    case 3722:
      HASH_INVOKE(0x15C9E5C16374EE8ALL, gzclose);
      break;
    case 3726:
      HASH_INVOKE(0x29A2FBD427647E8ELL, mysql_connect);
      break;
    case 3728:
      HASH_INVOKE(0x33D6CC3959D3CE90LL, clearmagickwand);
      break;
    case 3731:
      HASH_INVOKE(0x5E968924197F5E93LL, mcrypt_ofb);
      HASH_INVOKE(0x37A9E8F91C33EE93LL, magickborderimage);
      break;
    case 3735:
      HASH_INVOKE(0x6254E9BDC11F3E97LL, imagecreatefromgd2);
      break;
    case 3739:
      HASH_INVOKE(0x2A019CAA1188BE9BLL, preg_grep);
      break;
    case 3742:
      HASH_INVOKE(0x76EBE919625D8E9ELL, openssl_pkcs12_export);
      break;
    case 3743:
      HASH_INVOKE(0x7CFF820207DC6E9FLL, debug_backtrace);
      break;
    case 3744:
      HASH_INVOKE(0x37C5AF6E7E8B5EA0LL, fputs);
      break;
    case 3747:
      HASH_INVOKE(0x6467FFB910B8BEA3LL, magickspliceimage);
      break;
    case 3752:
      HASH_INVOKE(0x3C6190E9534F3EA8LL, ebcdic2ascii);
      break;
    case 3753:
      HASH_INVOKE(0x308D76DB12424EA9LL, magicksetimageindex);
      break;
    case 3755:
      HASH_INVOKE(0x632D4FC346797EABLL, pixelgetexceptionstring);
      break;
    case 3758:
      HASH_INVOKE(0x5772A0B8C16DAEAELL, posix_setuid);
      break;
    case 3759:
      HASH_INVOKE(0x12D83A92EFB0EEAFLL, xmlwriter_open_uri);
      break;
    case 3761:
      HASH_INVOKE(0x33FE101882726EB1LL, proc_close);
      break;
    case 3763:
      HASH_INVOKE(0x7DB9D839ACE0DEB3LL, natsort);
      HASH_INVOKE(0x7379B5B97EC2EEB3LL, hypot);
      break;
    case 3767:
      HASH_INVOKE(0x58B9EFA0FB35FEB7LL, stream_filter_prepend);
      break;
    case 3769:
      HASH_INVOKE(0x2A483AD7A3D07EB9LL, magickgetwandsize);
      break;
    case 3770:
      HASH_INVOKE(0x1F5B2728DE875EBALL, magicksetimage);
      break;
    case 3776:
      HASH_INVOKE(0x2475D7045D9DEEC0LL, magicksetimagecompression);
      HASH_INVOKE(0x495316E596537EC0LL, imagefttext);
      break;
    case 3778:
      HASH_INVOKE(0x4CDD0B7BF826FEC2LL, rewinddir);
      break;
    case 3780:
      HASH_INVOKE(0x7052903F1B17AEC4LL, parse_str);
      break;
    case 3781:
      HASH_INVOKE(0x7D69B3537C353EC5LL, hphp_splfileinfo_isfile);
      break;
    case 3785:
      HASH_INVOKE(0x58C8DCAAE5B7CEC9LL, get_cfg_var);
      break;
    case 3786:
      HASH_INVOKE(0x08E6C1CD3AC64ECALL, hphp_splfileinfo_gettype);
      HASH_INVOKE(0x1AA83A1057BE6ECALL, mysql_field_len);
      break;
    case 3794:
      HASH_INVOKE(0x3CCD09EC3511CED2LL, apd_stop_trace);
      break;
    case 3798:
      HASH_INVOKE(0x134B37520683DED6LL, imagesetbrush);
      break;
    case 3800:
      HASH_INVOKE(0x338D9D95095D1ED8LL, magicksetimagedelay);
      break;
    case 3801:
      HASH_INVOKE(0x7F802A06996BBED9LL, apd_set_browser_trace);
      break;
    case 3802:
      HASH_INVOKE(0x29E2771785CCBEDALL, magickgettextdescent);
      break;
    case 3803:
      HASH_INVOKE(0x16331E18B5CD8EDBLL, timezone_open);
      HASH_INVOKE(0x1340509769275EDBLL, magickgetimagecompression);
      break;
    case 3808:
      HASH_INVOKE(0x7A1C6E429399CEE0LL, iconv_set_encoding);
      break;
    case 3811:
      HASH_INVOKE(0x28A98134BD97BEE3LL, mb_regex_encoding);
      HASH_INVOKE(0x0E1368A3BDFE6EE3LL, hphp_recursiveiteratoriterator_rewind);
      break;
    case 3812:
      HASH_INVOKE(0x5B6FF42ACB2FBEE4LL, getmyuid);
      break;
    case 3813:
      HASH_INVOKE(0x367CFD20B4446EE5LL, is_array);
      break;
    case 3816:
      HASH_INVOKE(0x6CB6650E66CE4EE8LL, magicksetimagebordercolor);
      HASH_INVOKE(0x32B3951DFD2B9EE8LL, hphp_directoryiterator_isdot);
      break;
    case 3819:
      HASH_INVOKE(0x72882DBF2D49CEEBLL, set_magic_quotes_runtime);
      break;
    case 3824:
      HASH_INVOKE(0x7DFF9707F1CD9EF0LL, dangling_server_proxy_old_request);
      break;
    case 3832:
      HASH_INVOKE(0x33FD10AC81146EF8LL, thrift_protocol_read_binary);
      break;
    case 3833:
      HASH_INVOKE(0x200FC256EB093EF9LL, gettimeofday);
      break;
    case 3835:
      HASH_INVOKE(0x6D450F078F02BEFBLL, apd_continue);
      break;
    case 3837:
      HASH_INVOKE(0x0CF27A6BC84CEEFDLL, openssl_get_publickey);
      HASH_INVOKE(0x283E167EB3F04EFDLL, posix_getgid);
      break;
    case 3840:
      HASH_INVOKE(0x09637D7CA2E33F00LL, fgetc);
      break;
    case 3841:
      HASH_INVOKE(0x66137942508EBF01LL, date_create);
      HASH_INVOKE(0x7B6A0D7510184F01LL, mysql_fetch_assoc);
      break;
    case 3842:
      HASH_INVOKE(0x78A02A603FA6FF02LL, magickreducenoiseimage);
      break;
    case 3845:
      HASH_INVOKE(0x6842585E79988F05LL, magickmosaicimages);
      break;
    case 3846:
      HASH_INVOKE(0x1D3B08AA0AF50F06LL, gettype);
      HASH_INVOKE(0x6692475BA65A2F06LL, imagearc);
      break;
    case 3851:
      HASH_INVOKE(0x7756593AAC1F6F0BLL, imagecreatefromstring);
      break;
    case 3855:
      HASH_INVOKE(0x61E7A36CA7FF5F0FLL, drawsetcliprule);
      HASH_INVOKE(0x4BD54A631F665F0FLL, drawpathcurvetosmoothabsolute);
      break;
    case 3856:
      HASH_INVOKE(0x700A75BF904DAF10LL, magickgetcharwidth);
      break;
    case 3858:
      HASH_INVOKE(0x042492DDA48C4F12LL, gzdeflate);
      break;
    case 3860:
      HASH_INVOKE(0x04525BA2AE51EF14LL, date_sun_info);
      break;
    case 3861:
      HASH_INVOKE(0x12F09EAED9078F15LL, mysql_fetch_field);
      break;
    case 3862:
      HASH_INVOKE(0x23B7D9E4EC992F16LL, stream_get_line);
      HASH_INVOKE(0x38664EFE3E0A0F16LL, json_decode);
      break;
    case 3867:
      HASH_INVOKE(0x27A4633381195F1BLL, chown);
      break;
    case 3871:
      HASH_INVOKE(0x7C0C145EFE0EBF1FLL, defined);
      break;
    case 3872:
      HASH_INVOKE(0x2C4206A0BD904F20LL, hphp_splfileobject_fseek);
      break;
    case 3873:
      HASH_INVOKE(0x4282496A4BF42F21LL, php_uname);
      HASH_INVOKE(0x77EC28645855AF21LL, magicksetcompressionquality);
      HASH_INVOKE(0x1FF5B9A4FC78BF21LL, drawsettextantialias);
      break;
    case 3876:
      HASH_INVOKE(0x05BD68F1D09CEF24LL, array_count_values);
      HASH_INVOKE(0x5FA07E8B63BEAF24LL, mcrypt_enc_get_modes_name);
      break;
    case 3879:
      HASH_INVOKE(0x4BAA5B688E6F6F27LL, gd_info);
      break;
    case 3884:
      HASH_INVOKE(0x035EFF9E1757DF2CLL, http_build_query);
      break;
    case 3890:
      HASH_INVOKE(0x78257F34467BDF32LL, drawsetstrokedasharray);
      HASH_INVOKE(0x2B66EACB77AE9F32LL, print_r);
      break;
    case 3897:
      HASH_INVOKE(0x0D4446B2DBC8EF39LL, hphp_splfileinfo_getinode);
      HASH_INVOKE(0x3E9146C06AAEFF39LL, magicksetimagecompressionquality);
      HASH_INVOKE(0x496CF4113CEA8F39LL, magicksetimagefilename);
      break;
    case 3899:
      HASH_INVOKE(0x7EE74F798791CF3BLL, magickedgeimage);
      break;
    case 3903:
      HASH_INVOKE(0x1A9EFDD653DB8F3FLL, pcntl_wstopsig);
      break;
    case 3906:
      HASH_INVOKE(0x3B46305DA1154F42LL, drawpopclippath);
      break;
    case 3909:
      HASH_INVOKE(0x4E36A077234B8F45LL, pixelgetblack);
      HASH_INVOKE(0x79265AADD9A8AF45LL, mcrypt_cbc);
      HASH_INVOKE(0x5D3A31AB0E326F45LL, crc32);
      break;
    case 3910:
      HASH_INVOKE(0x079EA27F72594F46LL, gzgets);
      break;
    case 3920:
      HASH_INVOKE(0x7978A278AEAFAF50LL, pixelgetmagenta);
      break;
    case 3926:
      HASH_INVOKE(0x621590803EC88F56LL, imageline);
      break;
    case 3928:
      HASH_INVOKE(0x0551AAE8F1A6FF58LL, magicklevelimage);
      break;
    case 3929:
      HASH_INVOKE(0x38246B6BDE246F59LL, magickgetimagedispose);
      break;
    case 3931:
      HASH_INVOKE(0x24F698A8A4B5AF5BLL, imagecolordeallocate);
      HASH_INVOKE(0x76418F884500DF5BLL, stream_socket_enable_crypto);
      break;
    case 3933:
      HASH_INVOKE(0x07FF92CF46DDFF5DLL, imagepsfreefont);
      break;
    case 3936:
      HASH_INVOKE(0x4F1D2858AD31AF60LL, imagecreatefromgd);
      break;
    case 3938:
      HASH_INVOKE(0x463A00D839C51F62LL, oci_fetch_array);
      break;
    case 3939:
      HASH_INVOKE(0x1FFD204252F60F63LL, magicksetimageprofile);
      break;
    case 3940:
      HASH_INVOKE(0x280051555A21DF64LL, rename);
      break;
    case 3942:
      HASH_INVOKE(0x6FFF1304EA444F66LL, drawsetstrokemiterlimit);
      break;
    case 3943:
      HASH_INVOKE(0x319407AC92912F67LL, ereg);
      break;
    case 3946:
      HASH_INVOKE(0x1670096FDE27AF6ALL, rewind);
      break;
    case 3948:
      HASH_INVOKE(0x23D5E9E53D11BF6CLL, gmdate);
      break;
    case 3950:
      HASH_INVOKE(0x3A56371CDDEA0F6ELL, gzgetc);
      break;
    case 3951:
      HASH_INVOKE(0x42C4EC9D9F782F6FLL, htmlentities);
      break;
    case 3952:
      HASH_INVOKE(0x68C257B62A36EF70LL, magicksetimagebackgroundcolor);
      HASH_INVOKE(0x71557D108E5C0F70LL, xml_set_object);
      break;
    case 3954:
      HASH_INVOKE(0x4B22EF06BAA83F72LL, version_compare);
      break;
    case 3956:
      HASH_INVOKE(0x18BC9BF6D1E3CF74LL, magickpreviewimages);
      break;
    case 3961:
      HASH_INVOKE(0x4BE9D91DD8624F79LL, money_format);
      break;
    case 3962:
      HASH_INVOKE(0x7B0E6DB649084F7ALL, clearstatcache);
      break;
    case 3966:
      HASH_INVOKE(0x7064BEBF508F3F7ELL, socket_read);
      break;
    case 3968:
      HASH_INVOKE(0x63F18DE0DB807F80LL, magickqueryfonts);
      break;
    case 3972:
      HASH_INVOKE(0x14402B01D00E9F84LL, magicksteganoimage);
      break;
    case 3973:
      HASH_INVOKE(0x7EF68B9A55222F85LL, wandgetexceptionstring);
      break;
    case 3974:
      HASH_INVOKE(0x44CE4DB1CE7E9F86LL, flock);
      break;
    case 3977:
      HASH_INVOKE(0x13F52A829BAC0F89LL, timezone_identifiers_list);
      break;
    case 3979:
      HASH_INVOKE(0x2755DD4112AA5F8BLL, magicksampleimage);
      HASH_INVOKE(0x3703D22147C24F8BLL, pixelsetcyan);
      break;
    case 3982:
      HASH_INVOKE(0x7A8F1104B0CCDF8ELL, phpcredits);
      break;
    case 3983:
      HASH_INVOKE(0x4A6C46DC7FE29F8FLL, hphp_recursivedirectoryiterator_getchildren);
      break;
    case 3985:
      HASH_INVOKE(0x78463112BE739F91LL, connection_timeout);
      break;
    case 3986:
      HASH_INVOKE(0x288D61E7DE28AF92LL, ucwords);
      break;
    case 3988:
      HASH_INVOKE(0x76B9D87BC7F02F94LL, preg_match);
      break;
    case 3989:
      HASH_INVOKE(0x40D620CBA0D41F95LL, opendir);
      break;
    case 3991:
      HASH_INVOKE(0x35117886C885DF97LL, hphp_recursivedirectoryiterator_getsubpathname);
      HASH_INVOKE(0x6F9651265C096F97LL, magickreadimages);
      break;
    case 3992:
      HASH_INVOKE(0x0293F60B46511F98LL, drawsetfontstretch);
      HASH_INVOKE(0x66F1F0DB16C82F98LL, imagesavealpha);
      break;
    case 3994:
      HASH_INVOKE(0x2B7CAC006AF27F9ALL, fflush);
      break;
    case 3997:
      HASH_INVOKE(0x0AD6DE8829773F9DLL, apc_compile_file);
      break;
    case 4004:
      HASH_INVOKE(0x0E7E9AA21AE99FA4LL, hphp_recursiveiteratoriterator_current);
      break;
    case 4006:
      HASH_INVOKE(0x0DEEA8C3E3A47FA6LL, read_exif_data);
      break;
    case 4013:
      HASH_INVOKE(0x73A9C0E0C8344FADLL, oci_free_statement);
      break;
    case 4014:
      HASH_INVOKE(0x64D269A505D51FAELL, array_map);
      break;
    case 4015:
      HASH_INVOKE(0x03979AACDBB24FAFLL, mailparse_msg_get_part);
      break;
    case 4016:
      HASH_INVOKE(0x4A0B5F4676578FB0LL, imagecolorresolvealpha);
      break;
    case 4017:
      HASH_INVOKE(0x0F78ECF42C30DFB1LL, array_chunk);
      break;
    case 4020:
      HASH_INVOKE(0x3900FDF1C97BEFB4LL, drawrotate);
      break;
    case 4022:
      HASH_INVOKE(0x56C0CCB57BB6EFB6LL, magicksetimageunits);
      HASH_INVOKE(0x2B451EF5D52C4FB6LL, array_diff);
      break;
    case 4023:
      HASH_INVOKE(0x6465CD999F4C5FB7LL, hphp_invoke_method);
      break;
    case 4024:
      HASH_INVOKE(0x6DB2DB341ECF3FB8LL, file_exists);
      break;
    case 4026:
      HASH_INVOKE(0x0664323CB1CC2FBALL, imagecolorset);
      break;
    case 4031:
      HASH_INVOKE(0x70B38AB9EAE16FBFLL, ini_set);
      break;
    case 4034:
      HASH_INVOKE(0x6CA22E62D4762FC2LL, magickpainttransparentimage);
      break;
    case 4037:
      HASH_INVOKE(0x38498DD4C28D0FC5LL, hphp_splfileinfo_getatime);
      break;
    case 4043:
      HASH_INVOKE(0x38237A4515F42FCBLL, array_pad);
      break;
    case 4045:
      HASH_INVOKE(0x474566F3A2BE0FCDLL, mcrypt_enc_is_block_algorithm);
      break;
    case 4046:
      HASH_INVOKE(0x042193C97C65FFCELL, magickwaveimage);
      break;
    case 4047:
      HASH_INVOKE(0x3A3CFC1F001A6FCFLL, magickreadimagefile);
      break;
    case 4048:
      HASH_INVOKE(0x2EAA47FA6C3FEFD0LL, drawgetstrokealpha);
      HASH_INVOKE(0x53DB5D0490C51FD0LL, xhprof_sample_disable);
      break;
    case 4052:
      HASH_INVOKE(0x4970B72A182E4FD4LL, readdir);
      break;
    case 4053:
      HASH_INVOKE(0x751283FE764CAFD5LL, mysql_select_db);
      break;
    case 4054:
      HASH_INVOKE(0x7FC00035D14B9FD6LL, apc_delete_file);
      break;
    case 4056:
      HASH_INVOKE(0x4234F2B59531FFD8LL, posix_getlogin);
      break;
    case 4061:
      HASH_INVOKE(0x4EDEDA4278CD3FDDLL, magickchopimage);
      break;
    case 4062:
      HASH_INVOKE(0x7F5FC3CAF8CE9FDELL, gzcompress);
      HASH_INVOKE(0x72925D2DF7E61FDELL, drawpathcurvetoquadraticbeziersmoothrelative);
      break;
    case 4071:
      HASH_INVOKE(0x217067889854CFE7LL, xmlwriter_start_dtd);
      break;
    case 4072:
      HASH_INVOKE(0x4D7AEC41CFD73FE8LL, hphp_recursivedirectoryiterator_getsubpath);
      break;
    case 4075:
      HASH_INVOKE(0x67D1EE05DFE71FEBLL, hphp_splfileobject_getcvscontrol);
      break;
    case 4079:
      HASH_INVOKE(0x00EEEE9C6CEA5FEFLL, xmlwriter_write_element_ns);
      break;
    case 4080:
      HASH_INVOKE(0x1189B7C4F4874FF0LL, php_check_syntax);
      break;
    case 4086:
      HASH_INVOKE(0x25FCE64E12505FF6LL, magicksetimagerenderingintent);
      break;
    case 4090:
      HASH_INVOKE(0x13EE24AF67113FFALL, ob_end_flush);
      break;
    case 4091:
      HASH_INVOKE(0x68E499A4D75BDFFBLL, ascii2ebcdic);
      HASH_INVOKE(0x63BE4CEF1FC47FFBLL, imagefill);
      break;
    case 4094:
      HASH_INVOKE(0x32F8747E480CCFFELL, connection_status);
      break;
    default:
      break;
  }
  return invoke_failed(s, params, hash, fatal);
}
Variant ei_utf8_encode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(utf8_encode);
  return (f_utf8_encode(a0));
}
Variant ei_hphp_splfileobject___construct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject___construct);
  return (f_hphp_splfileobject___construct(a0, a1, a2, a3, a4));
}
Variant ei_func_get_args(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(func_get_args);
  return (f_func_get_args());
}
Variant ei_php_uname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(php_uname);
  int count = params.size();
  if (count <= 0) return (f_php_uname());
  return (f_php_uname(a0));
}
Variant ei_posix_uname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_uname);
  return (f_posix_uname());
}
Variant ei_curl_multi_remove_handle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_remove_handle);
  return (f_curl_multi_remove_handle(a0, a1));
}
Variant ei_mysql_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_result);
  int count = params.size();
  if (count <= 2) return (f_mysql_result(a0, a1));
  return (f_mysql_result(a0, a1, a2));
}
Variant ei_hphp_splfileobject_current(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_current);
  return (f_hphp_splfileobject_current(a0));
}
Variant ei_hphp_splfileinfo_getgroup(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getgroup);
  return (f_hphp_splfileinfo_getgroup(a0));
}
Variant ei_register_shutdown_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(register_shutdown_function);
  int count = params.size();
  if (count <= 1) return (f_register_shutdown_function(count, a0), null);
  return (f_register_shutdown_function(count, a0,vargs), null);
}
Variant ei_pixelsetmagentaquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetmagentaquantum);
  return (f_pixelsetmagentaquantum(a0, a1), null);
}
Variant ei_newmagickwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newmagickwand);
  return (f_newmagickwand());
}
Variant ei_natsort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(natsort);
  return (f_natsort(ref(a0)));
}
Variant ei_socket_accept(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_accept);
  return (f_socket_accept(a0));
}
Variant ei_vprintf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(vprintf);
  return (f_vprintf(a0, a1));
}
Variant ei_ucwords(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ucwords);
  return (f_ucwords(a0));
}
Variant ei_header(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(header);
  int count = params.size();
  if (count <= 1) return (f_header(a0), null);
  if (count == 2) return (f_header(a0, a1), null);
  return (f_header(a0, a1, a2), null);
}
Variant ei_date_default_timezone_set(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_default_timezone_set);
  return (f_date_default_timezone_set(a0));
}
Variant ei_is_object(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_object);
  return (f_is_object(a0));
}
Variant ei_magicksetimagebias(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagebias);
  return (f_magicksetimagebias(a0, a1));
}
Variant ei_exif_imagetype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exif_imagetype);
  return (f_exif_imagetype(a0));
}
Variant ei_imagegrabscreen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagegrabscreen);
  return (f_imagegrabscreen());
}
Variant ei_bcmod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcmod);
  return (f_bcmod(a0, a1));
}
Variant ei_chr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chr);
  return (f_chr(a0));
}
Variant ei_drawsetfontstretch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfontstretch);
  return (f_drawsetfontstretch(a0, a1), null);
}
Variant ei_posix_setsid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_setsid);
  return (f_posix_setsid());
}
Variant ei_hphp_splfileinfo_setfileclass(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_setfileclass);
  return (f_hphp_splfileinfo_setfileclass(a0, a1), null);
}
Variant ei_posix_getpwnam(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getpwnam);
  return (f_posix_getpwnam(a0));
}
Variant ei_mcrypt_enc_get_supported_key_sizes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_get_supported_key_sizes);
  return (f_mcrypt_enc_get_supported_key_sizes(a0));
}
Variant ei_phpinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(phpinfo);
  int count = params.size();
  if (count <= 0) return (f_phpinfo());
  return (f_phpinfo(a0));
}
Variant ei_evhttp_async_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(evhttp_async_get);
  int count = params.size();
  if (count <= 1) return (f_evhttp_async_get(a0));
  if (count == 2) return (f_evhttp_async_get(a0, a1));
  return (f_evhttp_async_get(a0, a1, a2));
}
Variant ei_ldap_parse_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a4 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a5 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_parse_result);
  int count = params.size();
  if (count <= 3) return (f_ldap_parse_result(a0, a1, ref(a2)));
  if (count == 4) return (f_ldap_parse_result(a0, a1, ref(a2), ref(a3)));
  if (count == 5) return (f_ldap_parse_result(a0, a1, ref(a2), ref(a3), ref(a4)));
  return (f_ldap_parse_result(a0, a1, ref(a2), ref(a3), ref(a4), ref(a5)));
}
Variant ei_drawgettextantialias(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgettextantialias);
  return (f_drawgettextantialias(a0));
}
Variant ei_array_fill_keys(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_fill_keys);
  return (f_array_fill_keys(a0, a1));
}
Variant ei_openssl_seal(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_seal);
  return (f_openssl_seal(a0, ref(a1), ref(a2), a3));
}
Variant ei_socket_clear_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_clear_error);
  int count = params.size();
  if (count <= 0) return (f_socket_clear_error(), null);
  return (f_socket_clear_error(a0), null);
}
Variant ei_die(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(die);
  int count = params.size();
  if (count <= 0) return (f_die());
  return (f_die(a0));
}
Variant ei_diskfreespace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(diskfreespace);
  return (f_diskfreespace(a0));
}
Variant ei_xml_set_start_namespace_decl_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_start_namespace_decl_handler);
  return (f_xml_set_start_namespace_decl_handler(a0, a1));
}
Variant ei_decbin(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(decbin);
  return (f_decbin(a0));
}
Variant ei_sizeof(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sizeof);
  int count = params.size();
  if (count <= 1) return (f_sizeof(a0));
  return (f_sizeof(a0, a1));
}
Variant ei_mb_convert_case(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_convert_case);
  int count = params.size();
  if (count <= 2) return (f_mb_convert_case(a0, a1));
  return (f_mb_convert_case(a0, a1, a2));
}
Variant ei_dir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dir);
  return (f_dir(a0));
}
Variant ei_array_combine(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_combine);
  return (f_array_combine(a0, a1));
}
Variant ei_strpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strpos);
  int count = params.size();
  if (count <= 2) return (f_strpos(a0, a1));
  return (f_strpos(a0, a1, a2));
}
Variant ei_array_reverse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_reverse);
  int count = params.size();
  if (count <= 1) return (f_array_reverse(a0));
  return (f_array_reverse(a0, a1));
}
Variant ei_strrev(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strrev);
  return (f_strrev(a0));
}
Variant ei_msg_set_queue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(msg_set_queue);
  return (f_msg_set_queue(a0, a1));
}
Variant ei_cos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(cos);
  return (f_cos(a0));
}
Variant ei_hphp_recursivedirectoryiterator_valid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_valid);
  return (f_hphp_recursivedirectoryiterator_valid(a0));
}
Variant ei_bcmul(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcmul);
  int count = params.size();
  if (count <= 2) return (f_bcmul(a0, a1));
  return (f_bcmul(a0, a1, a2));
}
Variant ei_openlog(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openlog);
  return (f_openlog(a0, a1, a2), null);
}
Variant ei_get_include_path(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_include_path);
  return (f_get_include_path());
}
Variant ei_socket_select(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_select);
  int count = params.size();
  if (count <= 4) return (f_socket_select(ref(a0), ref(a1), ref(a2), a3));
  return (f_socket_select(ref(a0), ref(a1), ref(a2), a3, a4));
}
Variant ei_magickraiseimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickraiseimage);
  return (f_magickraiseimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_gzputs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzputs);
  int count = params.size();
  if (count <= 2) return (f_gzputs(a0, a1));
  return (f_gzputs(a0, a1, a2));
}
Variant ei_strpbrk(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strpbrk);
  return (f_strpbrk(a0, a1));
}
Variant ei_shm_remove_var(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shm_remove_var);
  return (f_shm_remove_var(a0, a1));
}
Variant ei_posix_setuid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_setuid);
  return (f_posix_setuid(a0));
}
Variant ei_pixelgetyellow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetyellow);
  return (f_pixelgetyellow(a0));
}
Variant ei_convert_uudecode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(convert_uudecode);
  return (f_convert_uudecode(a0));
}
Variant ei_htmlspecialchars_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(htmlspecialchars_decode);
  int count = params.size();
  if (count <= 1) return (f_htmlspecialchars_decode(a0));
  return (f_htmlspecialchars_decode(a0, a1));
}
Variant ei_xmlwriter_end_document(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_document);
  return (f_xmlwriter_end_document(a0));
}
Variant ei_magickgetimagehistogram(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagehistogram);
  return (f_magickgetimagehistogram(a0));
}
Variant ei_preg_last_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_last_error);
  return (f_preg_last_error());
}
Variant ei_end(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(end);
  return (f_end(ref(a0)));
}
Variant ei_stream_get_line(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_get_line);
  int count = params.size();
  if (count <= 1) return (f_stream_get_line(a0));
  if (count == 2) return (f_stream_get_line(a0, a1));
  return (f_stream_get_line(a0, a1, a2));
}
Variant ei_deg2rad(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(deg2rad);
  return (f_deg2rad(a0));
}
Variant ei_magickrollimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickrollimage);
  return (f_magickrollimage(a0, a1, a2));
}
Variant ei_ldap_sort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_sort);
  return (f_ldap_sort(a0, a1, a2));
}
Variant ei_imagetruecolortopalette(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagetruecolortopalette);
  return (f_imagetruecolortopalette(a0, a1, a2));
}
Variant ei_defined(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(defined);
  return (f_defined(a0));
}
Variant ei_magickgetimageunits(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageunits);
  return (f_magickgetimageunits(a0));
}
Variant ei_magicksetimageblueprimary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageblueprimary);
  return (f_magicksetimageblueprimary(a0, a1, a2));
}
Variant ei_get_class_vars(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_class_vars);
  return (f_get_class_vars(a0));
}
Variant ei_syslog(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(syslog);
  return (f_syslog(a0, a1), null);
}
Variant ei_array_unique(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_unique);
  return (f_array_unique(a0));
}
Variant ei_bcpow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcpow);
  int count = params.size();
  if (count <= 2) return (f_bcpow(a0, a1));
  return (f_bcpow(a0, a1, a2));
}
Variant ei_pixelgetopacityquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetopacityquantum);
  return (f_pixelgetopacityquantum(a0));
}
Variant ei_php_check_syntax(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(php_check_syntax);
  int count = params.size();
  if (count <= 1) return (f_php_check_syntax(a0));
  return (f_php_check_syntax(a0, ref(a1)));
}
Variant ei_drawgetstrokemiterlimit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokemiterlimit);
  return (f_drawgetstrokemiterlimit(a0));
}
Variant ei_hphp_splfileobject_fpassthru(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fpassthru);
  return (f_hphp_splfileobject_fpassthru(a0));
}
Variant ei_pixelsetquantumcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetquantumcolor);
  int count = params.size();
  if (count <= 4) return (f_pixelsetquantumcolor(a0, a1, a2, a3), null);
  return (f_pixelsetquantumcolor(a0, a1, a2, a3, a4), null);
}
Variant ei_gztell(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gztell);
  return (f_gztell(a0));
}
Variant ei_strval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strval);
  return (f_strval(a0));
}
Variant ei_evhttp_recv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(evhttp_recv);
  return (f_evhttp_recv(a0));
}
Variant ei_strspn(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strspn);
  int count = params.size();
  if (count <= 2) return (f_strspn(a0, a1));
  if (count == 3) return (f_strspn(a0, a1, a2));
  return (f_strspn(a0, a1, a2, a3));
}
Variant ei_ini_restore(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ini_restore);
  return (f_ini_restore(a0), null);
}
Variant ei_ldap_dn2ufn(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_dn2ufn);
  return (f_ldap_dn2ufn(a0));
}
Variant ei_ceil(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ceil);
  return (f_ceil(a0));
}
Variant ei_xmlwriter_end_dtd_attlist(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_dtd_attlist);
  return (f_xmlwriter_end_dtd_attlist(a0));
}
Variant ei_phpversion(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(phpversion);
  int count = params.size();
  if (count <= 0) return (f_phpversion());
  return (f_phpversion(a0));
}
Variant ei_stream_filter_remove(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_filter_remove);
  return (f_stream_filter_remove(a0));
}
Variant ei_mcrypt_generic(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_generic);
  return (f_mcrypt_generic(a0, a1));
}
Variant ei_is_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_file);
  return (f_is_file(a0));
}
Variant ei_xml_set_end_namespace_decl_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_end_namespace_decl_handler);
  return (f_xml_set_end_namespace_decl_handler(a0, a1));
}
Variant ei_openssl_x509_export_to_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_export_to_file);
  int count = params.size();
  if (count <= 2) return (f_openssl_x509_export_to_file(a0, a1));
  return (f_openssl_x509_export_to_file(a0, a1, a2));
}
Variant ei_imagesetstyle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesetstyle);
  return (f_imagesetstyle(a0, a1));
}
Variant ei_drawcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawcolor);
  return (f_drawcolor(a0, a1, a2, a3), null);
}
Variant ei_get_headers(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_headers);
  int count = params.size();
  if (count <= 1) return (f_get_headers(a0));
  return (f_get_headers(a0, a1));
}
Variant ei_mysql_drop_db(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_drop_db);
  int count = params.size();
  if (count <= 1) return (f_mysql_drop_db(a0));
  return (f_mysql_drop_db(a0, a1));
}
Variant ei_magickresampleimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickresampleimage);
  return (f_magickresampleimage(a0, a1, a2, a3, a4));
}
Variant ei_i18n_loc_get_default(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(i18n_loc_get_default);
  return (f_i18n_loc_get_default());
}
Variant ei_strtok(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strtok);
  int count = params.size();
  if (count <= 1) return (f_strtok(a0));
  return (f_strtok(a0, a1));
}
Variant ei_array_key_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_key_exists);
  return (f_array_key_exists(a0, a1));
}
Variant ei_exp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exp);
  return (f_exp(a0));
}
Variant ei_strstr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strstr);
  return (f_strstr(a0, a1));
}
Variant ei_realpath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(realpath);
  return (f_realpath(a0));
}
Variant ei_stream_filter_append(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_filter_append);
  int count = params.size();
  if (count <= 2) return (f_stream_filter_append(a0, a1));
  if (count == 3) return (f_stream_filter_append(a0, a1, a2));
  return (f_stream_filter_append(a0, a1, a2, a3));
}
Variant ei_oci_bind_by_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_bind_by_name);
  int count = params.size();
  if (count <= 3) return (f_oci_bind_by_name(a0, a1, ref(a2)));
  if (count == 4) return (f_oci_bind_by_name(a0, a1, ref(a2), a3));
  return (f_oci_bind_by_name(a0, a1, ref(a2), a3, a4));
}
Variant ei_hphp_get_property(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_get_property);
  return (f_hphp_get_property(a0, a1, a2));
}
Variant ei_magickgetcharheight(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetcharheight);
  int count = params.size();
  if (count <= 3) return (f_magickgetcharheight(a0, a1, a2));
  return (f_magickgetcharheight(a0, a1, a2, a3));
}
Variant ei_imagerotate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagerotate);
  int count = params.size();
  if (count <= 3) return (f_imagerotate(a0, a1, a2));
  return (f_imagerotate(a0, a1, a2, a3));
}
Variant ei_magickcompositeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcompositeimage);
  return (f_magickcompositeimage(a0, a1, a2, a3, a4));
}
Variant ei_openssl_sign(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_sign);
  int count = params.size();
  if (count <= 3) return (f_openssl_sign(a0, ref(a1), a2));
  return (f_openssl_sign(a0, ref(a1), a2, a3));
}
Variant ei_version_compare(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(version_compare);
  int count = params.size();
  if (count <= 2) return (f_version_compare(a0, a1));
  return (f_version_compare(a0, a1, a2));
}
Variant ei_timezone_name_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_name_get);
  return (f_timezone_name_get(a0));
}
Variant ei_posix_getpgid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getpgid);
  return (f_posix_getpgid(a0));
}
Variant ei_imagestring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagestring);
  return (f_imagestring(a0, a1, a2, a3, a4, a5));
}
Variant ei_mcrypt_list_modes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_list_modes);
  int count = params.size();
  if (count <= 0) return (f_mcrypt_list_modes());
  return (f_mcrypt_list_modes(a0));
}
Variant ei_mcrypt_list_algorithms(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_list_algorithms);
  int count = params.size();
  if (count <= 0) return (f_mcrypt_list_algorithms());
  return (f_mcrypt_list_algorithms(a0));
}
Variant ei_mcrypt_get_cipher_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_get_cipher_name);
  return (f_mcrypt_get_cipher_name(a0));
}
Variant ei_idn_to_unicode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(idn_to_unicode);
  int count = params.size();
  if (count <= 1) return (f_idn_to_unicode(a0));
  return (f_idn_to_unicode(a0, ref(a1)));
}
Variant ei_lchown(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(lchown);
  return (f_lchown(a0, a1));
}
Variant ei_drawcomposite(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawcomposite);
  return (f_drawcomposite(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_dechex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dechex);
  return (f_dechex(a0));
}
Variant ei_imagecolortransparent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolortransparent);
  int count = params.size();
  if (count <= 1) return (f_imagecolortransparent(a0));
  return (f_imagecolortransparent(a0, a1));
}
Variant ei_socket_get_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_get_option);
  return (f_socket_get_option(a0, a1, a2));
}
Variant ei_stream_filter_register(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_filter_register);
  return (f_stream_filter_register(a0, a1));
}
Variant ei_apache_response_headers(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_response_headers);
  return (f_apache_response_headers());
}
Variant ei_array_merge(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_merge);
  int count = params.size();
  if (count <= 1) return (f_array_merge(count, a0));
  return (f_array_merge(count, a0,vargs));
}
Variant ei_md5(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(md5);
  int count = params.size();
  if (count <= 1) return (f_md5(a0));
  return (f_md5(a0, a1));
}
Variant ei_bcsub(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcsub);
  int count = params.size();
  if (count <= 2) return (f_bcsub(a0, a1));
  return (f_bcsub(a0, a1, a2));
}
Variant ei_xmlwriter_flush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_flush);
  int count = params.size();
  if (count <= 1) return (f_xmlwriter_flush(a0));
  return (f_xmlwriter_flush(a0, a1));
}
Variant ei_sha1_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sha1_file);
  int count = params.size();
  if (count <= 1) return (f_sha1_file(a0));
  return (f_sha1_file(a0, a1));
}
Variant ei_posix_ctermid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_ctermid);
  return (f_posix_ctermid());
}
Variant ei_date(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date);
  int count = params.size();
  if (count <= 1) return (f_date(a0));
  return (f_date(a0, a1));
}
Variant ei_evhttp_post(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(evhttp_post);
  int count = params.size();
  if (count <= 2) return (f_evhttp_post(a0, a1));
  if (count == 3) return (f_evhttp_post(a0, a1, a2));
  return (f_evhttp_post(a0, a1, a2, a3));
}
Variant ei_ldap_connect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_connect);
  int count = params.size();
  if (count <= 0) return (f_ldap_connect());
  if (count == 1) return (f_ldap_connect(a0));
  return (f_ldap_connect(a0, a1));
}
Variant ei_shuffle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shuffle);
  return (f_shuffle(ref(a0)));
}
Variant ei_mcrypt_module_get_algo_block_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_get_algo_block_size);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_get_algo_block_size(a0));
  return (f_mcrypt_module_get_algo_block_size(a0, a1));
}
Variant ei_hphp_splfileobject_ftruncate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_ftruncate);
  return (f_hphp_splfileobject_ftruncate(a0, a1));
}
Variant ei_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(key);
  return (f_key(ref(a0)));
}
Variant ei_xmlwriter_start_dtd_entity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_dtd_entity);
  return (f_xmlwriter_start_dtd_entity(a0, a1, a2));
}
Variant ei_readfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(readfile);
  int count = params.size();
  if (count <= 1) return (f_readfile(a0));
  if (count == 2) return (f_readfile(a0, a1));
  return (f_readfile(a0, a1, a2));
}
Variant ei_atan(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(atan);
  return (f_atan(a0));
}
Variant ei_magickmodulateimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmodulateimage);
  return (f_magickmodulateimage(a0, a1, a2, a3));
}
Variant ei_mysql_set_charset(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_set_charset);
  int count = params.size();
  if (count <= 1) return (f_mysql_set_charset(a0));
  return (f_mysql_set_charset(a0, a1));
}
Variant ei_drawgetfontweight(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfontweight);
  return (f_drawgetfontweight(a0));
}
Variant ei_magickgetimageheight(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageheight);
  return (f_magickgetimageheight(a0));
}
Variant ei_posix_getpgrp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getpgrp);
  return (f_posix_getpgrp());
}
Variant ei_i18n_loc_get_error_code(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(i18n_loc_get_error_code);
  return (f_i18n_loc_get_error_code());
}
Variant ei_hash_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_file);
  int count = params.size();
  if (count <= 2) return (f_hash_file(a0, a1));
  return (f_hash_file(a0, a1, a2));
}
Variant ei_is_callable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_callable);
  int count = params.size();
  if (count <= 1) return (f_is_callable(a0));
  if (count == 2) return (f_is_callable(a0, a1));
  return (f_is_callable(a0, a1, ref(a2)));
}
Variant ei_asin(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(asin);
  return (f_asin(a0));
}
Variant ei_openssl_public_encrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_public_encrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_public_encrypt(a0, ref(a1), a2));
  return (f_openssl_public_encrypt(a0, ref(a1), a2, a3));
}
Variant ei_curl_multi_init(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_init);
  return (f_curl_multi_init());
}
Variant ei_posix_getpwuid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getpwuid);
  return (f_posix_getpwuid(a0));
}
Variant ei_json_encode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(json_encode);
  int count = params.size();
  if (count <= 1) return (f_json_encode(a0));
  return (f_json_encode(a0, a1));
}
Variant ei_show_source(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(show_source);
  int count = params.size();
  if (count <= 1) return (f_show_source(a0));
  return (f_show_source(a0, a1));
}
Variant ei_mcrypt_module_self_test(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_self_test);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_self_test(a0));
  return (f_mcrypt_module_self_test(a0, a1));
}
Variant ei_sscanf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append(ref((*it)->refval(env)));
  }
  FUNCTION_INJECTION(sscanf);
  int count = params.size();
  if (count <= 2) return (f_sscanf(count, a0, a1));
  return (f_sscanf(count, a0, a1,vargs));
}
Variant ei_chop(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chop);
  int count = params.size();
  if (count <= 1) return (f_chop(a0));
  return (f_chop(a0, a1));
}
Variant ei_mb_convert_variables(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(mb_convert_variables);
  int count = params.size();
  if (count <= 3) return (f_mb_convert_variables(count, a0, a1, ref(a2)));
  return (f_mb_convert_variables(count, a0, a1, ref(a2),vargs));
}
Variant ei_hphp_recursivedirectoryiterator_getsubpathname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_getsubpathname);
  return (f_hphp_recursivedirectoryiterator_getsubpathname(a0));
}
Variant ei_socket_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_close);
  return (f_socket_close(a0), null);
}
Variant ei_max(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(max);
  int count = params.size();
  if (count <= 1) return (f_max(count, a0));
  return (f_max(count, a0,vargs));
}
Variant ei_magickadaptivethresholdimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickadaptivethresholdimage);
  return (f_magickadaptivethresholdimage(a0, a1, a2, a3));
}
Variant ei_each(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(each);
  return (f_each(ref(a0)));
}
Variant ei_magickremoveimageprofiles(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickremoveimageprofiles);
  return (f_magickremoveimageprofiles(a0));
}
Variant ei_drawgettextalignment(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgettextalignment);
  return (f_drawgettextalignment(a0));
}
Variant ei_xbox_send_message(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xbox_send_message);
  int count = params.size();
  if (count <= 3) return (f_xbox_send_message(a0, ref(a1), a2));
  return (f_xbox_send_message(a0, ref(a1), a2, a3));
}
Variant ei_thrift_protocol_write_binary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(thrift_protocol_write_binary);
  return (f_thrift_protocol_write_binary(a0, a1, a2, a3, a4, a5), null);
}
Variant ei_wandgetexceptiontype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(wandgetexceptiontype);
  return (f_wandgetexceptiontype(a0));
}
Variant ei_drawpathellipticarcabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathellipticarcabsolute);
  return (f_drawpathellipticarcabsolute(a0, a1, a2, a3, a4, a5, a6, a7), null);
}
Variant ei_pixelsetgreen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetgreen);
  return (f_pixelsetgreen(a0, a1), null);
}
Variant ei_magickgetimagecolorspace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagecolorspace);
  return (f_magickgetimagecolorspace(a0));
}
Variant ei_pixelsetalphaquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetalphaquantum);
  return (f_pixelsetalphaquantum(a0, a1), null);
}
Variant ei_stream_bucket_append(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_bucket_append);
  return (f_stream_bucket_append(a0, a1), null);
}
Variant ei_msg_stat_queue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(msg_stat_queue);
  return (f_msg_stat_queue(a0));
}
Variant ei_system(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(system);
  int count = params.size();
  if (count <= 1) return (f_system(a0));
  return (f_system(a0, ref(a1)));
}
Variant ei_mb_parse_str(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_parse_str);
  int count = params.size();
  if (count <= 1) return (f_mb_parse_str(a0));
  return (f_mb_parse_str(a0, ref(a1)));
}
Variant ei_log(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(log);
  int count = params.size();
  if (count <= 1) return (f_log(a0));
  return (f_log(a0, a1));
}
Variant ei_drawskewx(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawskewx);
  return (f_drawskewx(a0, a1), null);
}
Variant ei_min(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(min);
  int count = params.size();
  if (count <= 1) return (f_min(count, a0));
  return (f_min(count, a0,vargs));
}
Variant ei_curl_multi_getcontent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_getcontent);
  return (f_curl_multi_getcontent(a0));
}
Variant ei_drawskewy(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawskewy);
  return (f_drawskewy(a0, a1), null);
}
Variant ei_is_uploaded_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_uploaded_file);
  return (f_is_uploaded_file(a0));
}
Variant ei_magicksetresourcelimit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetresourcelimit);
  return (f_magicksetresourcelimit(a0, a1));
}
Variant ei_date_timezone_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_timezone_get);
  return (f_date_timezone_get(a0));
}
Variant ei_hphp_splfileobject_fwrite(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fwrite);
  return (f_hphp_splfileobject_fwrite(a0, a1, a2));
}
Variant ei_apache_get_rewrite_rules(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_get_rewrite_rules);
  return (f_apache_get_rewrite_rules());
}
Variant ei_is_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_string);
  return (f_is_string(a0));
}
Variant ei_pcntl_wtermsig(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wtermsig);
  return (f_pcntl_wtermsig(a0));
}
Variant ei_stream_context_get_default(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_context_get_default);
  int count = params.size();
  if (count <= 0) return (f_stream_context_get_default());
  return (f_stream_context_get_default(a0));
}
Variant ei_drawpathlinetorelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathlinetorelative);
  return (f_drawpathlinetorelative(a0, a1, a2), null);
}
Variant ei_urlencode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(urlencode);
  return (f_urlencode(a0));
}
Variant ei_mb_preferred_mime_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_preferred_mime_name);
  return (f_mb_preferred_mime_name(a0));
}
Variant ei_pixelgetgreenquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetgreenquantum);
  return (f_pixelgetgreenquantum(a0));
}
Variant ei_magicksetfilename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetfilename);
  int count = params.size();
  if (count <= 1) return (f_magicksetfilename(a0));
  return (f_magicksetfilename(a0, a1));
}
Variant ei_magickappendimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickappendimages);
  int count = params.size();
  if (count <= 1) return (f_magickappendimages(a0));
  return (f_magickappendimages(a0, a1));
}
Variant ei_pcntl_wifstopped(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wifstopped);
  return (f_pcntl_wifstopped(a0));
}
Variant ei_mb_ereg_search(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search);
  int count = params.size();
  if (count <= 0) return (f_mb_ereg_search());
  if (count == 1) return (f_mb_ereg_search(a0));
  return (f_mb_ereg_search(a0, a1));
}
Variant ei_rewind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rewind);
  return (f_rewind(a0));
}
Variant ei_chunk_split(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chunk_split);
  int count = params.size();
  if (count <= 1) return (f_chunk_split(a0));
  if (count == 2) return (f_chunk_split(a0, a1));
  return (f_chunk_split(a0, a1, a2));
}
Variant ei_mb_list_encodings_alias_names(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_list_encodings_alias_names);
  int count = params.size();
  if (count <= 0) return (f_mb_list_encodings_alias_names());
  return (f_mb_list_encodings_alias_names(a0));
}
Variant ei_i18n_loc_set_attribute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(i18n_loc_set_attribute);
  return (f_i18n_loc_set_attribute(a0, a1));
}
Variant ei_pixelsynciterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsynciterator);
  return (f_pixelsynciterator(a0));
}
Variant ei_openssl_error_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_error_string);
  return (f_openssl_error_string());
}
Variant ei_ismagickwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ismagickwand);
  return (f_ismagickwand(a0));
}
Variant ei_strrchr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strrchr);
  return (f_strrchr(a0, a1));
}
Variant ei_xmlwriter_start_dtd_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_dtd_element);
  return (f_xmlwriter_start_dtd_element(a0, a1));
}
Variant ei_str_ireplace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_ireplace);
  int count = params.size();
  if (count <= 3) return (f_str_ireplace(a0, a1, a2));
  return (f_str_ireplace(a0, a1, a2, ref(a3)));
}
Variant ei_magickpainttransparentimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickpainttransparentimage);
  int count = params.size();
  if (count <= 2) return (f_magickpainttransparentimage(a0, a1));
  if (count == 3) return (f_magickpainttransparentimage(a0, a1, a2));
  return (f_magickpainttransparentimage(a0, a1, a2, a3));
}
Variant ei_drawsettextundercolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsettextundercolor);
  return (f_drawsettextundercolor(a0, a1), null);
}
Variant ei_hphp_splfileobject_getflags(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_getflags);
  return (f_hphp_splfileobject_getflags(a0));
}
Variant ei_hphp_recursivedirectoryiterator_rewind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_rewind);
  return (f_hphp_recursivedirectoryiterator_rewind(a0), null);
}
Variant ei_magickgetstringwidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetstringwidth);
  int count = params.size();
  if (count <= 3) return (f_magickgetstringwidth(a0, a1, a2));
  return (f_magickgetstringwidth(a0, a1, a2, a3));
}
Variant ei_echo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(echo);
  int count = params.size();
  if (count <= 1) return (f_echo(count, a0), null);
  return (f_echo(count, a0,vargs), null);
}
Variant ei_ldap_parse_reference(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_parse_reference);
  return (f_ldap_parse_reference(a0, a1, ref(a2)));
}
Variant ei_ctype_xdigit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_xdigit);
  return (f_ctype_xdigit(a0));
}
Variant ei_gmstrftime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gmstrftime);
  int count = params.size();
  if (count <= 1) return (f_gmstrftime(a0));
  return (f_gmstrftime(a0, a1));
}
Variant ei_hphp_recursiveiteratoriterator_next(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_next);
  return (f_hphp_recursiveiteratoriterator_next(a0), null);
}
Variant ei_stream_socket_get_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_get_name);
  return (f_stream_socket_get_name(a0, a1));
}
Variant ei_socket_set_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_set_option);
  return (f_socket_set_option(a0, a1, a2, a3));
}
Variant ei_array_multisort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append(ref((*it)->refval(env)));
  }
  FUNCTION_INJECTION(array_multisort);
  int count = params.size();
  if (count <= 1) return (f_array_multisort(count, ref(a0)));
  return (f_array_multisort(count, ref(a0),vargs));
}
Variant ei_imagepsbbox(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepsbbox);
  int count = params.size();
  if (count <= 3) return (f_imagepsbbox(a0, a1, a2));
  if (count == 4) return (f_imagepsbbox(a0, a1, a2, a3));
  if (count == 5) return (f_imagepsbbox(a0, a1, a2, a3, a4));
  return (f_imagepsbbox(a0, a1, a2, a3, a4, a5));
}
Variant ei_drawpathlinetoverticalabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathlinetoverticalabsolute);
  return (f_drawpathlinetoverticalabsolute(a0, a1), null);
}
Variant ei_mailparse_msg_get_structure(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_get_structure);
  return (f_mailparse_msg_get_structure(a0));
}
Variant ei_mb_ereg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg);
  int count = params.size();
  if (count <= 2) return (f_mb_ereg(a0, a1));
  return (f_mb_ereg(a0, a1, ref(a2)));
}
Variant ei_decoct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(decoct);
  return (f_decoct(a0));
}
Variant ei_xml_parse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parse);
  int count = params.size();
  if (count <= 2) return (f_xml_parse(a0, a1));
  return (f_xml_parse(a0, a1, a2));
}
Variant ei_xml_get_current_line_number(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_get_current_line_number);
  return (f_xml_get_current_line_number(a0));
}
Variant ei_drawaffine(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawaffine);
  return (f_drawaffine(a0, a1, a2, a3, a4, a5, a6), null);
}
Variant ei_magicksetimagewhitepoint(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagewhitepoint);
  return (f_magicksetimagewhitepoint(a0, a1, a2));
}
Variant ei_gzclose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzclose);
  return (f_gzclose(a0));
}
Variant ei_imagecolorat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorat);
  return (f_imagecolorat(a0, a1, a2));
}
Variant ei_magickgetimageextrema(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageextrema);
  int count = params.size();
  if (count <= 1) return (f_magickgetimageextrema(a0));
  return (f_magickgetimageextrema(a0, a1));
}
Variant ei_ord(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ord);
  return (f_ord(a0));
}
Variant ei_mktime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mktime);
  int count = params.size();
  if (count <= 0) return (f_mktime());
  if (count == 1) return (f_mktime(a0));
  if (count == 2) return (f_mktime(a0, a1));
  if (count == 3) return (f_mktime(a0, a1, a2));
  if (count == 4) return (f_mktime(a0, a1, a2, a3));
  if (count == 5) return (f_mktime(a0, a1, a2, a3, a4));
  return (f_mktime(a0, a1, a2, a3, a4, a5));
}
Variant ei_sem_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sem_get);
  int count = params.size();
  if (count <= 1) return (f_sem_get(a0));
  if (count == 2) return (f_sem_get(a0, a1));
  if (count == 3) return (f_sem_get(a0, a1, a2));
  return (f_sem_get(a0, a1, a2, a3));
}
Variant ei_drawsetstrokelinejoin(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokelinejoin);
  return (f_drawsetstrokelinejoin(a0, a1), null);
}
Variant ei_array_intersect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_intersect);
  int count = params.size();
  if (count <= 2) return (f_array_intersect(count, a0, a1));
  return (f_array_intersect(count, a0, a1,vargs));
}
Variant ei_mailparse_msg_extract_whole_part_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_extract_whole_part_file);
  int count = params.size();
  if (count <= 2) return (f_mailparse_msg_extract_whole_part_file(a0, a1));
  return (f_mailparse_msg_extract_whole_part_file(a0, a1, a2));
}
Variant ei_mb_strrichr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strrichr);
  int count = params.size();
  if (count <= 2) return (f_mb_strrichr(a0, a1));
  if (count == 3) return (f_mb_strrichr(a0, a1, a2));
  return (f_mb_strrichr(a0, a1, a2, a3));
}
Variant ei_socket_sendto(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_sendto);
  int count = params.size();
  if (count <= 5) return (f_socket_sendto(a0, a1, a2, a3, a4));
  return (f_socket_sendto(a0, a1, a2, a3, a4, a5));
}
Variant ei_mb_output_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_output_handler);
  return (f_mb_output_handler(a0, a1));
}
Variant ei_fclose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fclose);
  return (f_fclose(a0));
}
Variant ei_drawpathcurvetoquadraticbeziersmoothabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetoquadraticbeziersmoothabsolute);
  return (f_drawpathcurvetoquadraticbeziersmoothabsolute(a0, a1, a2), null);
}
Variant ei_function_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(function_exists);
  return (f_function_exists(a0));
}
Variant ei_oci_connect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_connect);
  int count = params.size();
  if (count <= 2) return (f_oci_connect(a0, a1));
  if (count == 3) return (f_oci_connect(a0, a1, a2));
  if (count == 4) return (f_oci_connect(a0, a1, a2, a3));
  return (f_oci_connect(a0, a1, a2, a3, a4));
}
Variant ei_ctype_alpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_alpha);
  return (f_ctype_alpha(a0));
}
Variant ei_pos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pos);
  return (f_pos(ref(a0)));
}
Variant ei_imagecolorexactalpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorexactalpha);
  return (f_imagecolorexactalpha(a0, a1, a2, a3, a4));
}
Variant ei_pow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pow);
  return (f_pow(a0, a1));
}
Variant ei_pixelgetredquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetredquantum);
  return (f_pixelgetredquantum(a0));
}
Variant ei_imagecolorsforindex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorsforindex);
  return (f_imagecolorsforindex(a0, a1));
}
Variant ei_libxml_set_streams_context(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(libxml_set_streams_context);
  return (f_libxml_set_streams_context(a0), null);
}
Variant ei_image_type_to_mime_type(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(image_type_to_mime_type);
  return (f_image_type_to_mime_type(a0));
}
Variant ei_socket_create(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_create);
  return (f_socket_create(a0, a1, a2));
}
Variant ei_xmlwriter_write_pi(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_pi);
  return (f_xmlwriter_write_pi(a0, a1, a2));
}
Variant ei_posix_getppid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getppid);
  return (f_posix_getppid());
}
Variant ei_oci_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_close);
  return (f_oci_close(a0));
}
Variant ei_mb_stripos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_stripos);
  int count = params.size();
  if (count <= 2) return (f_mb_stripos(a0, a1));
  if (count == 3) return (f_mb_stripos(a0, a1, a2));
  return (f_mb_stripos(a0, a1, a2, a3));
}
Variant ei_magickpingimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickpingimage);
  return (f_magickpingimage(a0, a1));
}
Variant ei_bcpowmod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcpowmod);
  int count = params.size();
  if (count <= 3) return (f_bcpowmod(a0, a1, a2));
  return (f_bcpowmod(a0, a1, a2, a3));
}
Variant ei_timezone_offset_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_offset_get);
  return (f_timezone_offset_get(a0, a1));
}
Variant ei_getrandmax(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getrandmax);
  return (f_getrandmax());
}
Variant ei_hphp_splfileobject_fseek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fseek);
  return (f_hphp_splfileobject_fseek(a0, a1, a2));
}
Variant ei_ctype_alnum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_alnum);
  return (f_ctype_alnum(a0));
}
Variant ei_tan(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(tan);
  return (f_tan(a0));
}
Variant ei_set_exception_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(set_exception_handler);
  return (f_set_exception_handler(a0));
}
Variant ei_imagegrabwindow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagegrabwindow);
  int count = params.size();
  if (count <= 1) return (f_imagegrabwindow(a0));
  return (f_imagegrabwindow(a0, a1));
}
Variant ei_magickstereoimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickstereoimage);
  return (f_magickstereoimage(a0, a1));
}
Variant ei_magickgetimagescene(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagescene);
  return (f_magickgetimagescene(a0));
}
Variant ei_hphp_splfileinfo_isfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_isfile);
  return (f_hphp_splfileinfo_isfile(a0));
}
Variant ei_openssl_csr_sign(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_csr_sign);
  int count = params.size();
  if (count <= 4) return (f_openssl_csr_sign(a0, a1, a2, a3));
  if (count == 5) return (f_openssl_csr_sign(a0, a1, a2, a3, a4));
  return (f_openssl_csr_sign(a0, a1, a2, a3, a4, a5));
}
Variant ei_openssl_pkcs12_export(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs12_export);
  int count = params.size();
  if (count <= 4) return (f_openssl_pkcs12_export(a0, ref(a1), a2, a3));
  return (f_openssl_pkcs12_export(a0, ref(a1), a2, a3, a4));
}
Variant ei_magickgetquantumdepth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetquantumdepth);
  return (f_magickgetquantumdepth());
}
Variant ei_socket_listen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_listen);
  int count = params.size();
  if (count <= 1) return (f_socket_listen(a0));
  return (f_socket_listen(a0, a1));
}
Variant ei_parse_str(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(parse_str);
  int count = params.size();
  if (count <= 1) return (f_parse_str(a0), null);
  return (f_parse_str(a0, ref(a1)), null);
}
Variant ei_sin(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sin);
  return (f_sin(a0));
}
Variant ei_cosh(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(cosh);
  return (f_cosh(a0));
}
Variant ei_copy(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(copy);
  int count = params.size();
  if (count <= 2) return (f_copy(a0, a1));
  return (f_copy(a0, a1, a2));
}
Variant ei_imagechar(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagechar);
  return (f_imagechar(a0, a1, a2, a3, a4, a5));
}
Variant ei_magicksetimagebackgroundcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagebackgroundcolor);
  return (f_magicksetimagebackgroundcolor(a0, a1));
}
Variant ei_ldap_mod_add(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_mod_add);
  return (f_ldap_mod_add(a0, a1, a2));
}
Variant ei_fb_thrift_serialize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_thrift_serialize);
  return (f_fb_thrift_serialize(a0));
}
Variant ei_posix_ttyname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_ttyname);
  return (f_posix_ttyname(a0));
}
Variant ei_filectime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(filectime);
  return (f_filectime(a0));
}
Variant ei_newpixelwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newpixelwand);
  int count = params.size();
  if (count <= 0) return (f_newpixelwand());
  return (f_newpixelwand(a0));
}
Variant ei_pcntl_wait(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wait);
  int count = params.size();
  if (count <= 1) return (f_pcntl_wait(ref(a0)));
  return (f_pcntl_wait(ref(a0), a1));
}
Variant ei_hypot(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hypot);
  return (f_hypot(a0, a1));
}
Variant ei_parse_url(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(parse_url);
  int count = params.size();
  if (count <= 1) return (f_parse_url(a0));
  return (f_parse_url(a0, a1));
}
Variant ei_magickreadimageblob(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickreadimageblob);
  return (f_magickreadimageblob(a0, a1));
}
Variant ei_eregi(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(eregi);
  int count = params.size();
  if (count <= 2) return (f_eregi(a0, a1));
  return (f_eregi(a0, a1, ref(a2)));
}
Variant ei_pixelsetcolorcount(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetcolorcount);
  return (f_pixelsetcolorcount(a0, a1), null);
}
Variant ei_drawpathcurvetoquadraticbezierrelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetoquadraticbezierrelative);
  return (f_drawpathcurvetoquadraticbezierrelative(a0, a1, a2, a3, a4), null);
}
Variant ei_posix_getgroups(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getgroups);
  return (f_posix_getgroups());
}
Variant ei_fileinode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fileinode);
  return (f_fileinode(a0));
}
Variant ei_magickgetnumberimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetnumberimages);
  return (f_magickgetnumberimages(a0));
}
Variant ei_magickgetimagesblob(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagesblob);
  return (f_magickgetimagesblob(a0));
}
Variant ei_magickcontrastimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcontrastimage);
  return (f_magickcontrastimage(a0, a1));
}
Variant ei_pcntl_setpriority(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_setpriority);
  int count = params.size();
  if (count <= 1) return (f_pcntl_setpriority(a0));
  if (count == 2) return (f_pcntl_setpriority(a0, a1));
  return (f_pcntl_setpriority(a0, a1, a2));
}
Variant ei_drawgetfontstretch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfontstretch);
  return (f_drawgetfontstretch(a0));
}
Variant ei_bcscale(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcscale);
  return (f_bcscale(a0));
}
Variant ei_imageconvolution(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageconvolution);
  return (f_imageconvolution(a0, a1, a2, a3));
}
Variant ei_utf8_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(utf8_decode);
  return (f_utf8_decode(a0));
}
Variant ei_ldap_unbind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_unbind);
  return (f_ldap_unbind(a0));
}
Variant ei_newpixelregioniterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newpixelregioniterator);
  return (f_newpixelregioniterator(a0, a1, a2, a3, a4));
}
Variant ei_array_intersect_assoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_intersect_assoc);
  int count = params.size();
  if (count <= 2) return (f_array_intersect_assoc(count, a0, a1));
  return (f_array_intersect_assoc(count, a0, a1,vargs));
}
Variant ei_ob_get_level(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_get_level);
  return (f_ob_get_level());
}
Variant ei_hebrev(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hebrev);
  int count = params.size();
  if (count <= 1) return (f_hebrev(a0));
  return (f_hebrev(a0, a1));
}
Variant ei_socket_set_block(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_set_block);
  return (f_socket_set_block(a0));
}
Variant ei_mcrypt_module_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_close);
  return (f_mcrypt_module_close(a0));
}
Variant ei_mb_strwidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strwidth);
  int count = params.size();
  if (count <= 1) return (f_mb_strwidth(a0));
  return (f_mb_strwidth(a0, a1));
}
Variant ei_clonemagickwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clonemagickwand);
  return (f_clonemagickwand(a0));
}
Variant ei_pixelgetred(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetred);
  return (f_pixelgetred(a0));
}
Variant ei_ip2long(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ip2long);
  return (f_ip2long(a0));
}
Variant ei_mb_stristr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_stristr);
  int count = params.size();
  if (count <= 2) return (f_mb_stristr(a0, a1));
  if (count == 3) return (f_mb_stristr(a0, a1, a2));
  return (f_mb_stristr(a0, a1, a2, a3));
}
Variant ei_array_diff_ukey(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_diff_ukey);
  int count = params.size();
  if (count <= 3) return (f_array_diff_ukey(count, a0, a1, a2));
  return (f_array_diff_ukey(count, a0, a1, a2,vargs));
}
Variant ei_isdrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(isdrawingwand);
  return (f_isdrawingwand(a0));
}
Variant ei_magicksetimagemattecolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagemattecolor);
  return (f_magicksetimagemattecolor(a0, a1));
}
Variant ei_closedir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(closedir);
  return (f_closedir(a0), null);
}
Variant ei_fb_call_user_func_safe_return(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(fb_call_user_func_safe_return);
  int count = params.size();
  if (count <= 2) return (f_fb_call_user_func_safe_return(count, a0, a1));
  return (f_fb_call_user_func_safe_return(count, a0, a1,vargs));
}
Variant ei_magickwriteimagesfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickwriteimagesfile);
  return (f_magickwriteimagesfile(a0, a1));
}
Variant ei_magickdescribeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickdescribeimage);
  return (f_magickdescribeimage(a0));
}
Variant ei_imageftbbox(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageftbbox);
  int count = params.size();
  if (count <= 4) return (f_imageftbbox(a0, a1, a2, a3));
  return (f_imageftbbox(a0, a1, a2, a3, a4));
}
Variant ei_magicksetlastiterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetlastiterator);
  return (f_magicksetlastiterator(a0), null);
}
Variant ei_hphp_output_global_state(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_output_global_state);
  int count = params.size();
  if (count <= 0) return (f_hphp_output_global_state(), null);
  return (f_hphp_output_global_state(a0), null);
}
Variant ei_imagefontheight(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefontheight);
  return (f_imagefontheight(a0));
}
Variant ei_putenv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(putenv);
  return (f_putenv(a0));
}
Variant ei_magickedgeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickedgeimage);
  return (f_magickedgeimage(a0, a1));
}
Variant ei_xml_error_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_error_string);
  return (f_xml_error_string(a0));
}
Variant ei_array_rand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_rand);
  int count = params.size();
  if (count <= 1) return (f_array_rand(a0));
  return (f_array_rand(a0, a1));
}
Variant ei_ldap_mod_del(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_mod_del);
  return (f_ldap_mod_del(a0, a1, a2));
}
Variant ei_range(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(range);
  int count = params.size();
  if (count <= 2) return (f_range(a0, a1));
  return (f_range(a0, a1, a2));
}
Variant ei_levenshtein(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(levenshtein);
  int count = params.size();
  if (count <= 2) return (f_levenshtein(a0, a1));
  if (count == 3) return (f_levenshtein(a0, a1, a2));
  if (count == 4) return (f_levenshtein(a0, a1, a2, a3));
  return (f_levenshtein(a0, a1, a2, a3, a4));
}
Variant ei_curl_multi_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_close);
  return (f_curl_multi_close(a0), null);
}
Variant ei_drawgetfillalpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfillalpha);
  return (f_drawgetfillalpha(a0));
}
Variant ei_hash_hmac(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_hmac);
  int count = params.size();
  if (count <= 3) return (f_hash_hmac(a0, a1, a2));
  return (f_hash_hmac(a0, a1, a2, a3));
}
Variant ei_get_html_translation_table(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_html_translation_table);
  int count = params.size();
  if (count <= 0) return (f_get_html_translation_table());
  if (count == 1) return (f_get_html_translation_table(a0));
  return (f_get_html_translation_table(a0, a1));
}
Variant ei_user_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(user_error);
  int count = params.size();
  if (count <= 1) return (f_user_error(a0));
  return (f_user_error(a0, a1));
}
Variant ei_feof(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(feof);
  return (f_feof(a0));
}
Variant ei_filemtime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(filemtime);
  return (f_filemtime(a0));
}
Variant ei_microtime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(microtime);
  int count = params.size();
  if (count <= 0) return (f_microtime());
  return (f_microtime(a0));
}
Variant ei_zend_version(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(zend_version);
  return (f_zend_version());
}
Variant ei_openssl_x509_free(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_free);
  return (f_openssl_x509_free(a0), null);
}
Variant ei_fb_call_user_func_safe(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(fb_call_user_func_safe);
  int count = params.size();
  if (count <= 1) return (f_fb_call_user_func_safe(count, a0));
  return (f_fb_call_user_func_safe(count, a0,vargs));
}
Variant ei_var_export(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(var_export);
  int count = params.size();
  if (count <= 1) return (f_var_export(a0));
  return (f_var_export(a0, a1));
}
Variant ei_mb_strcut(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strcut);
  int count = params.size();
  if (count <= 2) return (f_mb_strcut(a0, a1));
  if (count == 3) return (f_mb_strcut(a0, a1, a2));
  return (f_mb_strcut(a0, a1, a2, a3));
}
Variant ei_xmlwriter_end_comment(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_comment);
  return (f_xmlwriter_end_comment(a0));
}
Variant ei_xmlwriter_end_dtd_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_dtd_element);
  return (f_xmlwriter_end_dtd_element(a0));
}
Variant ei_openssl_pkey_export_to_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_export_to_file);
  int count = params.size();
  if (count <= 2) return (f_openssl_pkey_export_to_file(a0, a1));
  if (count == 3) return (f_openssl_pkey_export_to_file(a0, a1, a2));
  return (f_openssl_pkey_export_to_file(a0, a1, a2, a3));
}
Variant ei_oci_commit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_commit);
  return (f_oci_commit(a0));
}
Variant ei_imagecolorclosesthwb(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorclosesthwb);
  return (f_imagecolorclosesthwb(a0, a1, a2, a3));
}
Variant ei_ldap_get_attributes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_get_attributes);
  return (f_ldap_get_attributes(a0, a1));
}
Variant ei_date_modify(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_modify);
  return (f_date_modify(a0, a1), null);
}
Variant ei_hphp_splfileinfo_setinfoclass(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_setinfoclass);
  return (f_hphp_splfileinfo_setinfoclass(a0, a1), null);
}
Variant ei_umask(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(umask);
  int count = params.size();
  if (count <= 0) return (f_umask());
  return (f_umask(a0));
}
Variant ei_xml_get_current_column_number(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_get_current_column_number);
  return (f_xml_get_current_column_number(a0));
}
Variant ei_pixelsetblue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetblue);
  return (f_pixelsetblue(a0, a1), null);
}
Variant ei_mb_http_output(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_http_output);
  int count = params.size();
  if (count <= 0) return (f_mb_http_output());
  return (f_mb_http_output(a0));
}
Variant ei_flock(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(flock);
  int count = params.size();
  if (count <= 2) return (f_flock(a0, a1));
  return (f_flock(a0, a1, ref(a2)));
}
Variant ei_hphp_splfileobject_ftell(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_ftell);
  return (f_hphp_splfileobject_ftell(a0));
}
Variant ei_pcntl_wifexited(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wifexited);
  return (f_pcntl_wifexited(a0));
}
Variant ei_magicksetformat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetformat);
  return (f_magicksetformat(a0, a1));
}
Variant ei_array_map(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_map);
  int count = params.size();
  if (count <= 2) return (f_array_map(count, a0, a1));
  return (f_array_map(count, a0, a1,vargs));
}
Variant ei_magicksharpenimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksharpenimage);
  int count = params.size();
  if (count <= 3) return (f_magicksharpenimage(a0, a1, a2));
  return (f_magicksharpenimage(a0, a1, a2, a3));
}
Variant ei_is_infinite(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_infinite);
  return (f_is_infinite(a0));
}
Variant ei_date_timezone_set(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_timezone_set);
  return (f_date_timezone_set(a0, a1), null);
}
Variant ei_mb_ereg_search_init(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search_init);
  int count = params.size();
  if (count <= 1) return (f_mb_ereg_search_init(a0));
  if (count == 2) return (f_mb_ereg_search_init(a0, a1));
  return (f_mb_ereg_search_init(a0, a1, a2));
}
Variant ei_drawcircle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawcircle);
  return (f_drawcircle(a0, a1, a2, a3, a4), null);
}
Variant ei_is_readable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_readable);
  return (f_is_readable(a0));
}
Variant ei_image_type_to_extension(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(image_type_to_extension);
  int count = params.size();
  if (count <= 1) return (f_image_type_to_extension(a0));
  return (f_image_type_to_extension(a0, a1));
}
Variant ei_printf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(printf);
  int count = params.size();
  if (count <= 1) return (f_printf(count, a0));
  return (f_printf(count, a0,vargs));
}
Variant ei_magicksetimagecompression(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagecompression);
  return (f_magicksetimagecompression(a0, a1));
}
Variant ei_mcrypt_decrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_decrypt);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_decrypt(a0, a1, a2, a3));
  return (f_mcrypt_decrypt(a0, a1, a2, a3, a4));
}
Variant ei_hphp_directoryiterator_next(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_next);
  return (f_hphp_directoryiterator_next(a0), null);
}
Variant ei_natcasesort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(natcasesort);
  return (f_natcasesort(ref(a0)));
}
Variant ei_array_chunk(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_chunk);
  int count = params.size();
  if (count <= 2) return (f_array_chunk(a0, a1));
  return (f_array_chunk(a0, a1, a2));
}
Variant ei_imagefilledpolygon(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefilledpolygon);
  return (f_imagefilledpolygon(a0, a1, a2, a3));
}
Variant ei_drawpoppattern(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpoppattern);
  return (f_drawpoppattern(a0), null);
}
Variant ei_magickgetimagewidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagewidth);
  return (f_magickgetimagewidth(a0));
}
Variant ei_drawgetfontfamily(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfontfamily);
  return (f_drawgetfontfamily(a0));
}
Variant ei_dl(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dl);
  return (f_dl(a0));
}
Variant ei_touch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(touch);
  int count = params.size();
  if (count <= 1) return (f_touch(a0));
  if (count == 2) return (f_touch(a0, a1));
  return (f_touch(a0, a1, a2));
}
Variant ei_hphp_recursivedirectoryiterator___tostring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator___tostring);
  return (f_hphp_recursivedirectoryiterator___tostring(a0));
}
Variant ei_magicksetimagebordercolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagebordercolor);
  return (f_magicksetimagebordercolor(a0, a1));
}
Variant ei_hphp_directoryiterator_rewind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_rewind);
  return (f_hphp_directoryiterator_rewind(a0), null);
}
Variant ei_magickspliceimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickspliceimage);
  return (f_magickspliceimage(a0, a1, a2, a3, a4));
}
Variant ei_define(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(define);
  int count = params.size();
  if (count <= 2) return (f_define(a0, a1));
  return (f_define(a0, a1, a2));
}
Variant ei_headers_sent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(headers_sent);
  int count = params.size();
  if (count <= 0) return (f_headers_sent());
  if (count == 1) return (f_headers_sent(ref(a0)));
  return (f_headers_sent(ref(a0), ref(a1)));
}
Variant ei_stream_context_get_options(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_context_get_options);
  return (f_stream_context_get_options(a0));
}
Variant ei_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(file);
  int count = params.size();
  if (count <= 1) return (f_file(a0));
  if (count == 2) return (f_file(a0, a1));
  return (f_file(a0, a1, a2));
}
Variant ei_imagecolorresolvealpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorresolvealpha);
  return (f_imagecolorresolvealpha(a0, a1, a2, a3, a4));
}
Variant ei_strtr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strtr);
  int count = params.size();
  if (count <= 2) return (f_strtr(a0, a1));
  return (f_strtr(a0, a1, a2));
}
Variant ei_posix_strerror(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_strerror);
  return (f_posix_strerror(a0));
}
Variant ei_libxml_use_internal_errors(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(libxml_use_internal_errors);
  int count = params.size();
  if (count <= 0) return (f_libxml_use_internal_errors());
  return (f_libxml_use_internal_errors(a0));
}
Variant ei_openssl_get_publickey(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_get_publickey);
  return (f_openssl_get_publickey(a0));
}
Variant ei_time_nanosleep(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(time_nanosleep);
  return (f_time_nanosleep(a0, a1));
}
Variant ei_magicksetimageunits(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageunits);
  return (f_magicksetimageunits(a0, a1));
}
Variant ei_floor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(floor);
  return (f_floor(a0));
}
Variant ei_array_pad(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_pad);
  return (f_array_pad(a0, a1, a2));
}
Variant ei_sem_release(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sem_release);
  return (f_sem_release(a0));
}
Variant ei_hphp_splfileinfo_getctime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getctime);
  return (f_hphp_splfileinfo_getctime(a0));
}
Variant ei_highlight_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(highlight_string);
  int count = params.size();
  if (count <= 1) return (f_highlight_string(a0));
  return (f_highlight_string(a0, a1));
}
Variant ei_hphp_invoke(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_invoke);
  return (f_hphp_invoke(a0, a1));
}
Variant ei_imageloadfont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageloadfont);
  return (f_imageloadfont(a0));
}
Variant ei_xmlwriter_start_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_element);
  return (f_xmlwriter_start_element(a0, a1));
}
Variant ei_localeconv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(localeconv);
  return (f_localeconv());
}
Variant ei_exif_thumbnail(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exif_thumbnail);
  int count = params.size();
  if (count <= 1) return (f_exif_thumbnail(a0));
  if (count == 2) return (f_exif_thumbnail(a0, ref(a1)));
  if (count == 3) return (f_exif_thumbnail(a0, ref(a1), ref(a2)));
  return (f_exif_thumbnail(a0, ref(a1), ref(a2), ref(a3)));
}
Variant ei_mysql_get_proto_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_get_proto_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_get_proto_info());
  return (f_mysql_get_proto_info(a0));
}
Variant ei_imagefontwidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefontwidth);
  return (f_imagefontwidth(a0));
}
Variant ei_substr_compare(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(substr_compare);
  int count = params.size();
  if (count <= 3) return (f_substr_compare(a0, a1, a2));
  if (count == 4) return (f_substr_compare(a0, a1, a2, a3));
  return (f_substr_compare(a0, a1, a2, a3, a4));
}
Variant ei_xbox_post_message(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xbox_post_message);
  int count = params.size();
  if (count <= 1) return (f_xbox_post_message(a0));
  return (f_xbox_post_message(a0, a1));
}
Variant ei_fb_rename_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_rename_function);
  return (f_fb_rename_function(a0, a1));
}
Variant ei_array_walk_recursive(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_walk_recursive);
  int count = params.size();
  if (count <= 2) return (f_array_walk_recursive(ref(a0), a1));
  return (f_array_walk_recursive(ref(a0), a1, a2));
}
Variant ei_mysql_list_processes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_list_processes);
  int count = params.size();
  if (count <= 0) return (f_mysql_list_processes());
  return (f_mysql_list_processes(a0));
}
Variant ei_imagedashedline(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagedashedline);
  return (f_imagedashedline(a0, a1, a2, a3, a4, a5));
}
Variant ei_magickgetimagedelay(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagedelay);
  return (f_magickgetimagedelay(a0));
}
Variant ei_pi(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pi);
  return (f_pi());
}
Variant ei_mb_substr_count(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_substr_count);
  int count = params.size();
  if (count <= 2) return (f_mb_substr_count(a0, a1));
  return (f_mb_substr_count(a0, a1, a2));
}
Variant ei_hphp_splfileinfo_getinode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getinode);
  return (f_hphp_splfileinfo_getinode(a0));
}
Variant ei_magickgettextdescent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgettextdescent);
  int count = params.size();
  if (count <= 3) return (f_magickgettextdescent(a0, a1, a2));
  return (f_magickgettextdescent(a0, a1, a2, a3));
}
Variant ei_drawsetstrokealpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokealpha);
  return (f_drawsetstrokealpha(a0, a1), null);
}
Variant ei_apc_delete_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_delete_file);
  int count = params.size();
  if (count <= 1) return (f_apc_delete_file(a0));
  return (f_apc_delete_file(a0, a1));
}
Variant ei_strrpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strrpos);
  int count = params.size();
  if (count <= 2) return (f_strrpos(a0, a1));
  return (f_strrpos(a0, a1, a2));
}
Variant ei_array_diff_assoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_diff_assoc);
  int count = params.size();
  if (count <= 2) return (f_array_diff_assoc(count, a0, a1));
  return (f_array_diff_assoc(count, a0, a1,vargs));
}
Variant ei_magickclippathimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickclippathimage);
  return (f_magickclippathimage(a0, a1, a2));
}
Variant ei_xmlwriter_write_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_element);
  int count = params.size();
  if (count <= 2) return (f_xmlwriter_write_element(a0, a1));
  return (f_xmlwriter_write_element(a0, a1, a2));
}
Variant ei_ascii2ebcdic(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ascii2ebcdic);
  return (f_ascii2ebcdic(a0));
}
Variant ei_ereg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ereg);
  int count = params.size();
  if (count <= 2) return (f_ereg(a0, a1));
  return (f_ereg(a0, a1, ref(a2)));
}
Variant ei_curl_multi_info_read(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_info_read);
  int count = params.size();
  if (count <= 1) return (f_curl_multi_info_read(a0));
  return (f_curl_multi_info_read(a0, ref(a1)));
}
Variant ei_oci_field_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_size);
  return (f_oci_field_size(a0, a1));
}
Variant ei_magickthresholdimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickthresholdimage);
  int count = params.size();
  if (count <= 2) return (f_magickthresholdimage(a0, a1));
  return (f_magickthresholdimage(a0, a1, a2));
}
Variant ei_msg_remove_queue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(msg_remove_queue);
  return (f_msg_remove_queue(a0));
}
Variant ei_mb_strlen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strlen);
  int count = params.size();
  if (count <= 1) return (f_mb_strlen(a0));
  return (f_mb_strlen(a0, a1));
}
Variant ei_drawgetclippath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetclippath);
  return (f_drawgetclippath(a0));
}
Variant ei_imagecopy(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecopy);
  return (f_imagecopy(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_pixelsetcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetcolor);
  return (f_pixelsetcolor(a0, a1), null);
}
Variant ei_time_sleep_until(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(time_sleep_until);
  return (f_time_sleep_until(a0));
}
Variant ei_mb_ereg_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_replace);
  int count = params.size();
  if (count <= 3) return (f_mb_ereg_replace(a0, a1, a2));
  return (f_mb_ereg_replace(a0, a1, a2, a3));
}
Variant ei_openssl_csr_get_public_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_csr_get_public_key);
  return (f_openssl_csr_get_public_key(a0));
}
Variant ei_magickfximage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickfximage);
  int count = params.size();
  if (count <= 2) return (f_magickfximage(a0, a1));
  return (f_magickfximage(a0, a1, a2));
}
Variant ei_tmpfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(tmpfile);
  return (f_tmpfile());
}
Variant ei_hash(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash);
  int count = params.size();
  if (count <= 2) return (f_hash(a0, a1));
  return (f_hash(a0, a1, a2));
}
Variant ei_uasort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(uasort);
  return (f_uasort(ref(a0), a1));
}
Variant ei_pixelgetalpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetalpha);
  return (f_pixelgetalpha(a0));
}
Variant ei_drawsettextencoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsettextencoding);
  return (f_drawsettextencoding(a0, a1), null);
}
Variant ei_apache_request_headers(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_request_headers);
  return (f_apache_request_headers());
}
Variant ei_is_subclass_of(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_subclass_of);
  return (f_is_subclass_of(a0, a1));
}
Variant ei_pixelgetmagentaquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetmagentaquantum);
  return (f_pixelgetmagentaquantum(a0));
}
Variant ei_hphp_get_static_property(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_get_static_property);
  return (f_hphp_get_static_property(a0, a1));
}
Variant ei_array_pop(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_pop);
  return (f_array_pop(ref(a0)));
}
Variant ei_magickgetimagecolors(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagecolors);
  return (f_magickgetimagecolors(a0));
}
Variant ei_class_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(class_exists);
  int count = params.size();
  if (count <= 1) return (f_class_exists(a0));
  return (f_class_exists(a0, a1));
}
Variant ei_getallheaders(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getallheaders);
  return (f_getallheaders());
}
Variant ei_get_extension_funcs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_extension_funcs);
  return (f_get_extension_funcs(a0));
}
Variant ei_imagecolordeallocate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolordeallocate);
  return (f_imagecolordeallocate(a0, a1));
}
Variant ei_closelog(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(closelog);
  return (f_closelog(), null);
}
Variant ei_drawpathlinetoabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathlinetoabsolute);
  return (f_drawpathlinetoabsolute(a0, a1, a2), null);
}
Variant ei_mcrypt_enc_get_iv_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_get_iv_size);
  return (f_mcrypt_enc_get_iv_size(a0));
}
Variant ei_json_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(json_decode);
  int count = params.size();
  if (count <= 1) return (f_json_decode(a0));
  if (count == 2) return (f_json_decode(a0, a1));
  return (f_json_decode(a0, a1, a2));
}
Variant ei_preg_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_replace);
  int count = params.size();
  if (count <= 3) return (f_preg_replace(a0, a1, a2));
  if (count == 4) return (f_preg_replace(a0, a1, a2, a3));
  return (f_preg_replace(a0, a1, a2, a3, ref(a4)));
}
Variant ei_hphp_splfileinfo_getmtime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getmtime);
  return (f_hphp_splfileinfo_getmtime(a0));
}
Variant ei_fmod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fmod);
  return (f_fmod(a0, a1));
}
Variant ei_curl_errno(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_errno);
  return (f_curl_errno(a0));
}
Variant ei_pagelet_server_task_start(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pagelet_server_task_start);
  int count = params.size();
  if (count <= 1) return (f_pagelet_server_task_start(a0));
  if (count == 2) return (f_pagelet_server_task_start(a0, a1));
  return (f_pagelet_server_task_start(a0, a1, a2));
}
Variant ei_hash_init(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_init);
  int count = params.size();
  if (count <= 1) return (f_hash_init(a0));
  if (count == 2) return (f_hash_init(a0, a1));
  return (f_hash_init(a0, a1, a2));
}
Variant ei_mb_strripos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strripos);
  int count = params.size();
  if (count <= 2) return (f_mb_strripos(a0, a1));
  if (count == 3) return (f_mb_strripos(a0, a1, a2));
  return (f_mb_strripos(a0, a1, a2, a3));
}
Variant ei_mysql_fetch_row(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_fetch_row);
  return (f_mysql_fetch_row(a0));
}
Variant ei_hphp_splfileobject_setcsvcontrol(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_setcsvcontrol);
  return (f_hphp_splfileobject_setcsvcontrol(a0, a1, a2, a3), null);
}
Variant ei_ob_get_flush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_get_flush);
  return (f_ob_get_flush());
}
Variant ei_curl_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_error);
  return (f_curl_error(a0));
}
Variant ei_oci_new_connect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_new_connect);
  int count = params.size();
  if (count <= 2) return (f_oci_new_connect(a0, a1));
  if (count == 3) return (f_oci_new_connect(a0, a1, a2));
  if (count == 4) return (f_oci_new_connect(a0, a1, a2, a3));
  return (f_oci_new_connect(a0, a1, a2, a3, a4));
}
Variant ei_set_magic_quotes_runtime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(set_magic_quotes_runtime);
  return (f_set_magic_quotes_runtime(a0));
}
Variant ei_magickcharcoalimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcharcoalimage);
  return (f_magickcharcoalimage(a0, a1, a2));
}
Variant ei_scandir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(scandir);
  int count = params.size();
  if (count <= 1) return (f_scandir(a0));
  if (count == 2) return (f_scandir(a0, a1));
  return (f_scandir(a0, a1, a2));
}
Variant ei_magickmosaicimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmosaicimages);
  return (f_magickmosaicimages(a0));
}
Variant ei_timezone_transitions_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_transitions_get);
  return (f_timezone_transitions_get(a0));
}
Variant ei_drawsetfontweight(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfontweight);
  return (f_drawsetfontweight(a0, a1), null);
}
Variant ei_popdrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(popdrawingwand);
  return (f_popdrawingwand(a0), null);
}
Variant ei_socket_shutdown(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_shutdown);
  int count = params.size();
  if (count <= 1) return (f_socket_shutdown(a0));
  return (f_socket_shutdown(a0, a1));
}
Variant ei_mcrypt_create_iv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_create_iv);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_create_iv(a0));
  return (f_mcrypt_create_iv(a0, a1));
}
Variant ei_eval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(eval);
  return (f_eval(a0));
}
Variant ei_bindec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bindec);
  return (f_bindec(a0));
}
Variant ei_fileperms(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fileperms);
  return (f_fileperms(a0));
}
Variant ei_hphp_splfileobject_fstat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fstat);
  return (f_hphp_splfileobject_fstat(a0));
}
Variant ei_unserialize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(unserialize);
  return (f_unserialize(a0));
}
Variant ei_ldap_t61_to_8859(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_t61_to_8859);
  return (f_ldap_t61_to_8859(a0));
}
Variant ei_urldecode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(urldecode);
  return (f_urldecode(a0));
}
Variant ei_magickannotateimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickannotateimage);
  return (f_magickannotateimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_mailparse_msg_create(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_create);
  return (f_mailparse_msg_create());
}
Variant ei_oci_field_type_raw(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_type_raw);
  return (f_oci_field_type_raw(a0, a1));
}
Variant ei_apache_get_modules(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_get_modules);
  return (f_apache_get_modules());
}
Variant ei_drawellipse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawellipse);
  return (f_drawellipse(a0, a1, a2, a3, a4, a5, a6), null);
}
Variant ei_xmlwriter_write_element_ns(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_element_ns);
  int count = params.size();
  if (count <= 4) return (f_xmlwriter_write_element_ns(a0, a1, a2, a3));
  return (f_xmlwriter_write_element_ns(a0, a1, a2, a3, a4));
}
Variant ei_magicksetcompressionquality(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetcompressionquality);
  return (f_magicksetcompressionquality(a0, a1));
}
Variant ei_magickaddnoiseimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickaddnoiseimage);
  return (f_magickaddnoiseimage(a0, a1));
}
Variant ei_magickgetimagewhitepoint(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagewhitepoint);
  return (f_magickgetimagewhitepoint(a0));
}
Variant ei_magickseparateimagechannel(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickseparateimagechannel);
  return (f_magickseparateimagechannel(a0, a1));
}
Variant ei_array_push(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_push);
  int count = params.size();
  if (count <= 2) return (f_array_push(count, ref(a0), a1));
  return (f_array_push(count, ref(a0), a1,vargs));
}
Variant ei_flush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(flush);
  return (f_flush(), null);
}
Variant ei_connection_aborted(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(connection_aborted);
  return (f_connection_aborted());
}
Variant ei_uksort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(uksort);
  return (f_uksort(ref(a0), a1));
}
Variant ei_mysql_set_timeout(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_set_timeout);
  int count = params.size();
  if (count <= 0) return (f_mysql_set_timeout());
  if (count == 1) return (f_mysql_set_timeout(a0));
  return (f_mysql_set_timeout(a0, a1));
}
Variant ei_hash_update_stream(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_update_stream);
  int count = params.size();
  if (count <= 2) return (f_hash_update_stream(a0, a1));
  return (f_hash_update_stream(a0, a1, a2));
}
Variant ei_ob_start(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_start);
  int count = params.size();
  if (count <= 0) return (f_ob_start());
  if (count == 1) return (f_ob_start(a0));
  if (count == 2) return (f_ob_start(a0, a1));
  return (f_ob_start(a0, a1, a2));
}
Variant ei_mysql_get_host_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_get_host_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_get_host_info());
  return (f_mysql_get_host_info(a0));
}
Variant ei_mb_language(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_language);
  int count = params.size();
  if (count <= 0) return (f_mb_language());
  return (f_mb_language(a0));
}
Variant ei_pixelgetnextiteratorrow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetnextiteratorrow);
  return (f_pixelgetnextiteratorrow(a0));
}
Variant ei_ldap_next_reference(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_next_reference);
  return (f_ldap_next_reference(a0, a1));
}
Variant ei_socket_get_status(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_get_status);
  return (f_socket_get_status(a0));
}
Variant ei_checkdnsrr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(checkdnsrr);
  int count = params.size();
  if (count <= 1) return (f_checkdnsrr(a0));
  return (f_checkdnsrr(a0, a1));
}
Variant ei_openssl_verify(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_verify);
  int count = params.size();
  if (count <= 3) return (f_openssl_verify(a0, a1, a2));
  return (f_openssl_verify(a0, a1, a2, a3));
}
Variant ei_curl_exec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_exec);
  return (f_curl_exec(a0));
}
Variant ei_magickgetexceptiontype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetexceptiontype);
  return (f_magickgetexceptiontype(a0));
}
Variant ei_array_sum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_sum);
  return (f_array_sum(a0));
}
Variant ei_unregister_tick_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(unregister_tick_function);
  return (f_unregister_tick_function(a0), null);
}
Variant ei_newpixelwandarray(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newpixelwandarray);
  return (f_newpixelwandarray(a0));
}
Variant ei_magickgetversion(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetversion);
  return (f_magickgetversion());
}
Variant ei_imagelayereffect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagelayereffect);
  return (f_imagelayereffect(a0, a1));
}
Variant ei_apache_reset_timeout(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_reset_timeout);
  return (f_apache_reset_timeout());
}
Variant ei_glob(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(glob);
  int count = params.size();
  if (count <= 1) return (f_glob(a0));
  return (f_glob(a0, a1));
}
Variant ei_exec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exec);
  int count = params.size();
  if (count <= 1) return (f_exec(a0));
  if (count == 2) return (f_exec(a0, ref(a1)));
  return (f_exec(a0, ref(a1), ref(a2)));
}
Variant ei_apd_continue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_continue);
  return (f_apd_continue());
}
Variant ei_magickgetimagedepth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagedepth);
  int count = params.size();
  if (count <= 1) return (f_magickgetimagedepth(a0));
  return (f_magickgetimagedepth(a0, a1));
}
Variant ei_pclose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pclose);
  return (f_pclose(a0));
}
Variant ei_get_parent_class(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_parent_class);
  int count = params.size();
  if (count <= 0) return (f_get_parent_class());
  return (f_get_parent_class(a0));
}
Variant ei_mb_strpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strpos);
  int count = params.size();
  if (count <= 2) return (f_mb_strpos(a0, a1));
  if (count == 3) return (f_mb_strpos(a0, a1, a2));
  return (f_mb_strpos(a0, a1, a2, a3));
}
Variant ei_xmlwriter_write_dtd_attlist(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_dtd_attlist);
  return (f_xmlwriter_write_dtd_attlist(a0, a1, a2));
}
Variant ei_xml_set_element_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_element_handler);
  return (f_xml_set_element_handler(a0, a1, a2));
}
Variant ei_drawgetstrokeopacity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokeopacity);
  return (f_drawgetstrokeopacity(a0));
}
Variant ei_ldap_get_entries(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_get_entries);
  return (f_ldap_get_entries(a0, a1));
}
Variant ei_ob_iconv_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_iconv_handler);
  return (f_ob_iconv_handler(a0, a1));
}
Variant ei_pathinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pathinfo);
  int count = params.size();
  if (count <= 1) return (f_pathinfo(a0));
  return (f_pathinfo(a0, a1));
}
Variant ei_magickaffinetransformimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickaffinetransformimage);
  return (f_magickaffinetransformimage(a0, a1));
}
Variant ei_ob_get_status(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_get_status);
  int count = params.size();
  if (count <= 0) return (f_ob_get_status());
  return (f_ob_get_status(a0));
}
Variant ei_exit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exit);
  int count = params.size();
  if (count <= 0) return (f_exit());
  return (f_exit(a0));
}
Variant ei_apc_sma_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_sma_info);
  int count = params.size();
  if (count <= 0) return (f_apc_sma_info());
  return (f_apc_sma_info(a0));
}
Variant ei_ldap_bind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_bind);
  int count = params.size();
  if (count <= 1) return (f_ldap_bind(a0));
  if (count == 2) return (f_ldap_bind(a0, a1));
  return (f_ldap_bind(a0, a1, a2));
}
Variant ei_pixelsetbluequantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetbluequantum);
  return (f_pixelsetbluequantum(a0, a1), null);
}
Variant ei_magickreadimagefile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickreadimagefile);
  return (f_magickreadimagefile(a0, a1));
}
Variant ei_ebcdic2ascii(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ebcdic2ascii);
  return (f_ebcdic2ascii(a0));
}
Variant ei_mysql_real_escape_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_real_escape_string);
  int count = params.size();
  if (count <= 1) return (f_mysql_real_escape_string(a0));
  return (f_mysql_real_escape_string(a0, a1));
}
Variant ei_magickframeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickframeimage);
  return (f_magickframeimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_pixelgetblue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetblue);
  return (f_pixelgetblue(a0));
}
Variant ei_imagefill(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefill);
  return (f_imagefill(a0, a1, a2, a3));
}
Variant ei_hphp_set_property(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_set_property);
  return (f_hphp_set_property(a0, a1, a2, a3), null);
}
Variant ei_oci_execute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_execute);
  int count = params.size();
  if (count <= 1) return (f_oci_execute(a0));
  return (f_oci_execute(a0, a1));
}
Variant ei_oci_cancel(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_cancel);
  return (f_oci_cancel(a0));
}
Variant ei_readgzfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(readgzfile);
  int count = params.size();
  if (count <= 1) return (f_readgzfile(a0));
  return (f_readgzfile(a0, a1));
}
Variant ei_magicksampleimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksampleimage);
  return (f_magicksampleimage(a0, a1, a2));
}
Variant ei_mysql_escape_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_escape_string);
  return (f_mysql_escape_string(a0));
}
Variant ei_idn_to_utf8(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(idn_to_utf8);
  int count = params.size();
  if (count <= 1) return (f_idn_to_utf8(a0));
  return (f_idn_to_utf8(a0, ref(a1)));
}
Variant ei_sql_regcase(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sql_regcase);
  return (f_sql_regcase(a0));
}
Variant ei_in_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(in_array);
  int count = params.size();
  if (count <= 2) return (f_in_array(a0, a1));
  return (f_in_array(a0, a1, a2));
}
Variant ei_drawpathcurvetoquadraticbezierabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetoquadraticbezierabsolute);
  return (f_drawpathcurvetoquadraticbezierabsolute(a0, a1, a2, a3, a4), null);
}
Variant ei_apache_getenv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_getenv);
  int count = params.size();
  if (count <= 1) return (f_apache_getenv(a0));
  return (f_apache_getenv(a0, a1));
}
Variant ei_socket_set_timeout(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_set_timeout);
  int count = params.size();
  if (count <= 2) return (f_socket_set_timeout(a0, a1));
  return (f_socket_set_timeout(a0, a1, a2));
}
Variant ei_bin2hex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bin2hex);
  return (f_bin2hex(a0));
}
Variant ei_error_get_last(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(error_get_last);
  return (f_error_get_last());
}
Variant ei_is_link(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_link);
  return (f_is_link(a0));
}
Variant ei_set_file_buffer(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(set_file_buffer);
  return (f_set_file_buffer(a0, a1));
}
Variant ei_magicksetimageredprimary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageredprimary);
  return (f_magicksetimageredprimary(a0, a1, a2));
}
Variant ei_i18n_loc_set_default(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(i18n_loc_set_default);
  return (f_i18n_loc_set_default(a0));
}
Variant ei_ftok(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ftok);
  return (f_ftok(a0, a1));
}
Variant ei_mysql_list_fields(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_list_fields);
  int count = params.size();
  if (count <= 2) return (f_mysql_list_fields(a0, a1));
  return (f_mysql_list_fields(a0, a1, a2));
}
Variant ei_stream_wrapper_register(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_wrapper_register);
  return (f_stream_wrapper_register(a0, a1));
}
Variant ei_pixelsetredquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetredquantum);
  return (f_pixelsetredquantum(a0, a1), null);
}
Variant ei_xhprof_disable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xhprof_disable);
  return (f_xhprof_disable());
}
Variant ei_magickgammaimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgammaimage);
  int count = params.size();
  if (count <= 2) return (f_magickgammaimage(a0, a1));
  return (f_magickgammaimage(a0, a1, a2));
}
Variant ei_pixelsetcyan(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetcyan);
  return (f_pixelsetcyan(a0, a1), null);
}
Variant ei_mb_decode_mimeheader(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_decode_mimeheader);
  return (f_mb_decode_mimeheader(a0));
}
Variant ei_htmlentities(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(htmlentities);
  int count = params.size();
  if (count <= 1) return (f_htmlentities(a0));
  if (count == 2) return (f_htmlentities(a0, a1));
  if (count == 3) return (f_htmlentities(a0, a1, a2));
  return (f_htmlentities(a0, a1, a2, a3));
}
Variant ei_rad2deg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rad2deg);
  return (f_rad2deg(a0));
}
Variant ei_xmlwriter_start_dtd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_dtd);
  int count = params.size();
  if (count <= 2) return (f_xmlwriter_start_dtd(a0, a1));
  if (count == 3) return (f_xmlwriter_start_dtd(a0, a1, a2));
  return (f_xmlwriter_start_dtd(a0, a1, a2, a3));
}
Variant ei_drawpathstart(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathstart);
  return (f_drawpathstart(a0), null);
}
Variant ei_proc_nice(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(proc_nice);
  return (f_proc_nice(a0));
}
Variant ei_hphp_thread_is_warmup_enabled(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_thread_is_warmup_enabled);
  return (f_hphp_thread_is_warmup_enabled());
}
Variant ei_imagepsslantfont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepsslantfont);
  return (f_imagepsslantfont(a0, a1));
}
Variant ei_magickgetimagemattecolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagemattecolor);
  return (f_magickgetimagemattecolor(a0));
}
Variant ei_mb_strstr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strstr);
  int count = params.size();
  if (count <= 2) return (f_mb_strstr(a0, a1));
  if (count == 3) return (f_mb_strstr(a0, a1, a2));
  return (f_mb_strstr(a0, a1, a2, a3));
}
Variant ei_pixelgetblack(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetblack);
  return (f_pixelgetblack(a0));
}
Variant ei_mysql_field_table(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_field_table);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_table(a0));
  return (f_mysql_field_table(a0, a1));
}
Variant ei_magicksetimagescene(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagescene);
  return (f_magicksetimagescene(a0, a1));
}
Variant ei_magickgetimagerenderingintent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagerenderingintent);
  return (f_magickgetimagerenderingintent(a0));
}
Variant ei_setlocale(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(setlocale);
  int count = params.size();
  if (count <= 2) return (f_setlocale(count, a0, a1));
  return (f_setlocale(count, a0, a1,vargs));
}
Variant ei_drawpushclippath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpushclippath);
  return (f_drawpushclippath(a0, a1), null);
}
Variant ei_drawpopclippath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpopclippath);
  return (f_drawpopclippath(a0), null);
}
Variant ei_nl2br(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(nl2br);
  return (f_nl2br(a0));
}
Variant ei_hphp_splfileinfo_getperms(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getperms);
  return (f_hphp_splfileinfo_getperms(a0));
}
Variant ei_drawsetfillopacity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfillopacity);
  return (f_drawsetfillopacity(a0, a1), null);
}
Variant ei_mb_substitute_character(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_substitute_character);
  int count = params.size();
  if (count <= 0) return (f_mb_substitute_character());
  return (f_mb_substitute_character(a0));
}
Variant ei_setrawcookie(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(setrawcookie);
  int count = params.size();
  if (count <= 1) return (f_setrawcookie(a0));
  if (count == 2) return (f_setrawcookie(a0, a1));
  if (count == 3) return (f_setrawcookie(a0, a1, a2));
  if (count == 4) return (f_setrawcookie(a0, a1, a2, a3));
  if (count == 5) return (f_setrawcookie(a0, a1, a2, a3, a4));
  if (count == 6) return (f_setrawcookie(a0, a1, a2, a3, a4, a5));
  return (f_setrawcookie(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_evhttp_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(evhttp_get);
  int count = params.size();
  if (count <= 1) return (f_evhttp_get(a0));
  if (count == 2) return (f_evhttp_get(a0, a1));
  return (f_evhttp_get(a0, a1, a2));
}
Variant ei_getimagesize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getimagesize);
  int count = params.size();
  if (count <= 1) return (f_getimagesize(a0));
  return (f_getimagesize(a0, ref(a1)));
}
Variant ei_ldap_modify(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_modify);
  return (f_ldap_modify(a0, a1, a2));
}
Variant ei_ldap_search(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_search);
  int count = params.size();
  if (count <= 3) return (f_ldap_search(a0, a1, a2));
  if (count == 4) return (f_ldap_search(a0, a1, a2, a3));
  if (count == 5) return (f_ldap_search(a0, a1, a2, a3, a4));
  if (count == 6) return (f_ldap_search(a0, a1, a2, a3, a4, a5));
  if (count == 7) return (f_ldap_search(a0, a1, a2, a3, a4, a5, a6));
  return (f_ldap_search(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_strcasecmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strcasecmp);
  return (f_strcasecmp(a0, a1));
}
Variant ei_magickgetimagesignature(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagesignature);
  return (f_magickgetimagesignature(a0));
}
Variant ei_get_class_methods(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_class_methods);
  return (f_get_class_methods(a0));
}
Variant ei_fopen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fopen);
  int count = params.size();
  if (count <= 2) return (f_fopen(a0, a1));
  if (count == 3) return (f_fopen(a0, a1, a2));
  return (f_fopen(a0, a1, a2, a3));
}
Variant ei_mcrypt_generic_end(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_generic_end);
  return (f_mcrypt_generic_end(a0));
}
Variant ei_openssl_pkey_free(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_free);
  return (f_openssl_pkey_free(a0), null);
}
Variant ei_readlink(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(readlink);
  return (f_readlink(a0));
}
Variant ei_magickechoimagesblob(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickechoimagesblob);
  return (f_magickechoimagesblob(a0));
}
Variant ei_mailparse_msg_parse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_parse);
  return (f_mailparse_msg_parse(a0, a1));
}
Variant ei_xmlwriter_text(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_text);
  return (f_xmlwriter_text(a0, a1));
}
Variant ei_pixelsetindex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetindex);
  return (f_pixelsetindex(a0, a1), null);
}
Variant ei_php_sapi_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(php_sapi_name);
  return (f_php_sapi_name());
}
Variant ei_mcrypt_enc_get_key_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_get_key_size);
  return (f_mcrypt_enc_get_key_size(a0));
}
Variant ei_mysql_num_fields(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_num_fields);
  return (f_mysql_num_fields(a0));
}
Variant ei_magicksteganoimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksteganoimage);
  return (f_magicksteganoimage(a0, a1, a2));
}
Variant ei_magicksetfirstiterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetfirstiterator);
  return (f_magicksetfirstiterator(a0), null);
}
Variant ei_pixelgetcolorasstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetcolorasstring);
  return (f_pixelgetcolorasstring(a0));
}
Variant ei_magickremoveimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickremoveimage);
  return (f_magickremoveimage(a0));
}
Variant ei_file_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(file_exists);
  return (f_file_exists(a0));
}
Variant ei_call_user_func_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(call_user_func_array);
  return (f_call_user_func_array(a0, a1));
}
Variant ei_restore_include_path(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(restore_include_path);
  return (f_restore_include_path(), null);
}
Variant ei_drawgettextundercolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgettextundercolor);
  return (f_drawgettextundercolor(a0));
}
Variant ei_array_shift(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_shift);
  return (f_array_shift(ref(a0)));
}
Variant ei_magicksetimageformat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageformat);
  return (f_magicksetimageformat(a0, a1));
}
Variant ei_xmlwriter_open_memory(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_open_memory);
  return (f_xmlwriter_open_memory());
}
Variant ei_drawsetstrokemiterlimit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokemiterlimit);
  return (f_drawsetstrokemiterlimit(a0, a1), null);
}
Variant ei_mb_convert_kana(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_convert_kana);
  int count = params.size();
  if (count <= 1) return (f_mb_convert_kana(a0));
  if (count == 2) return (f_mb_convert_kana(a0, a1));
  return (f_mb_convert_kana(a0, a1, a2));
}
Variant ei_token_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(token_name);
  return (f_token_name(a0));
}
Variant ei_preg_quote(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_quote);
  int count = params.size();
  if (count <= 1) return (f_preg_quote(a0));
  return (f_preg_quote(a0, a1));
}
Variant ei_hphp_service_thread_started(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_service_thread_started);
  return (f_hphp_service_thread_started(), null);
}
Variant ei_magickconvolveimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickconvolveimage);
  int count = params.size();
  if (count <= 2) return (f_magickconvolveimage(a0, a1));
  return (f_magickconvolveimage(a0, a1, a2));
}
Variant ei_curl_getinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_getinfo);
  int count = params.size();
  if (count <= 1) return (f_curl_getinfo(a0));
  return (f_curl_getinfo(a0, a1));
}
Variant ei_pfsockopen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pfsockopen);
  int count = params.size();
  if (count <= 1) return (f_pfsockopen(a0));
  if (count == 2) return (f_pfsockopen(a0, a1));
  if (count == 3) return (f_pfsockopen(a0, a1, ref(a2)));
  if (count == 4) return (f_pfsockopen(a0, a1, ref(a2), ref(a3)));
  return (f_pfsockopen(a0, a1, ref(a2), ref(a3), a4));
}
Variant ei_ucfirst(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ucfirst);
  return (f_ucfirst(a0));
}
Variant ei_hphp_splfileinfo_isreadable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_isreadable);
  return (f_hphp_splfileinfo_isreadable(a0));
}
Variant ei_chroot(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chroot);
  return (f_chroot(a0));
}
Variant ei_chdir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chdir);
  return (f_chdir(a0));
}
Variant ei_socket_write(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_write);
  int count = params.size();
  if (count <= 2) return (f_socket_write(a0, a1));
  return (f_socket_write(a0, a1, a2));
}
Variant ei_stream_bucket_new(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_bucket_new);
  return (f_stream_bucket_new(a0, a1));
}
Variant ei_magickflipimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickflipimage);
  return (f_magickflipimage(a0));
}
Variant ei_timezone_identifiers_list(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_identifiers_list);
  return (f_timezone_identifiers_list());
}
Variant ei_array_diff_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_diff_key);
  int count = params.size();
  if (count <= 2) return (f_array_diff_key(count, a0, a1));
  return (f_array_diff_key(count, a0, a1,vargs));
}
Variant ei_fread(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fread);
  return (f_fread(a0, a1));
}
Variant ei_override_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(override_function);
  return (f_override_function(a0, a1, a2));
}
Variant ei_is_long(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_long);
  return (f_is_long(a0));
}
Variant ei_pixelsetred(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetred);
  return (f_pixelsetred(a0, a1), null);
}
Variant ei_mailparse_uudecode_all(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_uudecode_all);
  return (f_mailparse_uudecode_all(a0));
}
Variant ei_drawsetvectorgraphics(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetvectorgraphics);
  return (f_drawsetvectorgraphics(a0, a1));
}
Variant ei_oci_parse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_parse);
  return (f_oci_parse(a0, a1));
}
Variant ei_ctype_upper(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_upper);
  return (f_ctype_upper(a0));
}
Variant ei_get_declared_classes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_declared_classes);
  return (f_get_declared_classes());
}
Variant ei_drawgetstrokelinejoin(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokelinejoin);
  return (f_drawgetstrokelinejoin(a0));
}
Variant ei_popen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(popen);
  return (f_popen(a0, a1));
}
Variant ei_ldap_next_entry(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_next_entry);
  return (f_ldap_next_entry(a0, a1));
}
Variant ei_mailparse_msg_parse_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_parse_file);
  return (f_mailparse_msg_parse_file(a0));
}
Variant ei_get_loaded_extensions(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_loaded_extensions);
  int count = params.size();
  if (count <= 0) return (f_get_loaded_extensions());
  return (f_get_loaded_extensions(a0));
}
Variant ei_magickdrawimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickdrawimage);
  return (f_magickdrawimage(a0, a1));
}
Variant ei_mcrypt_cbc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_cbc);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_cbc(a0, a1, a2, a3));
  return (f_mcrypt_cbc(a0, a1, a2, a3, a4));
}
Variant ei_imagecreatetruecolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatetruecolor);
  return (f_imagecreatetruecolor(a0, a1));
}
Variant ei_inet_ntop(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(inet_ntop);
  return (f_inet_ntop(a0));
}
Variant ei_magickreadimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickreadimage);
  return (f_magickreadimage(a0, a1));
}
Variant ei_curl_init(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_init);
  int count = params.size();
  if (count <= 0) return (f_curl_init());
  return (f_curl_init(a0));
}
Variant ei_mcrypt_cfb(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_cfb);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_cfb(a0, a1, a2, a3));
  return (f_mcrypt_cfb(a0, a1, a2, a3, a4));
}
Variant ei_set_time_limit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(set_time_limit);
  return (f_set_time_limit(a0), null);
}
Variant ei_libxml_get_errors(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(libxml_get_errors);
  return (f_libxml_get_errors());
}
Variant ei_get_magic_quotes_gpc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_magic_quotes_gpc);
  return (f_get_magic_quotes_gpc());
}
Variant ei_proc_get_status(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(proc_get_status);
  return (f_proc_get_status(a0));
}
Variant ei_log10(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(log10);
  return (f_log10(a0));
}
Variant ei_hphp_directoryiterator_seek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_seek);
  return (f_hphp_directoryiterator_seek(a0, a1), null);
}
Variant ei_ldap_get_values(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_get_values);
  return (f_ldap_get_values(a0, a1, a2));
}
Variant ei_is_soap_fault(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_soap_fault);
  return (f_is_soap_fault(a0));
}
Variant ei_magickgetimagechannelmean(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagechannelmean);
  return (f_magickgetimagechannelmean(a0, a1));
}
Variant ei_disk_total_space(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(disk_total_space);
  return (f_disk_total_space(a0));
}
Variant ei_imagegd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagegd);
  int count = params.size();
  if (count <= 1) return (f_imagegd(a0));
  return (f_imagegd(a0, a1));
}
Variant ei_socket_set_blocking(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_set_blocking);
  return (f_socket_set_blocking(a0, a1));
}
Variant ei_posix_mknod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_mknod);
  int count = params.size();
  if (count <= 2) return (f_posix_mknod(a0, a1));
  if (count == 3) return (f_posix_mknod(a0, a1, a2));
  return (f_posix_mknod(a0, a1, a2, a3));
}
Variant ei_apc_define_constants(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_define_constants);
  int count = params.size();
  if (count <= 2) return (f_apc_define_constants(a0, a1));
  if (count == 3) return (f_apc_define_constants(a0, a1, a2));
  return (f_apc_define_constants(a0, a1, a2, a3));
}
Variant ei_posix_kill(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_kill);
  return (f_posix_kill(a0, a1));
}
Variant ei_drawgetstrokealpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokealpha);
  return (f_drawgetstrokealpha(a0));
}
Variant ei_mcrypt_get_block_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_get_block_size);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_get_block_size(a0));
  return (f_mcrypt_get_block_size(a0, a1));
}
Variant ei_magickmorphimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmorphimages);
  return (f_magickmorphimages(a0, a1));
}
Variant ei_getlastmod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getlastmod);
  return (f_getlastmod());
}
Variant ei_magickquantizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickquantizeimage);
  return (f_magickquantizeimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_imagesavealpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesavealpha);
  return (f_imagesavealpha(a0, a1));
}
Variant ei_drawsetfontfamily(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfontfamily);
  return (f_drawsetfontfamily(a0, a1));
}
Variant ei_drawsettextantialias(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsettextantialias);
  int count = params.size();
  if (count <= 1) return (f_drawsettextantialias(a0), null);
  return (f_drawsettextantialias(a0, a1), null);
}
Variant ei_pixelsetgreenquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetgreenquantum);
  return (f_pixelsetgreenquantum(a0, a1), null);
}
Variant ei_bcsqrt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcsqrt);
  int count = params.size();
  if (count <= 1) return (f_bcsqrt(a0));
  return (f_bcsqrt(a0, a1));
}
Variant ei_pcntl_signal(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_signal);
  int count = params.size();
  if (count <= 2) return (f_pcntl_signal(a0, a1));
  return (f_pcntl_signal(a0, a1, a2));
}
Variant ei_mcrypt_ecb(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_ecb);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_ecb(a0, a1, a2, a3));
  return (f_mcrypt_ecb(a0, a1, a2, a3, a4));
}
Variant ei_pixelsetcyanquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetcyanquantum);
  return (f_pixelsetcyanquantum(a0, a1), null);
}
Variant ei_array_walk(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_walk);
  int count = params.size();
  if (count <= 2) return (f_array_walk(ref(a0), a1));
  return (f_array_walk(ref(a0), a1, a2));
}
Variant ei_getmxrr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getmxrr);
  int count = params.size();
  if (count <= 2) return (f_getmxrr(a0, ref(a1)));
  return (f_getmxrr(a0, ref(a1), ref(a2)));
}
Variant ei_magickqueryfonts(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickqueryfonts);
  return (f_magickqueryfonts(a0));
}
Variant ei_floatval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(floatval);
  return (f_floatval(a0));
}
Variant ei_xml_set_object(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_object);
  return (f_xml_set_object(a0, ref(a1)));
}
Variant ei_ctype_print(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_print);
  return (f_ctype_print(a0));
}
Variant ei_gzwrite(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzwrite);
  int count = params.size();
  if (count <= 2) return (f_gzwrite(a0, a1));
  return (f_gzwrite(a0, a1, a2));
}
Variant ei_hphp_splfileinfo___tostring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo___tostring);
  return (f_hphp_splfileinfo___tostring(a0));
}
Variant ei_magickaddimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickaddimage);
  return (f_magickaddimage(a0, a1));
}
Variant ei_clearstatcache(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clearstatcache);
  return (f_clearstatcache(), null);
}
Variant ei_chgrp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chgrp);
  return (f_chgrp(a0, a1));
}
Variant ei_virtual(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(virtual);
  return (f_virtual(a0));
}
Variant ei_reset(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(reset);
  return (f_reset(ref(a0)));
}
Variant ei_oci_field_type(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_type);
  return (f_oci_field_type(a0, a1));
}
Variant ei_set_include_path(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(set_include_path);
  return (f_set_include_path(a0));
}
Variant ei_hphp_recursivedirectoryiterator_next(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_next);
  return (f_hphp_recursivedirectoryiterator_next(a0), null);
}
Variant ei_openssl_x509_export(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_export);
  int count = params.size();
  if (count <= 2) return (f_openssl_x509_export(a0, ref(a1)));
  return (f_openssl_x509_export(a0, ref(a1), a2));
}
Variant ei_magickcolorizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcolorizeimage);
  return (f_magickcolorizeimage(a0, a1, a2));
}
Variant ei_imagettftext(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagettftext);
  return (f_imagettftext(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_mb_strrchr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strrchr);
  int count = params.size();
  if (count <= 2) return (f_mb_strrchr(a0, a1));
  if (count == 3) return (f_mb_strrchr(a0, a1, a2));
  return (f_mb_strrchr(a0, a1, a2, a3));
}
Variant ei_magickgetimageprofile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageprofile);
  return (f_magickgetimageprofile(a0, a1));
}
Variant ei_file_put_contents(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(file_put_contents);
  int count = params.size();
  if (count <= 2) return (f_file_put_contents(a0, a1));
  if (count == 3) return (f_file_put_contents(a0, a1, a2));
  return (f_file_put_contents(a0, a1, a2, a3));
}
Variant ei_iconv_mime_encode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_mime_encode);
  int count = params.size();
  if (count <= 2) return (f_iconv_mime_encode(a0, a1));
  return (f_iconv_mime_encode(a0, a1, a2));
}
Variant ei_log1p(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(log1p);
  return (f_log1p(a0));
}
Variant ei_fwrite(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fwrite);
  int count = params.size();
  if (count <= 2) return (f_fwrite(a0, a1));
  return (f_fwrite(a0, a1, a2));
}
Variant ei_atan2(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(atan2);
  return (f_atan2(a0, a1));
}
Variant ei_is_a(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_a);
  return (f_is_a(a0, a1));
}
Variant ei_idate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(idate);
  int count = params.size();
  if (count <= 1) return (f_idate(a0));
  return (f_idate(a0, a1));
}
Variant ei_posix_initgroups(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_initgroups);
  return (f_posix_initgroups(a0, a1));
}
Variant ei_arsort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(arsort);
  int count = params.size();
  if (count <= 1) return (f_arsort(ref(a0)));
  if (count == 2) return (f_arsort(ref(a0), a1));
  return (f_arsort(ref(a0), a1, a2));
}
Variant ei_gethostbyaddr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gethostbyaddr);
  return (f_gethostbyaddr(a0));
}
Variant ei_apc_delete(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_delete);
  int count = params.size();
  if (count <= 1) return (f_apc_delete(a0));
  return (f_apc_delete(a0, a1));
}
Variant ei_magicklevelimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicklevelimage);
  int count = params.size();
  if (count <= 4) return (f_magicklevelimage(a0, a1, a2, a3));
  return (f_magicklevelimage(a0, a1, a2, a3, a4));
}
Variant ei_openssl_x509_parse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_parse);
  int count = params.size();
  if (count <= 1) return (f_openssl_x509_parse(a0));
  return (f_openssl_x509_parse(a0, a1));
}
Variant ei_magickcommentimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcommentimage);
  return (f_magickcommentimage(a0, a1));
}
Variant ei_hphp_splfileinfo_islink(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_islink);
  return (f_hphp_splfileinfo_islink(a0));
}
Variant ei_magicksetimagedelay(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagedelay);
  return (f_magicksetimagedelay(a0, a1));
}
Variant ei_magickposterizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickposterizeimage);
  return (f_magickposterizeimage(a0, a1, a2));
}
Variant ei_stream_socket_accept(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_accept);
  int count = params.size();
  if (count <= 1) return (f_stream_socket_accept(a0));
  if (count == 2) return (f_stream_socket_accept(a0, a1));
  return (f_stream_socket_accept(a0, a1, ref(a2)));
}
Variant ei_magickqueryconfigureoption(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickqueryconfigureoption);
  return (f_magickqueryconfigureoption(a0));
}
Variant ei_magickevaluateimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickevaluateimage);
  int count = params.size();
  if (count <= 3) return (f_magickevaluateimage(a0, a1, a2));
  return (f_magickevaluateimage(a0, a1, a2, a3));
}
Variant ei_imagesx(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesx);
  return (f_imagesx(a0));
}
Variant ei_imagesy(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesy);
  return (f_imagesy(a0));
}
Variant ei_mysql_get_client_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_get_client_info);
  return (f_mysql_get_client_info());
}
Variant ei_fb_crossall_query(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_crossall_query);
  int count = params.size();
  if (count <= 1) return (f_fb_crossall_query(a0));
  if (count == 2) return (f_fb_crossall_query(a0, a1));
  if (count == 3) return (f_fb_crossall_query(a0, a1, a2));
  if (count == 4) return (f_fb_crossall_query(a0, a1, a2, a3));
  if (count == 5) return (f_fb_crossall_query(a0, a1, a2, a3, a4));
  return (f_fb_crossall_query(a0, a1, a2, a3, a4, a5));
}
Variant ei_fseek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fseek);
  int count = params.size();
  if (count <= 2) return (f_fseek(a0, a1));
  return (f_fseek(a0, a1, a2));
}
Variant ei_apc_compile_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_compile_file);
  int count = params.size();
  if (count <= 1) return (f_apc_compile_file(a0));
  if (count == 2) return (f_apc_compile_file(a0, a1));
  return (f_apc_compile_file(a0, a1, a2));
}
Variant ei_magicksetpassphrase(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetpassphrase);
  return (f_magicksetpassphrase(a0, a1));
}
Variant ei_mysql_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_info());
  return (f_mysql_info(a0));
}
Variant ei_is_writable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_writable);
  return (f_is_writable(a0));
}
Variant ei_magickrotateimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickrotateimage);
  return (f_magickrotateimage(a0, a1, a2));
}
Variant ei_fgetcsv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fgetcsv);
  int count = params.size();
  if (count <= 1) return (f_fgetcsv(a0));
  if (count == 2) return (f_fgetcsv(a0, a1));
  if (count == 3) return (f_fgetcsv(a0, a1, a2));
  return (f_fgetcsv(a0, a1, a2, a3));
}
Variant ei_oci_fetch_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_fetch_array);
  int count = params.size();
  if (count <= 1) return (f_oci_fetch_array(a0));
  return (f_oci_fetch_array(a0, a1));
}
Variant ei_magickcolorfloodfillimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcolorfloodfillimage);
  return (f_magickcolorfloodfillimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_atanh(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(atanh);
  return (f_atanh(a0));
}
Variant ei_imagecopyresized(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  Variant a9;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a9 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecopyresized);
  return (f_imagecopyresized(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
}
Variant ei_fpassthru(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fpassthru);
  return (f_fpassthru(a0));
}
Variant ei_magickblackthresholdimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickblackthresholdimage);
  return (f_magickblackthresholdimage(a0, a1));
}
Variant ei_mcrypt_encrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_encrypt);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_encrypt(a0, a1, a2, a3));
  return (f_mcrypt_encrypt(a0, a1, a2, a3, a4));
}
Variant ei_magicksetimagegreenprimary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagegreenprimary);
  return (f_magicksetimagegreenprimary(a0, a1, a2));
}
Variant ei_xmlwriter_start_attribute_ns(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_attribute_ns);
  return (f_xmlwriter_start_attribute_ns(a0, a1, a2, a3));
}
Variant ei_magickgetimageinterlacescheme(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageinterlacescheme);
  return (f_magickgetimageinterlacescheme(a0));
}
Variant ei_apache_child_terminate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_child_terminate);
  return (f_apache_child_terminate());
}
Variant ei_array_merge_recursive(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_merge_recursive);
  int count = params.size();
  if (count <= 1) return (f_array_merge_recursive(count, a0));
  return (f_array_merge_recursive(count, a0,vargs));
}
Variant ei_array_uintersect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_uintersect);
  int count = params.size();
  if (count <= 3) return (f_array_uintersect(count, a0, a1, a2));
  return (f_array_uintersect(count, a0, a1, a2,vargs));
}
Variant ei_xml_set_unparsed_entity_decl_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_unparsed_entity_decl_handler);
  return (f_xml_set_unparsed_entity_decl_handler(a0, a1));
}
Variant ei_ob_get_contents(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_get_contents);
  return (f_ob_get_contents());
}
Variant ei_pixelgetcyan(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetcyan);
  return (f_pixelgetcyan(a0));
}
Variant ei_stream_select(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_select);
  int count = params.size();
  if (count <= 4) return (f_stream_select(ref(a0), ref(a1), ref(a2), a3));
  return (f_stream_select(ref(a0), ref(a1), ref(a2), a3, a4));
}
Variant ei_get_resource_type(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_resource_type);
  return (f_get_resource_type(a0));
}
Variant ei_dangling_server_proxy_old_request(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dangling_server_proxy_old_request);
  return (f_dangling_server_proxy_old_request());
}
Variant ei_magickgetimagefilename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagefilename);
  return (f_magickgetimagefilename(a0));
}
Variant ei_exif_tagname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exif_tagname);
  return (f_exif_tagname(a0));
}
Variant ei_drawsetfillalpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfillalpha);
  return (f_drawsetfillalpha(a0, a1), null);
}
Variant ei_mb_convert_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_convert_encoding);
  int count = params.size();
  if (count <= 2) return (f_mb_convert_encoding(a0, a1));
  return (f_mb_convert_encoding(a0, a1, a2));
}
Variant ei_wandgetexceptionstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(wandgetexceptionstring);
  return (f_wandgetexceptionstring(a0));
}
Variant ei_proc_open(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(proc_open);
  int count = params.size();
  if (count <= 3) return (f_proc_open(a0, a1, ref(a2)));
  if (count == 4) return (f_proc_open(a0, a1, ref(a2), a3));
  if (count == 5) return (f_proc_open(a0, a1, ref(a2), a3, a4));
  return (f_proc_open(a0, a1, ref(a2), a3, a4, a5));
}
Variant ei_hphp_splfileobject_fgetss(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fgetss);
  return (f_hphp_splfileobject_fgetss(a0, a1));
}
Variant ei_clearpixeliterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clearpixeliterator);
  return (f_clearpixeliterator(a0), null);
}
Variant ei_socket_server(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_server);
  int count = params.size();
  if (count <= 1) return (f_socket_server(a0));
  if (count == 2) return (f_socket_server(a0, a1));
  if (count == 3) return (f_socket_server(a0, a1, ref(a2)));
  return (f_socket_server(a0, a1, ref(a2), ref(a3)));
}
Variant ei_magickremoveimageprofile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickremoveimageprofile);
  return (f_magickremoveimageprofile(a0, a1));
}
Variant ei_xmlwriter_write_dtd_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_dtd_element);
  return (f_xmlwriter_write_dtd_element(a0, a1, a2));
}
Variant ei_drawpushdefs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpushdefs);
  return (f_drawpushdefs(a0), null);
}
Variant ei_image2wbmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(image2wbmp);
  int count = params.size();
  if (count <= 1) return (f_image2wbmp(a0));
  if (count == 2) return (f_image2wbmp(a0, a1));
  return (f_image2wbmp(a0, a1, a2));
}
Variant ei_join(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(join);
  int count = params.size();
  if (count <= 1) return (f_join(a0));
  return (f_join(a0, a1));
}
Variant ei_magicksetimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimage);
  return (f_magicksetimage(a0, a1));
}
Variant ei_openssl_free_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_free_key);
  return (f_openssl_free_key(a0), null);
}
Variant ei_preg_grep(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_grep);
  int count = params.size();
  if (count <= 2) return (f_preg_grep(a0, a1));
  return (f_preg_grep(a0, a1, a2));
}
Variant ei_is_float(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_float);
  return (f_is_float(a0));
}
Variant ei_stream_socket_pair(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_pair);
  return (f_stream_socket_pair(a0, a1, a2));
}
Variant ei_get_required_files(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_required_files);
  return (f_get_required_files());
}
Variant ei_mysql_fetch_field(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_fetch_field);
  int count = params.size();
  if (count <= 1) return (f_mysql_fetch_field(a0));
  return (f_mysql_fetch_field(a0, a1));
}
Variant ei_chmod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chmod);
  return (f_chmod(a0, a1));
}
Variant ei_magickgettextascent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgettextascent);
  int count = params.size();
  if (count <= 3) return (f_magickgettextascent(a0, a1, a2));
  return (f_magickgettextascent(a0, a1, a2, a3));
}
Variant ei_mb_regex_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_regex_encoding);
  int count = params.size();
  if (count <= 0) return (f_mb_regex_encoding());
  return (f_mb_regex_encoding(a0));
}
Variant ei_mail(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mail);
  int count = params.size();
  if (count <= 3) return (f_mail(a0, a1, a2));
  if (count == 4) return (f_mail(a0, a1, a2, a3));
  return (f_mail(a0, a1, a2, a3, a4));
}
Variant ei_mcrypt_enc_self_test(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_self_test);
  return (f_mcrypt_enc_self_test(a0));
}
Variant ei_ignore_user_abort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ignore_user_abort);
  int count = params.size();
  if (count <= 0) return (f_ignore_user_abort());
  return (f_ignore_user_abort(a0));
}
Variant ei_oci_field_is_null(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_is_null);
  return (f_oci_field_is_null(a0, a1));
}
Variant ei_imagesetthickness(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesetthickness);
  return (f_imagesetthickness(a0, a1));
}
Variant ei_str_pad(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_pad);
  int count = params.size();
  if (count <= 2) return (f_str_pad(a0, a1));
  if (count == 3) return (f_str_pad(a0, a1, a2));
  return (f_str_pad(a0, a1, a2, a3));
}
Variant ei_openssl_pkcs7_decrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs7_decrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_pkcs7_decrypt(a0, a1, a2));
  return (f_openssl_pkcs7_decrypt(a0, a1, a2, a3));
}
Variant ei_pagelet_server_task_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pagelet_server_task_result);
  return (f_pagelet_server_task_result(a0, ref(a1), ref(a2)));
}
Variant ei_asinh(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(asinh);
  return (f_asinh(a0));
}
Variant ei_mailparse_msg_extract_part(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_extract_part);
  int count = params.size();
  if (count <= 2) return (f_mailparse_msg_extract_part(a0, a1), null);
  return (f_mailparse_msg_extract_part(a0, a1, a2), null);
}
Variant ei_magickgetimagecompose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagecompose);
  return (f_magickgetimagecompose(a0));
}
Variant ei_hphp_splfileinfo_getpath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getpath);
  return (f_hphp_splfileinfo_getpath(a0));
}
Variant ei_magickcropimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcropimage);
  return (f_magickcropimage(a0, a1, a2, a3, a4));
}
Variant ei_ob_gzhandler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_gzhandler);
  return (f_ob_gzhandler(a0, a1));
}
Variant ei_drawcomment(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawcomment);
  return (f_drawcomment(a0, a1), null);
}
Variant ei_call_user_method(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(call_user_method);
  int count = params.size();
  if (count <= 2) return (f_call_user_method(count, a0, ref(a1)));
  return (f_call_user_method(count, a0, ref(a1),vargs));
}
Variant ei_mb_split(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_split);
  int count = params.size();
  if (count <= 2) return (f_mb_split(a0, a1));
  return (f_mb_split(a0, a1, a2));
}
Variant ei_imagepolygon(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepolygon);
  return (f_imagepolygon(a0, a1, a2, a3));
}
Variant ei_mysql_field_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_field_name);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_name(a0));
  return (f_mysql_field_name(a0, a1));
}
Variant ei_fputs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fputs);
  int count = params.size();
  if (count <= 2) return (f_fputs(a0, a1));
  return (f_fputs(a0, a1, a2));
}
Variant ei_imagecolorallocatealpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorallocatealpha);
  return (f_imagecolorallocatealpha(a0, a1, a2, a3, a4));
}
Variant ei_substr_count(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(substr_count);
  int count = params.size();
  if (count <= 2) return (f_substr_count(a0, a1));
  if (count == 3) return (f_substr_count(a0, a1, a2));
  return (f_substr_count(a0, a1, a2, a3));
}
Variant ei_ldap_first_reference(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_first_reference);
  return (f_ldap_first_reference(a0, a1));
}
Variant ei_clock_settime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clock_settime);
  return (f_clock_settime(a0, a1, a2));
}
Variant ei_ftruncate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ftruncate);
  return (f_ftruncate(a0, a1));
}
Variant ei_curl_version(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_version);
  int count = params.size();
  if (count <= 0) return (f_curl_version());
  return (f_curl_version(a0));
}
Variant ei_pixelgetbluequantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetbluequantum);
  return (f_pixelgetbluequantum(a0));
}
Variant ei_print(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(print);
  return (f_print(a0));
}
Variant ei_mysql_unbuffered_query(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_unbuffered_query);
  int count = params.size();
  if (count <= 1) return (f_mysql_unbuffered_query(a0));
  return (f_mysql_unbuffered_query(a0, a1));
}
Variant ei_hphp_recursiveiteratoriterator___construct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator___construct);
  return (f_hphp_recursiveiteratoriterator___construct(a0, a1, a2, a3));
}
Variant ei_hash_final(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_final);
  int count = params.size();
  if (count <= 1) return (f_hash_final(a0));
  return (f_hash_final(a0, a1));
}
Variant ei_imagecolorresolve(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorresolve);
  return (f_imagecolorresolve(a0, a1, a2, a3));
}
Variant ei_date_date_set(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_date_set);
  return (f_date_date_set(a0, a1, a2, a3), null);
}
Variant ei_pixelsetyellow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetyellow);
  return (f_pixelsetyellow(a0, a1), null);
}
Variant ei_inet_pton(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(inet_pton);
  return (f_inet_pton(a0));
}
Variant ei_mcrypt_get_key_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_get_key_size);
  return (f_mcrypt_get_key_size(a0, a1));
}
Variant ei_drawsettextalignment(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsettextalignment);
  return (f_drawsettextalignment(a0, a1), null);
}
Variant ei_magickgetimageredprimary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageredprimary);
  return (f_magickgetimageredprimary(a0));
}
Variant ei_addslashes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(addslashes);
  return (f_addslashes(a0));
}
Variant ei_ldap_count_entries(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_count_entries);
  return (f_ldap_count_entries(a0, a1));
}
Variant ei_ereg_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ereg_replace);
  return (f_ereg_replace(a0, a1, a2));
}
Variant ei_hphp_recursivedirectoryiterator_getchildren(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_getchildren);
  return (f_hphp_recursivedirectoryiterator_getchildren(a0));
}
Variant ei_drawrender(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawrender);
  return (f_drawrender(a0));
}
Variant ei_magickgetversionnumber(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetversionnumber);
  return (f_magickgetversionnumber());
}
Variant ei_array_splice(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_splice);
  int count = params.size();
  if (count <= 2) return (f_array_splice(ref(a0), a1));
  if (count == 3) return (f_array_splice(ref(a0), a1, a2));
  return (f_array_splice(ref(a0), a1, a2, a3));
}
Variant ei_oci_new_descriptor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_new_descriptor);
  int count = params.size();
  if (count <= 1) return (f_oci_new_descriptor(a0));
  return (f_oci_new_descriptor(a0, a1));
}
Variant ei_ftell(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ftell);
  return (f_ftell(a0));
}
Variant ei_magicksetimagedepth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagedepth);
  int count = params.size();
  if (count <= 2) return (f_magicksetimagedepth(a0, a1));
  return (f_magicksetimagedepth(a0, a1, a2));
}
Variant ei_apc_load_constants(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_load_constants);
  int count = params.size();
  if (count <= 1) return (f_apc_load_constants(a0));
  if (count == 2) return (f_apc_load_constants(a0, a1));
  return (f_apc_load_constants(a0, a1, a2));
}
Variant ei___halt_compiler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(__halt_compiler);
  return (f___halt_compiler(), null);
}
Variant ei_magicklabelimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicklabelimage);
  return (f_magicklabelimage(a0, a1));
}
Variant ei_hphp_log(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_log);
  return (f_hphp_log(a0, a1));
}
Variant ei_stream_get_contents(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_get_contents);
  int count = params.size();
  if (count <= 1) return (f_stream_get_contents(a0));
  if (count == 2) return (f_stream_get_contents(a0, a1));
  return (f_stream_get_contents(a0, a1, a2));
}
Variant ei_imagecreatefromjpeg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromjpeg);
  return (f_imagecreatefromjpeg(a0));
}
Variant ei_chown(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(chown);
  return (f_chown(a0, a1));
}
Variant ei_hash_hmac_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_hmac_file);
  int count = params.size();
  if (count <= 3) return (f_hash_hmac_file(a0, a1, a2));
  return (f_hash_hmac_file(a0, a1, a2, a3));
}
Variant ei_magickechoimageblob(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickechoimageblob);
  return (f_magickechoimageblob(a0));
}
Variant ei_link(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(link);
  return (f_link(a0, a1));
}
Variant ei_fb_utf8ize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_utf8ize);
  return (f_fb_utf8ize(ref(a0)));
}
Variant ei_drawsetfillpatternurl(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfillpatternurl);
  return (f_drawsetfillpatternurl(a0, a1));
}
Variant ei_iconv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv);
  return (f_iconv(a0, a1, a2));
}
Variant ei_highlight_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(highlight_file);
  int count = params.size();
  if (count <= 1) return (f_highlight_file(a0));
  return (f_highlight_file(a0, a1));
}
Variant ei_iconv_mime_decode_headers(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_mime_decode_headers);
  int count = params.size();
  if (count <= 1) return (f_iconv_mime_decode_headers(a0));
  if (count == 2) return (f_iconv_mime_decode_headers(a0, a1));
  return (f_iconv_mime_decode_headers(a0, a1, a2));
}
Variant ei_ini_get_all(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ini_get_all);
  int count = params.size();
  if (count <= 0) return (f_ini_get_all());
  return (f_ini_get_all(a0));
}
Variant ei_ldap_get_values_len(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_get_values_len);
  return (f_ldap_get_values_len(a0, a1, a2));
}
Variant ei_hphp_splfileinfo_getrealpath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getrealpath);
  return (f_hphp_splfileinfo_getrealpath(a0));
}
Variant ei_openssl_pkcs7_verify(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs7_verify);
  int count = params.size();
  if (count <= 2) return (f_openssl_pkcs7_verify(a0, a1));
  if (count == 3) return (f_openssl_pkcs7_verify(a0, a1, a2));
  if (count == 4) return (f_openssl_pkcs7_verify(a0, a1, a2, a3));
  if (count == 5) return (f_openssl_pkcs7_verify(a0, a1, a2, a3, a4));
  return (f_openssl_pkcs7_verify(a0, a1, a2, a3, a4, a5));
}
Variant ei_hphp_directoryiterator_current(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_current);
  return (f_hphp_directoryiterator_current(a0));
}
Variant ei_hphp_splfileobject_fgetcsv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fgetcsv);
  return (f_hphp_splfileobject_fgetcsv(a0, a1, a2, a3));
}
Variant ei_stream_socket_recvfrom(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_recvfrom);
  int count = params.size();
  if (count <= 2) return (f_stream_socket_recvfrom(a0, a1));
  if (count == 3) return (f_stream_socket_recvfrom(a0, a1, a2));
  return (f_stream_socket_recvfrom(a0, a1, a2, a3));
}
Variant ei_drawgetcliprule(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetcliprule);
  return (f_drawgetcliprule(a0));
}
Variant ei_apc_filehits(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_filehits);
  return (f_apc_filehits());
}
Variant ei_pixelgetexceptionstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetexceptionstring);
  return (f_pixelgetexceptionstring(a0));
}
Variant ei_mcrypt_ofb(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_ofb);
  int count = params.size();
  if (count <= 4) return (f_mcrypt_ofb(a0, a1, a2, a3));
  return (f_mcrypt_ofb(a0, a1, a2, a3, a4));
}
Variant ei_imageantialias(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageantialias);
  return (f_imageantialias(a0, a1));
}
Variant ei_hphp_splfileinfo_openfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_openfile);
  return (f_hphp_splfileinfo_openfile(a0, a1, a2, a3));
}
Variant ei_idn_to_ascii(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(idn_to_ascii);
  int count = params.size();
  if (count <= 1) return (f_idn_to_ascii(a0));
  return (f_idn_to_ascii(a0, ref(a1)));
}
Variant ei_error_log(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(error_log);
  int count = params.size();
  if (count <= 1) return (f_error_log(a0));
  if (count == 2) return (f_error_log(a0, a1));
  if (count == 3) return (f_error_log(a0, a1, a2));
  return (f_error_log(a0, a1, a2, a3));
}
Variant ei_hash_update(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_update);
  return (f_hash_update(a0, a1));
}
Variant ei_ob_flush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_flush);
  return (f_ob_flush(), null);
}
Variant ei_md5_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(md5_file);
  int count = params.size();
  if (count <= 1) return (f_md5_file(a0));
  return (f_md5_file(a0, a1));
}
Variant ei_drawgetexception(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetexception);
  return (f_drawgetexception(a0));
}
Variant ei_file_get_contents(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(file_get_contents);
  int count = params.size();
  if (count <= 1) return (f_file_get_contents(a0));
  if (count == 2) return (f_file_get_contents(a0, a1));
  if (count == 3) return (f_file_get_contents(a0, a1, a2));
  if (count == 4) return (f_file_get_contents(a0, a1, a2, a3));
  return (f_file_get_contents(a0, a1, a2, a3, a4));
}
Variant ei_uniqid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(uniqid);
  int count = params.size();
  if (count <= 0) return (f_uniqid());
  if (count == 1) return (f_uniqid(a0));
  return (f_uniqid(a0, a1));
}
Variant ei_strncasecmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strncasecmp);
  return (f_strncasecmp(a0, a1, a2));
}
Variant ei_magicksetimagepixels(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagepixels);
  return (f_magicksetimagepixels(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_drawgetfillopacity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfillopacity);
  return (f_drawgetfillopacity(a0));
}
Variant ei_xml_parser_create_ns(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parser_create_ns);
  int count = params.size();
  if (count <= 0) return (f_xml_parser_create_ns());
  if (count == 1) return (f_xml_parser_create_ns(a0));
  return (f_xml_parser_create_ns(a0, a1));
}
Variant ei_oci_fetch_assoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_fetch_assoc);
  return (f_oci_fetch_assoc(a0));
}
Variant ei_ldap_delete(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_delete);
  return (f_ldap_delete(a0, a1));
}
Variant ei_fnmatch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fnmatch);
  int count = params.size();
  if (count <= 2) return (f_fnmatch(a0, a1));
  return (f_fnmatch(a0, a1, a2));
}
Variant ei_hphp_splfileobject_eof(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_eof);
  return (f_hphp_splfileobject_eof(a0));
}
Variant ei_metaphone(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(metaphone);
  int count = params.size();
  if (count <= 1) return (f_metaphone(a0));
  return (f_metaphone(a0, a1));
}
Variant ei_mysql_errno(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_errno);
  int count = params.size();
  if (count <= 0) return (f_mysql_errno());
  return (f_mysql_errno(a0));
}
Variant ei_stream_wrapper_unregister(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_wrapper_unregister);
  return (f_stream_wrapper_unregister(a0));
}
Variant ei_magickcyclecolormapimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcyclecolormapimage);
  return (f_magickcyclecolormapimage(a0, a1));
}
Variant ei_hphp_recursiveiteratoriterator_current(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_current);
  return (f_hphp_recursiveiteratoriterator_current(a0));
}
Variant ei_restore_error_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(restore_error_handler);
  return (f_restore_error_handler());
}
Variant ei_hphp_recursivedirectoryiterator___construct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator___construct);
  return (f_hphp_recursivedirectoryiterator___construct(a0, a1, a2));
}
Variant ei_magicksetimagevirtualpixelmethod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagevirtualpixelmethod);
  return (f_magicksetimagevirtualpixelmethod(a0, a1));
}
Variant ei_socket_getpeername(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_getpeername);
  int count = params.size();
  if (count <= 2) return (f_socket_getpeername(a0, ref(a1)));
  return (f_socket_getpeername(a0, ref(a1), ref(a2)));
}
Variant ei_mysql_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_error);
  int count = params.size();
  if (count <= 0) return (f_mysql_error());
  return (f_mysql_error(a0));
}
Variant ei_drawtranslate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawtranslate);
  return (f_drawtranslate(a0, a1, a2), null);
}
Variant ei_mysql_list_dbs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_list_dbs);
  int count = params.size();
  if (count <= 0) return (f_mysql_list_dbs());
  return (f_mysql_list_dbs(a0));
}
Variant ei_imagefilter(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefilter);
  int count = params.size();
  if (count <= 2) return (f_imagefilter(a0, a1));
  if (count == 3) return (f_imagefilter(a0, a1, a2));
  if (count == 4) return (f_imagefilter(a0, a1, a2, a3));
  if (count == 5) return (f_imagefilter(a0, a1, a2, a3, a4));
  return (f_imagefilter(a0, a1, a2, a3, a4, a5));
}
Variant ei_base64_encode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(base64_encode);
  return (f_base64_encode(a0));
}
Variant ei_is_null(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_null);
  return (f_is_null(a0));
}
Variant ei_octdec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(octdec);
  return (f_octdec(a0));
}
Variant ei_oci_fetch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_fetch);
  return (f_oci_fetch(a0));
}
Variant ei_drawsetclippath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetclippath);
  return (f_drawsetclippath(a0, a1));
}
Variant ei_magickconstituteimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickconstituteimage);
  return (f_magickconstituteimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_pcntl_wexitstatus(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wexitstatus);
  return (f_pcntl_wexitstatus(a0));
}
Variant ei_apache_setenv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_setenv);
  int count = params.size();
  if (count <= 2) return (f_apache_setenv(a0, a1));
  return (f_apache_setenv(a0, a1, a2));
}
Variant ei_clonedrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clonedrawingwand);
  return (f_clonedrawingwand(a0));
}
Variant ei_ob_get_clean(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_get_clean);
  return (f_ob_get_clean());
}
Variant ei_expm1(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(expm1);
  return (f_expm1(a0));
}
Variant ei_ldap_first_entry(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_first_entry);
  return (f_ldap_first_entry(a0, a1));
}
Variant ei_curl_multi_select(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_select);
  int count = params.size();
  if (count <= 1) return (f_curl_multi_select(a0));
  return (f_curl_multi_select(a0, a1));
}
Variant ei_magickswirlimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickswirlimage);
  return (f_magickswirlimage(a0, a1));
}
Variant ei_mb_ereg_search_regs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search_regs);
  int count = params.size();
  if (count <= 0) return (f_mb_ereg_search_regs());
  if (count == 1) return (f_mb_ereg_search_regs(a0));
  return (f_mb_ereg_search_regs(a0, a1));
}
Variant ei_ldap_errno(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_errno);
  return (f_ldap_errno(a0));
}
Variant ei_mysql_get_server_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_get_server_info);
  int count = params.size();
  if (count <= 0) return (f_mysql_get_server_info());
  return (f_mysql_get_server_info(a0));
}
Variant ei_mailparse_rfc822_parse_addresses(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_rfc822_parse_addresses);
  return (f_mailparse_rfc822_parse_addresses(a0));
}
Variant ei_magickgetimagemimetype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagemimetype);
  return (f_magickgetimagemimetype(a0));
}
Variant ei_soundex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(soundex);
  return (f_soundex(a0));
}
Variant ei_magickgetimageformat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageformat);
  return (f_magickgetimageformat(a0));
}
Variant ei_mcrypt_module_get_supported_key_sizes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_get_supported_key_sizes);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_get_supported_key_sizes(a0));
  return (f_mcrypt_module_get_supported_key_sizes(a0, a1));
}
Variant ei_preg_replace_callback(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_replace_callback);
  int count = params.size();
  if (count <= 3) return (f_preg_replace_callback(a0, a1, a2));
  if (count == 4) return (f_preg_replace_callback(a0, a1, a2, a3));
  return (f_preg_replace_callback(a0, a1, a2, a3, ref(a4)));
}
Variant ei_ldap_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_error);
  return (f_ldap_error(a0));
}
Variant ei_xmlwriter_full_end_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_full_end_element);
  return (f_xmlwriter_full_end_element(a0));
}
Variant ei_ctype_graph(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_graph);
  return (f_ctype_graph(a0));
}
Variant ei_asort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(asort);
  int count = params.size();
  if (count <= 1) return (f_asort(ref(a0)));
  if (count == 2) return (f_asort(ref(a0), a1));
  return (f_asort(ref(a0), a1, a2));
}
Variant ei_apd_echo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_echo);
  return (f_apd_echo(a0));
}
Variant ei_rewinddir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rewinddir);
  return (f_rewinddir(a0), null);
}
Variant ei_ob_implicit_flush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_implicit_flush);
  int count = params.size();
  if (count <= 0) return (f_ob_implicit_flush(), null);
  return (f_ob_implicit_flush(a0), null);
}
Variant ei_pcntl_signal_dispatch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_signal_dispatch);
  return (f_pcntl_signal_dispatch());
}
Variant ei_pixelgetiteratorexceptionstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetiteratorexceptionstring);
  return (f_pixelgetiteratorexceptionstring(a0));
}
Variant ei_stream_socket_client(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_client);
  int count = params.size();
  if (count <= 1) return (f_stream_socket_client(a0));
  if (count == 2) return (f_stream_socket_client(a0, ref(a1)));
  if (count == 3) return (f_stream_socket_client(a0, ref(a1), ref(a2)));
  if (count == 4) return (f_stream_socket_client(a0, ref(a1), ref(a2), a3));
  if (count == 5) return (f_stream_socket_client(a0, ref(a1), ref(a2), a3, a4));
  return (f_stream_socket_client(a0, ref(a1), ref(a2), a3, a4, a5));
}
Variant ei_drawsetstrokedasharray(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokedasharray);
  int count = params.size();
  if (count <= 1) return (f_drawsetstrokedasharray(a0), null);
  return (f_drawsetstrokedasharray(a0, a1), null);
}
Variant ei_mysql_free_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_free_result);
  return (f_mysql_free_result(a0));
}
Variant ei_is_real(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_real);
  return (f_is_real(a0));
}
Variant ei_mcrypt_enc_is_block_algorithm_mode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_is_block_algorithm_mode);
  return (f_mcrypt_enc_is_block_algorithm_mode(a0));
}
Variant ei_array_slice(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_slice);
  int count = params.size();
  if (count <= 2) return (f_array_slice(a0, a1));
  if (count == 3) return (f_array_slice(a0, a1, a2));
  return (f_array_slice(a0, a1, a2, a3));
}
Variant ei_count_chars(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(count_chars);
  int count = params.size();
  if (count <= 1) return (f_count_chars(a0));
  return (f_count_chars(a0, a1));
}
Variant ei_hphp_splfileobject_getmaxlinelen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_getmaxlinelen);
  return (f_hphp_splfileobject_getmaxlinelen(a0));
}
Variant ei_array_uintersect_uassoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_uintersect_uassoc);
  int count = params.size();
  if (count <= 4) return (f_array_uintersect_uassoc(count, a0, a1, a2, a3));
  return (f_array_uintersect_uassoc(count, a0, a1, a2, a3,vargs));
}
Variant ei_oci_free_statement(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_free_statement);
  return (f_oci_free_statement(a0));
}
Variant ei_drawsetstrokewidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokewidth);
  return (f_drawsetstrokewidth(a0, a1), null);
}
Variant ei_posix_mkfifo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_mkfifo);
  return (f_posix_mkfifo(a0, a1));
}
Variant ei_array_count_values(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_count_values);
  return (f_array_count_values(a0));
}
Variant ei_pixelgetexception(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetexception);
  return (f_pixelgetexception(a0));
}
Variant ei_mkdir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mkdir);
  int count = params.size();
  if (count <= 1) return (f_mkdir(a0));
  if (count == 2) return (f_mkdir(a0, a1));
  if (count == 3) return (f_mkdir(a0, a1, a2));
  return (f_mkdir(a0, a1, a2, a3));
}
Variant ei_magicksetsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetsize);
  return (f_magicksetsize(a0, a1, a2));
}
Variant ei_debug_zval_dump(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(debug_zval_dump);
  return (f_debug_zval_dump(a0), null);
}
Variant ei_iconv_substr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_substr);
  int count = params.size();
  if (count <= 2) return (f_iconv_substr(a0, a1));
  if (count == 3) return (f_iconv_substr(a0, a1, a2));
  return (f_iconv_substr(a0, a1, a2, a3));
}
Variant ei_xml_set_external_entity_ref_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_external_entity_ref_handler);
  return (f_xml_set_external_entity_ref_handler(a0, a1));
}
Variant ei_mb_decode_numericentity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_decode_numericentity);
  int count = params.size();
  if (count <= 2) return (f_mb_decode_numericentity(a0, a1));
  return (f_mb_decode_numericentity(a0, a1, a2));
}
Variant ei_ldap_next_attribute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_next_attribute);
  return (f_ldap_next_attribute(a0, a1));
}
Variant ei_hphp_splfileobject_fflush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fflush);
  return (f_hphp_splfileobject_fflush(a0));
}
Variant ei_imagejpeg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagejpeg);
  int count = params.size();
  if (count <= 1) return (f_imagejpeg(a0));
  if (count == 2) return (f_imagejpeg(a0, a1));
  return (f_imagejpeg(a0, a1, a2));
}
Variant ei_imagesetbrush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesetbrush);
  return (f_imagesetbrush(a0, a1));
}
Variant ei_mb_strtoupper(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strtoupper);
  int count = params.size();
  if (count <= 1) return (f_mb_strtoupper(a0));
  return (f_mb_strtoupper(a0, a1));
}
Variant ei_usleep(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(usleep);
  return (f_usleep(a0), null);
}
Variant ei_mb_strrpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strrpos);
  int count = params.size();
  if (count <= 2) return (f_mb_strrpos(a0, a1));
  if (count == 3) return (f_mb_strrpos(a0, a1, a2));
  return (f_mb_strrpos(a0, a1, a2, a3));
}
Variant ei_extract(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(extract);
  int count = params.size();
  if (count <= 1) return (f_extract(a0));
  if (count == 2) return (f_extract(a0, a1));
  return (f_extract(a0, a1, a2));
}
Variant ei_get_browser(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_browser);
  int count = params.size();
  if (count <= 0) return (f_get_browser());
  if (count == 1) return (f_get_browser(a0));
  return (f_get_browser(a0, a1));
}
Variant ei_html_entity_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(html_entity_decode);
  int count = params.size();
  if (count <= 1) return (f_html_entity_decode(a0));
  if (count == 2) return (f_html_entity_decode(a0, a1));
  return (f_html_entity_decode(a0, a1, a2));
}
Variant ei_preg_split(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_split);
  int count = params.size();
  if (count <= 2) return (f_preg_split(a0, a1));
  if (count == 3) return (f_preg_split(a0, a1, a2));
  return (f_preg_split(a0, a1, a2, a3));
}
Variant ei_magickpreviewimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickpreviewimages);
  return (f_magickpreviewimages(a0, a1));
}
Variant ei_zend_logo_guid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(zend_logo_guid);
  return (f_zend_logo_guid());
}
Variant ei_magickgetimagesize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagesize);
  return (f_magickgetimagesize(a0));
}
Variant ei_apd_set_browser_trace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_set_browser_trace);
  return (f_apd_set_browser_trace(), null);
}
Variant ei_xhprof_sample_enable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xhprof_sample_enable);
  return (f_xhprof_sample_enable(), null);
}
Variant ei_hphp_splfileobject_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_key);
  return (f_hphp_splfileobject_key(a0));
}
Variant ei_mb_http_input(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_http_input);
  int count = params.size();
  if (count <= 0) return (f_mb_http_input());
  return (f_mb_http_input(a0));
}
Variant ei_gzinflate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzinflate);
  int count = params.size();
  if (count <= 1) return (f_gzinflate(a0));
  return (f_gzinflate(a0, a1));
}
Variant ei_openssl_pkcs7_sign(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs7_sign);
  int count = params.size();
  if (count <= 5) return (f_openssl_pkcs7_sign(a0, a1, a2, a3, a4));
  if (count == 6) return (f_openssl_pkcs7_sign(a0, a1, a2, a3, a4, a5));
  return (f_openssl_pkcs7_sign(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_assert(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(assert);
  return (f_assert(a0));
}
Variant ei_stream_get_wrappers(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_get_wrappers);
  return (f_stream_get_wrappers());
}
Variant ei_gzfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzfile);
  int count = params.size();
  if (count <= 1) return (f_gzfile(a0));
  return (f_gzfile(a0, a1));
}
Variant ei_oci_field_precision(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_precision);
  return (f_oci_field_precision(a0, a1));
}
Variant ei_stream_socket_sendto(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_sendto);
  int count = params.size();
  if (count <= 2) return (f_stream_socket_sendto(a0, a1));
  if (count == 3) return (f_stream_socket_sendto(a0, a1, a2));
  return (f_stream_socket_sendto(a0, a1, a2, a3));
}
Variant ei_gzpassthru(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzpassthru);
  return (f_gzpassthru(a0));
}
Variant ei_stream_bucket_make_writeable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_bucket_make_writeable);
  return (f_stream_bucket_make_writeable(a0));
}
Variant ei_posix_setegid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_setegid);
  return (f_posix_setegid(a0));
}
Variant ei_drawgetexceptionstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetexceptionstring);
  return (f_drawgetexceptionstring(a0));
}
Variant ei_hash_algos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_algos);
  return (f_hash_algos());
}
Variant ei_drawsetstrokeantialias(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokeantialias);
  int count = params.size();
  if (count <= 1) return (f_drawsetstrokeantialias(a0), null);
  return (f_drawsetstrokeantialias(a0, a1), null);
}
Variant ei_destroypixelwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(destroypixelwand);
  return (f_destroypixelwand(a0), null);
}
Variant ei_fstat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fstat);
  return (f_fstat(a0));
}
Variant ei_magicksetimageresolution(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageresolution);
  return (f_magicksetimageresolution(a0, a1, a2));
}
Variant ei_mysql_db_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_db_name);
  int count = params.size();
  if (count <= 2) return (f_mysql_db_name(a0, a1));
  return (f_mysql_db_name(a0, a1, a2));
}
Variant ei_is_finite(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_finite);
  return (f_is_finite(a0));
}
Variant ei_pixelgetyellowquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetyellowquantum);
  return (f_pixelgetyellowquantum(a0));
}
Variant ei_ksort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ksort);
  int count = params.size();
  if (count <= 1) return (f_ksort(ref(a0)));
  return (f_ksort(ref(a0), a1));
}
Variant ei_thrift_protocol_read_binary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(thrift_protocol_read_binary);
  return (f_thrift_protocol_read_binary(a0, a1, a2));
}
Variant ei_get_included_files(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_included_files);
  return (f_get_included_files());
}
Variant ei_strip_tags(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strip_tags);
  int count = params.size();
  if (count <= 1) return (f_strip_tags(a0));
  return (f_strip_tags(a0, a1));
}
Variant ei_mb_ereg_search_getpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search_getpos);
  return (f_mb_ereg_search_getpos());
}
Variant ei_pixelgetcyanquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetcyanquantum);
  return (f_pixelgetcyanquantum(a0));
}
Variant ei_oci_define_by_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_define_by_name);
  int count = params.size();
  if (count <= 3) return (f_oci_define_by_name(a0, a1, ref(a2)));
  return (f_oci_define_by_name(a0, a1, ref(a2), a3));
}
Variant ei_magickgetexception(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetexception);
  return (f_magickgetexception(a0));
}
Variant ei_ctype_punct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_punct);
  return (f_ctype_punct(a0));
}
Variant ei_next(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(next);
  return (f_next(ref(a0)));
}
Variant ei_shm_detach(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shm_detach);
  return (f_shm_detach(a0));
}
Variant ei_shm_attach(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shm_attach);
  int count = params.size();
  if (count <= 1) return (f_shm_attach(a0));
  if (count == 2) return (f_shm_attach(a0, a1));
  return (f_shm_attach(a0, a1, a2));
}
Variant ei_magickflattenimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickflattenimages);
  return (f_magickflattenimages(a0));
}
Variant ei_similar_text(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(similar_text);
  int count = params.size();
  if (count <= 2) return (f_similar_text(a0, a1));
  return (f_similar_text(a0, a1, ref(a2)));
}
Variant ei_imagecreatefromgd2part(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromgd2part);
  return (f_imagecreatefromgd2part(a0, a1, a2, a3, a4));
}
Variant ei_iconv_get_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_get_encoding);
  int count = params.size();
  if (count <= 0) return (f_iconv_get_encoding());
  return (f_iconv_get_encoding(a0));
}
Variant ei_getmyinode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getmyinode);
  return (f_getmyinode());
}
Variant ei_gzgetc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzgetc);
  return (f_gzgetc(a0));
}
Variant ei_hphp_set_static_property(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_set_static_property);
  return (f_hphp_set_static_property(a0, a1, a2), null);
}
Variant ei_unlink(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(unlink);
  int count = params.size();
  if (count <= 1) return (f_unlink(a0));
  return (f_unlink(a0, a1));
}
Variant ei_mcrypt_module_open(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_open);
  return (f_mcrypt_module_open(a0, a1, a2, a3));
}
Variant ei_token_get_all(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(token_get_all);
  return (f_token_get_all(a0));
}
Variant ei_base_convert(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(base_convert);
  return (f_base_convert(a0, a1, a2));
}
Variant ei_gethostbynamel(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gethostbynamel);
  return (f_gethostbynamel(a0));
}
Variant ei_var_dump(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(var_dump);
  int count = params.size();
  if (count <= 1) return (f_var_dump(count, a0), null);
  return (f_var_dump(count, a0,vargs), null);
}
Variant ei_xmlwriter_start_attribute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_attribute);
  return (f_xmlwriter_start_attribute(a0, a1));
}
Variant ei_pack(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(pack);
  int count = params.size();
  if (count <= 1) return (f_pack(count, a0));
  return (f_pack(count, a0,vargs));
}
Variant ei_gzgets(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzgets);
  int count = params.size();
  if (count <= 1) return (f_gzgets(a0));
  return (f_gzgets(a0, a1));
}
Variant ei_apache_get_version(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_get_version);
  return (f_apache_get_version());
}
Variant ei_array_intersect_uassoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_intersect_uassoc);
  int count = params.size();
  if (count <= 3) return (f_array_intersect_uassoc(count, a0, a1, a2));
  return (f_array_intersect_uassoc(count, a0, a1, a2,vargs));
}
Variant ei_basename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(basename);
  int count = params.size();
  if (count <= 1) return (f_basename(a0));
  return (f_basename(a0, a1));
}
Variant ei_krsort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(krsort);
  int count = params.size();
  if (count <= 1) return (f_krsort(ref(a0)));
  return (f_krsort(ref(a0), a1));
}
Variant ei_clock_gettime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clock_gettime);
  return (f_clock_gettime(a0, ref(a1), ref(a2)));
}
Variant ei_pushdrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pushdrawingwand);
  return (f_pushdrawingwand(a0), null);
}
Variant ei_imageline(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageline);
  return (f_imageline(a0, a1, a2, a3, a4, a5));
}
Variant ei_socket_read(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_read);
  int count = params.size();
  if (count <= 2) return (f_socket_read(a0, a1));
  return (f_socket_read(a0, a1, a2));
}
Variant ei_xmlwriter_write_dtd_entity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_dtd_entity);
  int count = params.size();
  if (count <= 3) return (f_xmlwriter_write_dtd_entity(a0, a1, a2));
  if (count == 4) return (f_xmlwriter_write_dtd_entity(a0, a1, a2, a3));
  if (count == 5) return (f_xmlwriter_write_dtd_entity(a0, a1, a2, a3, a4));
  if (count == 6) return (f_xmlwriter_write_dtd_entity(a0, a1, a2, a3, a4, a5));
  return (f_xmlwriter_write_dtd_entity(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_mysql_tablename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_tablename);
  return (f_mysql_tablename(a0, a1));
}
Variant ei_magickwriteimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickwriteimage);
  return (f_magickwriteimage(a0, a1));
}
Variant ei_mcrypt_module_get_algo_key_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_get_algo_key_size);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_get_algo_key_size(a0));
  return (f_mcrypt_module_get_algo_key_size(a0, a1));
}
Variant ei_hash_update_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hash_update_file);
  int count = params.size();
  if (count <= 2) return (f_hash_update_file(a0, a1));
  return (f_hash_update_file(a0, a1, a2));
}
Variant ei_magickembossimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickembossimage);
  return (f_magickembossimage(a0, a1, a2));
}
Variant ei_gzencode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzencode);
  int count = params.size();
  if (count <= 1) return (f_gzencode(a0));
  if (count == 2) return (f_gzencode(a0, a1));
  return (f_gzencode(a0, a1, a2));
}
Variant ei_checkdate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(checkdate);
  return (f_checkdate(a0, a1, a2));
}
Variant ei_magickimplodeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickimplodeimage);
  return (f_magickimplodeimage(a0, a1));
}
Variant ei_magickgetimageindex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageindex);
  return (f_magickgetimageindex(a0));
}
Variant ei_ctype_lower(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_lower);
  return (f_ctype_lower(a0));
}
Variant ei_imagepsloadfont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepsloadfont);
  return (f_imagepsloadfont(a0));
}
Variant ei_iconv_mime_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_mime_decode);
  int count = params.size();
  if (count <= 1) return (f_iconv_mime_decode(a0));
  if (count == 2) return (f_iconv_mime_decode(a0, a1));
  return (f_iconv_mime_decode(a0, a1, a2));
}
Variant ei_hphp_recursiveiteratoriterator_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_key);
  return (f_hphp_recursiveiteratoriterator_key(a0));
}
Variant ei_mcrypt_module_is_block_algorithm(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_is_block_algorithm);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_is_block_algorithm(a0));
  return (f_mcrypt_module_is_block_algorithm(a0, a1));
}
Variant ei_wandgetexception(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(wandgetexception);
  return (f_wandgetexception(a0));
}
Variant ei_fsockopen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fsockopen);
  int count = params.size();
  if (count <= 1) return (f_fsockopen(a0));
  if (count == 2) return (f_fsockopen(a0, a1));
  if (count == 3) return (f_fsockopen(a0, a1, ref(a2)));
  if (count == 4) return (f_fsockopen(a0, a1, ref(a2), ref(a3)));
  return (f_fsockopen(a0, a1, ref(a2), ref(a3), a4));
}
Variant ei_usort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(usort);
  return (f_usort(ref(a0), a1));
}
Variant ei_pixelsetiteratorrow(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetiteratorrow);
  return (f_pixelsetiteratorrow(a0, a1));
}
Variant ei_hphp_splfileinfo_iswritable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_iswritable);
  return (f_hphp_splfileinfo_iswritable(a0));
}
Variant ei_ldap_get_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_get_option);
  return (f_ldap_get_option(a0, a1, ref(a2)));
}
Variant ei_socket_recv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_recv);
  return (f_socket_recv(a0, ref(a1), a2, a3));
}
Variant ei_sys_getloadavg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sys_getloadavg);
  return (f_sys_getloadavg());
}
Variant ei_evhttp_async_post(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(evhttp_async_post);
  int count = params.size();
  if (count <= 2) return (f_evhttp_async_post(a0, a1));
  if (count == 3) return (f_evhttp_async_post(a0, a1, a2));
  return (f_evhttp_async_post(a0, a1, a2, a3));
}
Variant ei_hphp_recursivedirectoryiterator_seek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_seek);
  return (f_hphp_recursivedirectoryiterator_seek(a0, a1), null);
}
Variant ei_array_values(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_values);
  return (f_array_values(a0));
}
Variant ei_ctype_digit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_digit);
  return (f_ctype_digit(a0));
}
Variant ei_ob_get_length(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_get_length);
  return (f_ob_get_length());
}
Variant ei_magicksolarizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksolarizeimage);
  return (f_magicksolarizeimage(a0, a1));
}
Variant ei_ob_list_handlers(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_list_handlers);
  return (f_ob_list_handlers());
}
Variant ei_array_uintersect_assoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_uintersect_assoc);
  int count = params.size();
  if (count <= 3) return (f_array_uintersect_assoc(count, a0, a1, a2));
  return (f_array_uintersect_assoc(count, a0, a1, a2,vargs));
}
Variant ei_openssl_x509_read(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_read);
  return (f_openssl_x509_read(a0));
}
Variant ei_magickgetimagecolormapcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagecolormapcolor);
  return (f_magickgetimagecolormapcolor(a0, a1));
}
Variant ei_hphp_splfileobject_getcvscontrol(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_getcvscontrol);
  return (f_hphp_splfileobject_getcvscontrol(a0));
}
Variant ei_settype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(settype);
  return (f_settype(ref(a0), a1));
}
Variant ei_posix_access(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_access);
  int count = params.size();
  if (count <= 1) return (f_posix_access(a0));
  return (f_posix_access(a0, a1));
}
Variant ei_explode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(explode);
  int count = params.size();
  if (count <= 2) return (f_explode(a0, a1));
  return (f_explode(a0, a1, a2));
}
Variant ei_fb_load_local_databases(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_load_local_databases);
  return (f_fb_load_local_databases(a0), null);
}
Variant ei_imagecreatefromgd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromgd);
  return (f_imagecreatefromgd(a0));
}
Variant ei_proc_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(proc_close);
  return (f_proc_close(a0));
}
Variant ei_magickgaussianblurimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgaussianblurimage);
  int count = params.size();
  if (count <= 3) return (f_magickgaussianblurimage(a0, a1, a2));
  return (f_magickgaussianblurimage(a0, a1, a2, a3));
}
Variant ei_apd_set_session_trace_socket(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_set_session_trace_socket);
  return (f_apd_set_session_trace_socket(a0, a1, a2, a3));
}
Variant ei_openssl_pkcs12_export_to_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs12_export_to_file);
  int count = params.size();
  if (count <= 4) return (f_openssl_pkcs12_export_to_file(a0, a1, a2, a3));
  return (f_openssl_pkcs12_export_to_file(a0, a1, a2, a3, a4));
}
Variant ei_mailparse_msg_free(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_free);
  return (f_mailparse_msg_free(a0));
}
Variant ei_openssl_private_decrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_private_decrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_private_decrypt(a0, ref(a1), a2));
  return (f_openssl_private_decrypt(a0, ref(a1), a2, a3));
}
Variant ei_hphp_get_extension_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_get_extension_info);
  return (f_hphp_get_extension_info(a0));
}
Variant ei_output_add_rewrite_var(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(output_add_rewrite_var);
  return (f_output_add_rewrite_var(a0, a1));
}
Variant ei_xmlwriter_write_cdata(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_cdata);
  return (f_xmlwriter_write_cdata(a0, a1));
}
Variant ei_mb_list_mime_names(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_list_mime_names);
  int count = params.size();
  if (count <= 0) return (f_mb_list_mime_names());
  return (f_mb_list_mime_names(a0));
}
Variant ei_ispixelwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ispixelwand);
  return (f_ispixelwand(a0));
}
Variant ei_xmlwriter_end_dtd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_dtd);
  return (f_xmlwriter_end_dtd(a0));
}
Variant ei_curl_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_close);
  return (f_curl_close(a0), null);
}
Variant ei_array_udiff(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_udiff);
  int count = params.size();
  if (count <= 3) return (f_array_udiff(count, a0, a1, a2));
  return (f_array_udiff(count, a0, a1, a2,vargs));
}
Variant ei_stream_context_create(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_context_create);
  int count = params.size();
  if (count <= 0) return (f_stream_context_create());
  if (count == 1) return (f_stream_context_create(a0));
  return (f_stream_context_create(a0, a1));
}
Variant ei_drawgetstrokedashoffset(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokedashoffset);
  return (f_drawgetstrokedashoffset(a0));
}
Variant ei_openssl_pkey_get_public(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_get_public);
  return (f_openssl_pkey_get_public(a0));
}
Variant ei_interface_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(interface_exists);
  int count = params.size();
  if (count <= 1) return (f_interface_exists(a0));
  return (f_interface_exists(a0, a1));
}
Variant ei_hphp_directoryiterator___construct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator___construct);
  return (f_hphp_directoryiterator___construct(a0, a1));
}
Variant ei_drawpathmovetorelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathmovetorelative);
  return (f_drawpathmovetorelative(a0, a1, a2), null);
}
Variant ei_apache_get_config(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_get_config);
  return (f_apache_get_config());
}
Variant ei_curl_copy_handle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_copy_handle);
  return (f_curl_copy_handle(a0));
}
Variant ei_drawgetvectorgraphics(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetvectorgraphics);
  return (f_drawgetvectorgraphics(a0));
}
Variant ei_drawpathfinish(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathfinish);
  return (f_drawpathfinish(a0), null);
}
Variant ei_png2wbmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(png2wbmp);
  return (f_png2wbmp(a0, a1, a2, a3, a4));
}
Variant ei_drawmatte(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawmatte);
  return (f_drawmatte(a0, a1, a2, a3), null);
}
Variant ei_imagecolormatch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolormatch);
  return (f_imagecolormatch(a0, a1));
}
Variant ei_drawrectangle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawrectangle);
  return (f_drawrectangle(a0, a1, a2, a3, a4), null);
}
Variant ei_fb_parallel_query(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_parallel_query);
  int count = params.size();
  if (count <= 1) return (f_fb_parallel_query(a0));
  if (count == 2) return (f_fb_parallel_query(a0, a1));
  if (count == 3) return (f_fb_parallel_query(a0, a1, a2));
  if (count == 4) return (f_fb_parallel_query(a0, a1, a2, a3));
  if (count == 5) return (f_fb_parallel_query(a0, a1, a2, a3, a4));
  if (count == 6) return (f_fb_parallel_query(a0, a1, a2, a3, a4, a5));
  return (f_fb_parallel_query(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_mcrypt_enc_get_block_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_get_block_size);
  return (f_mcrypt_enc_get_block_size(a0));
}
Variant ei_stream_context_set_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_context_set_option);
  int count = params.size();
  if (count <= 2) return (f_stream_context_set_option(a0, a1));
  if (count == 3) return (f_stream_context_set_option(a0, a1, a2));
  return (f_stream_context_set_option(a0, a1, a2, a3));
}
Variant ei_drawpathcurvetorelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetorelative);
  return (f_drawpathcurvetorelative(a0, a1, a2, a3, a4, a5, a6), null);
}
Variant ei_phpcredits(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(phpcredits);
  int count = params.size();
  if (count <= 0) return (f_phpcredits());
  return (f_phpcredits(a0));
}
Variant ei_drawgetfillrule(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfillrule);
  return (f_drawgetfillrule(a0));
}
Variant ei_xmlwriter_end_cdata(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_cdata);
  return (f_xmlwriter_end_cdata(a0));
}
Variant ei_magickgetversionstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetversionstring);
  return (f_magickgetversionstring());
}
Variant ei_pcntl_fork(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_fork);
  return (f_pcntl_fork());
}
Variant ei_doubleval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(doubleval);
  return (f_doubleval(a0));
}
Variant ei_assert_options(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(assert_options);
  int count = params.size();
  if (count <= 1) return (f_assert_options(a0));
  return (f_assert_options(a0, a1));
}
Variant ei_magickhasnextimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickhasnextimage);
  return (f_magickhasnextimage(a0));
}
Variant ei_rmdir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rmdir);
  int count = params.size();
  if (count <= 1) return (f_rmdir(a0));
  return (f_rmdir(a0, a1));
}
Variant ei_drawgetstrokelinecap(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokelinecap);
  return (f_drawgetstrokelinecap(a0));
}
Variant ei_oci_statement_type(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_statement_type);
  return (f_oci_statement_type(a0));
}
Variant ei_magickscaleimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickscaleimage);
  return (f_magickscaleimage(a0, a1, a2));
}
Variant ei_pixelgetblackquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetblackquantum);
  return (f_pixelgetblackquantum(a0));
}
Variant ei_magicknewimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicknewimage);
  int count = params.size();
  if (count <= 3) return (f_magicknewimage(a0, a1, a2));
  return (f_magicknewimage(a0, a1, a2, a3));
}
Variant ei_destroypixelwands(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(destroypixelwands);
  return (f_destroypixelwands(a0), null);
}
Variant ei_shm_remove(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shm_remove);
  return (f_shm_remove(a0));
}
Variant ei_hphp_splfileobject_setflags(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_setflags);
  return (f_hphp_splfileobject_setflags(a0, a1), null);
}
Variant ei_date_sun_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_sun_info);
  return (f_date_sun_info(a0, a1, a2));
}
Variant ei_hphp_directoryiterator_valid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_valid);
  return (f_hphp_directoryiterator_valid(a0));
}
Variant ei_magickresizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickresizeimage);
  return (f_magickresizeimage(a0, a1, a2, a3, a4));
}
Variant ei_parse_ini_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(parse_ini_file);
  int count = params.size();
  if (count <= 1) return (f_parse_ini_file(a0));
  return (f_parse_ini_file(a0, a1));
}
Variant ei_stream_get_meta_data(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_get_meta_data);
  return (f_stream_get_meta_data(a0));
}
Variant ei_imagepsencodefont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepsencodefont);
  return (f_imagepsencodefont(a0, a1));
}
Variant ei_ldap_set_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_set_option);
  return (f_ldap_set_option(a0, a1, a2));
}
Variant ei_magickgetsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetsize);
  return (f_magickgetsize(a0));
}
Variant ei_memory_get_peak_usage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(memory_get_peak_usage);
  int count = params.size();
  if (count <= 0) return (f_memory_get_peak_usage());
  return (f_memory_get_peak_usage(a0));
}
Variant ei_pcntl_exec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_exec);
  int count = params.size();
  if (count <= 1) return (f_pcntl_exec(a0), null);
  if (count == 2) return (f_pcntl_exec(a0, a1), null);
  return (f_pcntl_exec(a0, a1, a2), null);
}
Variant ei_xmlwriter_set_indent_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_set_indent_string);
  return (f_xmlwriter_set_indent_string(a0, a1));
}
Variant ei_php_strip_whitespace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(php_strip_whitespace);
  return (f_php_strip_whitespace(a0));
}
Variant ei_strcoll(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strcoll);
  return (f_strcoll(a0, a1));
}
Variant ei_socket_send(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_send);
  return (f_socket_send(a0, a1, a2, a3));
}
Variant ei_zlib_get_coding_type(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(zlib_get_coding_type);
  return (f_zlib_get_coding_type());
}
Variant ei_hphp_splfileobject_fscanf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fscanf);
  return (f_hphp_splfileobject_fscanf(a0, a1, a2, a3));
}
Variant ei_mb_ereg_search_getregs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search_getregs);
  return (f_mb_ereg_search_getregs());
}
Variant ei_mb_eregi(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_eregi);
  int count = params.size();
  if (count <= 2) return (f_mb_eregi(a0, a1));
  return (f_mb_eregi(a0, a1, ref(a2)));
}
Variant ei_pixelgetgreen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetgreen);
  return (f_pixelgetgreen(a0));
}
Variant ei_mysql_client_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_client_encoding);
  int count = params.size();
  if (count <= 0) return (f_mysql_client_encoding());
  return (f_mysql_client_encoding(a0));
}
Variant ei_zend_thread_id(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(zend_thread_id);
  return (f_zend_thread_id());
}
Variant ei_ldap_mod_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_mod_replace);
  return (f_ldap_mod_replace(a0, a1, a2));
}
Variant ei_stream_filter_prepend(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_filter_prepend);
  int count = params.size();
  if (count <= 2) return (f_stream_filter_prepend(a0, a1));
  if (count == 3) return (f_stream_filter_prepend(a0, a1, a2));
  return (f_stream_filter_prepend(a0, a1, a2, a3));
}
Variant ei_substr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(substr);
  int count = params.size();
  if (count <= 2) return (f_substr(a0, a1));
  return (f_substr(a0, a1, a2));
}
Variant ei_magickcombineimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcombineimages);
  return (f_magickcombineimages(a0, a1));
}
Variant ei_pixelgetexceptiontype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetexceptiontype);
  return (f_pixelgetexceptiontype(a0));
}
Variant ei_unpack(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(unpack);
  return (f_unpack(a0, a1));
}
Variant ei_hphp_splfileinfo_isdir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_isdir);
  return (f_hphp_splfileinfo_isdir(a0));
}
Variant ei_magickgetimagepixels(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagepixels);
  return (f_magickgetimagepixels(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_array_product(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_product);
  return (f_array_product(a0));
}
Variant ei_substr_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(substr_replace);
  int count = params.size();
  if (count <= 3) return (f_substr_replace(a0, a1, a2));
  return (f_substr_replace(a0, a1, a2, a3));
}
Variant ei_oci_bind_array_by_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_bind_array_by_name);
  int count = params.size();
  if (count <= 4) return (f_oci_bind_array_by_name(a0, a1, ref(a2), a3));
  if (count == 5) return (f_oci_bind_array_by_name(a0, a1, ref(a2), a3, a4));
  return (f_oci_bind_array_by_name(a0, a1, ref(a2), a3, a4, a5));
}
Variant ei_xmlwriter_write_dtd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_dtd);
  int count = params.size();
  if (count <= 2) return (f_xmlwriter_write_dtd(a0, a1));
  if (count == 3) return (f_xmlwriter_write_dtd(a0, a1, a2));
  if (count == 4) return (f_xmlwriter_write_dtd(a0, a1, a2, a3));
  return (f_xmlwriter_write_dtd(a0, a1, a2, a3, a4));
}
Variant ei_mysql_select_db(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_select_db);
  int count = params.size();
  if (count <= 1) return (f_mysql_select_db(a0));
  return (f_mysql_select_db(a0, a1));
}
Variant ei_use_soap_error_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(use_soap_error_handler);
  int count = params.size();
  if (count <= 0) return (f_use_soap_error_handler());
  return (f_use_soap_error_handler(a0));
}
Variant ei_debug_backtrace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(debug_backtrace);
  return (f_debug_backtrace());
}
Variant ei_drawpathcurvetosmoothrelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetosmoothrelative);
  return (f_drawpathcurvetosmoothrelative(a0, a1, a2, a3, a4), null);
}
Variant ei_mailparse_determine_best_xfer_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_determine_best_xfer_encoding);
  return (f_mailparse_determine_best_xfer_encoding(a0));
}
Variant ei_imagettfbbox(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagettfbbox);
  return (f_imagettfbbox(a0, a1, a2, a3));
}
Variant ei_mb_internal_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_internal_encoding);
  int count = params.size();
  if (count <= 0) return (f_mb_internal_encoding());
  return (f_mb_internal_encoding(a0));
}
Variant ei_msg_get_queue(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(msg_get_queue);
  int count = params.size();
  if (count <= 1) return (f_msg_get_queue(a0));
  return (f_msg_get_queue(a0, a1));
}
Variant ei_posix_getegid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getegid);
  return (f_posix_getegid());
}
Variant ei_magickmedianfilterimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmedianfilterimage);
  return (f_magickmedianfilterimage(a0, a1));
}
Variant ei_xbox_task_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xbox_task_result);
  return (f_xbox_task_result(a0, a1, ref(a2)));
}
Variant ei_mcrypt_generic_deinit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_generic_deinit);
  return (f_mcrypt_generic_deinit(a0));
}
Variant ei_method_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(method_exists);
  return (f_method_exists(a0, a1));
}
Variant ei_money_format(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(money_format);
  return (f_money_format(a0, a1));
}
Variant ei_clearmagickwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clearmagickwand);
  return (f_clearmagickwand(a0), null);
}
Variant ei_array_udiff_assoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_udiff_assoc);
  int count = params.size();
  if (count <= 3) return (f_array_udiff_assoc(count, a0, a1, a2));
  return (f_array_udiff_assoc(count, a0, a1, a2,vargs));
}
Variant ei_xml_parser_free(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parser_free);
  return (f_xml_parser_free(a0));
}
Variant ei_is_resource(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_resource);
  return (f_is_resource(a0));
}
Variant ei_hphp_splfileinfo_getsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getsize);
  return (f_hphp_splfileinfo_getsize(a0));
}
Variant ei_posix_seteuid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_seteuid);
  return (f_posix_seteuid(a0));
}
Variant ei_magicksetinterlacescheme(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetinterlacescheme);
  return (f_magicksetinterlacescheme(a0, a1));
}
Variant ei_str_shuffle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_shuffle);
  return (f_str_shuffle(a0));
}
Variant ei_mcrypt_enc_is_block_algorithm(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_is_block_algorithm);
  return (f_mcrypt_enc_is_block_algorithm(a0));
}
Variant ei_magickgetcopyright(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetcopyright);
  return (f_magickgetcopyright());
}
Variant ei_magickstripimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickstripimage);
  return (f_magickstripimage(a0));
}
Variant ei_base64_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(base64_decode);
  int count = params.size();
  if (count <= 1) return (f_base64_decode(a0));
  return (f_base64_decode(a0, a1));
}
Variant ei_rand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rand);
  int count = params.size();
  if (count <= 0) return (f_rand());
  if (count == 1) return (f_rand(a0));
  return (f_rand(a0, a1));
}
Variant ei_crc32(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(crc32);
  return (f_crc32(a0));
}
Variant ei_stream_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_encoding);
  int count = params.size();
  if (count <= 1) return (f_stream_encoding(a0));
  return (f_stream_encoding(a0, a1));
}
Variant ei_drawgetstrokedasharray(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokedasharray);
  return (f_drawgetstrokedasharray(a0));
}
Variant ei_magickgetimagedispose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagedispose);
  return (f_magickgetimagedispose(a0));
}
Variant ei_drawpopdefs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpopdefs);
  return (f_drawpopdefs(a0), null);
}
Variant ei_xml_parser_create(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parser_create);
  int count = params.size();
  if (count <= 0) return (f_xml_parser_create());
  return (f_xml_parser_create(a0));
}
Variant ei_pcntl_wifsignaled(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wifsignaled);
  return (f_pcntl_wifsignaled(a0));
}
Variant ei_openssl_pkcs7_encrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs7_encrypt);
  int count = params.size();
  if (count <= 4) return (f_openssl_pkcs7_encrypt(a0, a1, a2, a3));
  if (count == 5) return (f_openssl_pkcs7_encrypt(a0, a1, a2, a3, a4));
  return (f_openssl_pkcs7_encrypt(a0, a1, a2, a3, a4, a5));
}
Variant ei_read_exif_data(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(read_exif_data);
  int count = params.size();
  if (count <= 1) return (f_read_exif_data(a0));
  if (count == 2) return (f_read_exif_data(a0, a1));
  if (count == 3) return (f_read_exif_data(a0, a1, a2));
  return (f_read_exif_data(a0, a1, a2, a3));
}
Variant ei_drawsetstrokeopacity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokeopacity);
  return (f_drawsetstrokeopacity(a0, a1), null);
}
Variant ei_drawroundrectangle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawroundrectangle);
  return (f_drawroundrectangle(a0, a1, a2, a3, a4, a5, a6), null);
}
Variant ei_hphp_directoryiterator_isdot(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_isdot);
  return (f_hphp_directoryiterator_isdot(a0));
}
Variant ei_drawgetstrokewidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokewidth);
  return (f_drawgetstrokewidth(a0));
}
Variant ei_date_create(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_create);
  int count = params.size();
  if (count <= 0) return (f_date_create());
  if (count == 1) return (f_date_create(a0));
  return (f_date_create(a0, a1));
}
Variant ei_strcspn(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strcspn);
  int count = params.size();
  if (count <= 2) return (f_strcspn(a0, a1));
  if (count == 3) return (f_strcspn(a0, a1, a2));
  return (f_strcspn(a0, a1, a2, a3));
}
Variant ei_drawgetclipunits(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetclipunits);
  return (f_drawgetclipunits(a0));
}
Variant ei_ldap_sasl_bind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_sasl_bind);
  int count = params.size();
  if (count <= 1) return (f_ldap_sasl_bind(a0));
  if (count == 2) return (f_ldap_sasl_bind(a0, a1));
  if (count == 3) return (f_ldap_sasl_bind(a0, a1, a2));
  if (count == 4) return (f_ldap_sasl_bind(a0, a1, a2, a3));
  if (count == 5) return (f_ldap_sasl_bind(a0, a1, a2, a3, a4));
  if (count == 6) return (f_ldap_sasl_bind(a0, a1, a2, a3, a4, a5));
  return (f_ldap_sasl_bind(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_sem_acquire(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sem_acquire);
  return (f_sem_acquire(a0));
}
Variant ei_socket_strerror(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_strerror);
  return (f_socket_strerror(a0));
}
Variant ei_magickgetstringheight(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetstringheight);
  int count = params.size();
  if (count <= 3) return (f_magickgetstringheight(a0, a1, a2));
  return (f_magickgetstringheight(a0, a1, a2, a3));
}
Variant ei_rawurlencode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rawurlencode);
  return (f_rawurlencode(a0));
}
Variant ei_strtotime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strtotime);
  int count = params.size();
  if (count <= 1) return (f_strtotime(a0));
  return (f_strtotime(a0, a1));
}
Variant ei_hphp_recursivedirectoryiterator_getsubpath(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_getsubpath);
  return (f_hphp_recursivedirectoryiterator_getsubpath(a0));
}
Variant ei_apc_clear_cache(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_clear_cache);
  int count = params.size();
  if (count <= 0) return (f_apc_clear_cache());
  return (f_apc_clear_cache(a0));
}
Variant ei_dirname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dirname);
  return (f_dirname(a0));
}
Variant ei_strnatcasecmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strnatcasecmp);
  return (f_strnatcasecmp(a0, a1));
}
Variant ei_magicksetsamplingfactors(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetsamplingfactors);
  return (f_magicksetsamplingfactors(a0, a1, a2));
}
Variant ei_openssl_pkey_get_private(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_get_private);
  int count = params.size();
  if (count <= 1) return (f_openssl_pkey_get_private(a0));
  return (f_openssl_pkey_get_private(a0, a1));
}
Variant ei_magickaverageimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickaverageimages);
  return (f_magickaverageimages(a0));
}
Variant ei_iconv_strrpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_strrpos);
  int count = params.size();
  if (count <= 2) return (f_iconv_strrpos(a0, a1));
  return (f_iconv_strrpos(a0, a1, a2));
}
Variant ei_drawsetviewbox(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetviewbox);
  return (f_drawsetviewbox(a0, a1, a2, a3, a4), null);
}
Variant ei_magicksetimagecompressionquality(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagecompressionquality);
  return (f_magicksetimagecompressionquality(a0, a1));
}
Variant ei_mysql_ping(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_ping);
  int count = params.size();
  if (count <= 0) return (f_mysql_ping());
  return (f_mysql_ping(a0));
}
Variant ei_xml_get_current_byte_index(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_get_current_byte_index);
  return (f_xml_get_current_byte_index(a0));
}
Variant ei_magicktransformimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicktransformimage);
  return (f_magicktransformimage(a0, a1, a2));
}
Variant ei_drawgetstrokeantialias(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokeantialias);
  return (f_drawgetstrokeantialias(a0));
}
Variant ei_ini_alter(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ini_alter);
  return (f_ini_alter(a0, a1));
}
Variant ei_get_class(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_class);
  int count = params.size();
  if (count <= 0) return (f_get_class());
  return (f_get_class(a0));
}
Variant ei_magicksetimageprofile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageprofile);
  return (f_magicksetimageprofile(a0, a1, a2));
}
Variant ei_mysql_field_seek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_field_seek);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_seek(a0));
  return (f_mysql_field_seek(a0, a1));
}
Variant ei_drawgetfontsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfontsize);
  return (f_drawgetfontsize(a0));
}
Variant ei_mysql_num_rows(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_num_rows);
  return (f_mysql_num_rows(a0));
}
Variant ei_hphp_recursiveiteratoriterator_rewind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_rewind);
  return (f_hphp_recursiveiteratoriterator_rewind(a0), null);
}
Variant ei_magickgetimageresolution(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageresolution);
  return (f_magickgetimageresolution(a0));
}
Variant ei_array_diff(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_diff);
  int count = params.size();
  if (count <= 2) return (f_array_diff(count, a0, a1));
  return (f_array_diff(count, a0, a1,vargs));
}
Variant ei_xmlwriter_open_uri(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_open_uri);
  return (f_xmlwriter_open_uri(a0));
}
Variant ei_magickgetimagetype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagetype);
  return (f_magickgetimagetype(a0));
}
Variant ei_simplexml_load_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(simplexml_load_string);
  int count = params.size();
  if (count <= 1) return (f_simplexml_load_string(a0));
  if (count == 2) return (f_simplexml_load_string(a0, a1));
  if (count == 3) return (f_simplexml_load_string(a0, a1, a2));
  if (count == 4) return (f_simplexml_load_string(a0, a1, a2, a3));
  return (f_simplexml_load_string(a0, a1, a2, a3, a4));
}
Variant ei_magickunsharpmaskimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickunsharpmaskimage);
  int count = params.size();
  if (count <= 5) return (f_magickunsharpmaskimage(a0, a1, a2, a3, a4));
  return (f_magickunsharpmaskimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_quoted_printable_encode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(quoted_printable_encode);
  return (f_quoted_printable_encode(a0));
}
Variant ei_gettype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gettype);
  return (f_gettype(a0));
}
Variant ei_magickgetimagebackgroundcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagebackgroundcolor);
  return (f_magickgetimagebackgroundcolor(a0));
}
Variant ei_hphp_splfileobject_setmaxlinelen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_setmaxlinelen);
  return (f_hphp_splfileobject_setmaxlinelen(a0, a1), null);
}
Variant ei_array_intersect_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_intersect_key);
  int count = params.size();
  if (count <= 2) return (f_array_intersect_key(count, a0, a1));
  return (f_array_intersect_key(count, a0, a1,vargs));
}
Variant ei_array_change_key_case(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_change_key_case);
  int count = params.size();
  if (count <= 1) return (f_array_change_key_case(a0));
  return (f_array_change_key_case(a0, a1));
}
Variant ei_ldap_first_attribute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_first_attribute);
  return (f_ldap_first_attribute(a0, a1));
}
Variant ei_gettimeofday(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gettimeofday);
  int count = params.size();
  if (count <= 0) return (f_gettimeofday());
  return (f_gettimeofday(a0));
}
Variant ei_xmlwriter_end_element(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_element);
  return (f_xmlwriter_end_element(a0));
}
Variant ei_drawpoint(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpoint);
  return (f_drawpoint(a0, a1, a2), null);
}
Variant ei_oci_fetch_object(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_fetch_object);
  return (f_oci_fetch_object(a0));
}
Variant ei_strnatcmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strnatcmp);
  return (f_strnatcmp(a0, a1));
}
Variant ei_property_exists(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(property_exists);
  return (f_property_exists(a0, a1));
}
Variant ei_oci_rollback(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_rollback);
  return (f_oci_rollback(a0));
}
Variant ei_mysql_affected_rows(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_affected_rows);
  int count = params.size();
  if (count <= 0) return (f_mysql_affected_rows());
  return (f_mysql_affected_rows(a0));
}
Variant ei_magickdespeckleimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickdespeckleimage);
  return (f_magickdespeckleimage(a0));
}
Variant ei_imagecopymergegray(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecopymergegray);
  return (f_imagecopymergegray(a0, a1, a2, a3, a4, a5, a6, a7, a8));
}
Variant ei_ctype_cntrl(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_cntrl);
  return (f_ctype_cntrl(a0));
}
Variant ei_hphp_splfileobject_next(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_next);
  return (f_hphp_splfileobject_next(a0), null);
}
Variant ei_is_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_array);
  return (f_is_array(a0));
}
Variant ei_rename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rename);
  int count = params.size();
  if (count <= 2) return (f_rename(a0, a1));
  return (f_rename(a0, a1, a2));
}
Variant ei_date_format(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_format);
  return (f_date_format(a0, a1));
}
Variant ei_hphp_splfileobject_fgetc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fgetc);
  return (f_hphp_splfileobject_fgetc(a0));
}
Variant ei_magickshaveimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickshaveimage);
  return (f_magickshaveimage(a0, a1, a2));
}
Variant ei_xmlwriter_output_memory(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_output_memory);
  int count = params.size();
  if (count <= 1) return (f_xmlwriter_output_memory(a0));
  return (f_xmlwriter_output_memory(a0, a1));
}
Variant ei_ob_end_flush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_end_flush);
  return (f_ob_end_flush());
}
Variant ei_magickwhitethresholdimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickwhitethresholdimage);
  return (f_magickwhitethresholdimage(a0, a1));
}
Variant ei_drawpolyline(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpolyline);
  return (f_drawpolyline(a0, a1), null);
}
Variant ei_hphp_splfileobject_fgets(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_fgets);
  return (f_hphp_splfileobject_fgets(a0));
}
Variant ei_hphp_get_function_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_get_function_info);
  return (f_hphp_get_function_info(a0));
}
Variant ei_prev(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(prev);
  return (f_prev(ref(a0)));
}
Variant ei_imagegammacorrect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagegammacorrect);
  return (f_imagegammacorrect(a0, a1, a2));
}
Variant ei_str_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_replace);
  int count = params.size();
  if (count <= 3) return (f_str_replace(a0, a1, a2));
  return (f_str_replace(a0, a1, a2, ref(a3)));
}
Variant ei_clock_getres(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clock_getres);
  return (f_clock_getres(a0, ref(a1), ref(a2)));
}
Variant ei_magicktrimimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicktrimimage);
  return (f_magicktrimimage(a0, a1));
}
Variant ei_hphp_splfileinfo_getpathinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getpathinfo);
  return (f_hphp_splfileinfo_getpathinfo(a0, a1));
}
Variant ei_magickgetimagegamma(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagegamma);
  return (f_magickgetimagegamma(a0));
}
Variant ei_newdrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newdrawingwand);
  return (f_newdrawingwand());
}
Variant ei_oci_new_cursor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_new_cursor);
  return (f_oci_new_cursor(a0));
}
Variant ei_gzrewind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzrewind);
  return (f_gzrewind(a0));
}
Variant ei_ldap_explode_dn(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_explode_dn);
  return (f_ldap_explode_dn(a0, a1));
}
Variant ei_posix_times(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_times);
  return (f_posix_times());
}
Variant ei_drawgetfillcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfillcolor);
  return (f_drawgetfillcolor(a0));
}
Variant ei_mb_strtolower(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strtolower);
  int count = params.size();
  if (count <= 1) return (f_mb_strtolower(a0));
  return (f_mb_strtolower(a0, a1));
}
Variant ei_localtime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(localtime);
  int count = params.size();
  if (count <= 0) return (f_localtime());
  if (count == 1) return (f_localtime(a0));
  return (f_localtime(a0, a1));
}
Variant ei_oci_password_change(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_password_change);
  return (f_oci_password_change(a0, a1, a2, a3));
}
Variant ei_fb_thrift_unserialize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_thrift_unserialize);
  int count = params.size();
  if (count <= 2) return (f_fb_thrift_unserialize(a0, ref(a1)));
  return (f_fb_thrift_unserialize(a0, ref(a1), ref(a2)));
}
Variant ei_sha1(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sha1);
  int count = params.size();
  if (count <= 1) return (f_sha1(a0));
  return (f_sha1(a0, a1));
}
Variant ei_implode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(implode);
  int count = params.size();
  if (count <= 1) return (f_implode(a0));
  return (f_implode(a0, a1));
}
Variant ei_date_isodate_set(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_isodate_set);
  int count = params.size();
  if (count <= 3) return (f_date_isodate_set(a0, a1, a2), null);
  return (f_date_isodate_set(a0, a1, a2, a3), null);
}
Variant ei_oci_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_result);
  return (f_oci_result(a0, a1));
}
Variant ei_magickpaintopaqueimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickpaintopaqueimage);
  int count = params.size();
  if (count <= 3) return (f_magickpaintopaqueimage(a0, a1, a2));
  return (f_magickpaintopaqueimage(a0, a1, a2, a3));
}
Variant ei_mb_strimwidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_strimwidth);
  int count = params.size();
  if (count <= 3) return (f_mb_strimwidth(a0, a1, a2));
  if (count == 4) return (f_mb_strimwidth(a0, a1, a2, a3));
  return (f_mb_strimwidth(a0, a1, a2, a3, a4));
}
Variant ei_drawsetfont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfont);
  return (f_drawsetfont(a0, a1));
}
Variant ei_xml_set_default_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_default_handler);
  return (f_xml_set_default_handler(a0, a1));
}
Variant ei_magickchopimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickchopimage);
  return (f_magickchopimage(a0, a1, a2, a3, a4));
}
Variant ei_wordwrap(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(wordwrap);
  int count = params.size();
  if (count <= 1) return (f_wordwrap(a0));
  if (count == 2) return (f_wordwrap(a0, a1));
  if (count == 3) return (f_wordwrap(a0, a1, a2));
  return (f_wordwrap(a0, a1, a2, a3));
}
Variant ei_gzgetss(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzgetss);
  int count = params.size();
  if (count <= 1) return (f_gzgetss(a0));
  if (count == 2) return (f_gzgetss(a0, a1));
  return (f_gzgetss(a0, a1, a2));
}
Variant ei_magickgetimagevirtualpixelmethod(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagevirtualpixelmethod);
  return (f_magickgetimagevirtualpixelmethod(a0));
}
Variant ei_imagedestroy(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagedestroy);
  return (f_imagedestroy(a0));
}
Variant ei_timezone_open(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_open);
  return (f_timezone_open(a0));
}
Variant ei_ob_clean(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_clean);
  return (f_ob_clean(), null);
}
Variant ei_mb_ereg_search_pos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search_pos);
  int count = params.size();
  if (count <= 0) return (f_mb_ereg_search_pos());
  if (count == 1) return (f_mb_ereg_search_pos(a0));
  return (f_mb_ereg_search_pos(a0, a1));
}
Variant ei_bccomp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bccomp);
  int count = params.size();
  if (count <= 2) return (f_bccomp(a0, a1));
  return (f_bccomp(a0, a1, a2));
}
Variant ei_gzdecode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzdecode);
  return (f_gzdecode(a0));
}
Variant ei_magicksetimagecompose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagecompose);
  return (f_magicksetimagecompose(a0, a1));
}
Variant ei_apc_bin_dump(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_bin_dump);
  int count = params.size();
  if (count <= 0) return (f_apc_bin_dump());
  if (count == 1) return (f_apc_bin_dump(a0));
  return (f_apc_bin_dump(a0, a1));
}
Variant ei_ini_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ini_get);
  return (f_ini_get(a0));
}
Variant ei_mb_ereg_search_setpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_search_setpos);
  return (f_mb_ereg_search_setpos(a0));
}
Variant ei_stream_copy_to_stream(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_copy_to_stream);
  int count = params.size();
  if (count <= 2) return (f_stream_copy_to_stream(a0, a1));
  if (count == 3) return (f_stream_copy_to_stream(a0, a1, a2));
  return (f_stream_copy_to_stream(a0, a1, a2, a3));
}
Variant ei_xml_get_error_code(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_get_error_code);
  return (f_xml_get_error_code(a0));
}
Variant ei_pcntl_alarm(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_alarm);
  return (f_pcntl_alarm(a0));
}
Variant ei_drawpolygon(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpolygon);
  return (f_drawpolygon(a0, a1), null);
}
Variant ei_mysql_connect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_connect);
  int count = params.size();
  if (count <= 0) return (f_mysql_connect());
  if (count == 1) return (f_mysql_connect(a0));
  if (count == 2) return (f_mysql_connect(a0, a1));
  if (count == 3) return (f_mysql_connect(a0, a1, a2));
  if (count == 4) return (f_mysql_connect(a0, a1, a2, a3));
  if (count == 5) return (f_mysql_connect(a0, a1, a2, a3, a4));
  if (count == 6) return (f_mysql_connect(a0, a1, a2, a3, a4, a5));
  return (f_mysql_connect(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_xmlwriter_write_raw(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_raw);
  return (f_xmlwriter_write_raw(a0, a1));
}
Variant ei_fgetss(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fgetss);
  int count = params.size();
  if (count <= 1) return (f_fgetss(a0));
  if (count == 2) return (f_fgetss(a0, a1));
  return (f_fgetss(a0, a1, a2));
}
Variant ei_drawarc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawarc);
  return (f_drawarc(a0, a1, a2, a3, a4, a5, a6), null);
}
Variant ei_set_error_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(set_error_handler);
  int count = params.size();
  if (count <= 1) return (f_set_error_handler(a0));
  return (f_set_error_handler(a0, a1));
}
Variant ei_str_word_count(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_word_count);
  int count = params.size();
  if (count <= 1) return (f_str_word_count(a0));
  if (count == 2) return (f_str_word_count(a0, a1));
  return (f_str_word_count(a0, a1, a2));
}
Variant ei_drawsetcliprule(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetcliprule);
  return (f_drawsetcliprule(a0, a1), null);
}
Variant ei_openssl_pkcs12_read(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkcs12_read);
  return (f_openssl_pkcs12_read(a0, ref(a1), a2));
}
Variant ei_ldap_list(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_list);
  int count = params.size();
  if (count <= 3) return (f_ldap_list(a0, a1, a2));
  if (count == 4) return (f_ldap_list(a0, a1, a2, a3));
  if (count == 5) return (f_ldap_list(a0, a1, a2, a3, a4));
  if (count == 6) return (f_ldap_list(a0, a1, a2, a3, a4, a5));
  if (count == 7) return (f_ldap_list(a0, a1, a2, a3, a4, a5, a6));
  return (f_ldap_list(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_func_num_args(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(func_num_args);
  return (f_func_num_args());
}
Variant ei_drawsettextdecoration(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsettextdecoration);
  return (f_drawsettextdecoration(a0, a1), null);
}
Variant ei_str_rot13(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_rot13);
  return (f_str_rot13(a0));
}
Variant ei_openssl_pkey_new(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_new);
  int count = params.size();
  if (count <= 0) return (f_openssl_pkey_new());
  return (f_openssl_pkey_new(a0));
}
Variant ei_magicksetimageindex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageindex);
  return (f_magicksetimageindex(a0, a1));
}
Variant ei_ldap_rename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_rename);
  return (f_ldap_rename(a0, a1, a2, a3, a4));
}
Variant ei_ldap_start_tls(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_start_tls);
  return (f_ldap_start_tls(a0));
}
Variant ei_tanh(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(tanh);
  return (f_tanh(a0));
}
Variant ei_drawscale(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawscale);
  return (f_drawscale(a0, a1, a2), null);
}
Variant ei_drawrotate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawrotate);
  return (f_drawrotate(a0, a1), null);
}
Variant ei_getservbyname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getservbyname);
  return (f_getservbyname(a0, a1));
}
Variant ei_compact(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(compact);
  int count = params.size();
  if (count <= 1) return (f_compact(count, a0));
  return (f_compact(count, a0,vargs));
}
Variant ei_hphp_splfileobject_valid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_valid);
  return (f_hphp_splfileobject_valid(a0));
}
Variant ei_imagecolorclosest(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorclosest);
  return (f_imagecolorclosest(a0, a1, a2, a3));
}
Variant ei_magickwriteimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickwriteimages);
  int count = params.size();
  if (count <= 1) return (f_magickwriteimages(a0));
  if (count == 2) return (f_magickwriteimages(a0, a1));
  return (f_magickwriteimages(a0, a1, a2));
}
Variant ei_pixelsetalpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetalpha);
  return (f_pixelsetalpha(a0, a1), null);
}
Variant ei_magicksetimageiterations(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageiterations);
  return (f_magicksetimageiterations(a0, a1));
}
Variant ei_oci_field_scale(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_scale);
  return (f_oci_field_scale(a0, a1));
}
Variant ei_drawpathmovetoabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathmovetoabsolute);
  return (f_drawpathmovetoabsolute(a0, a1, a2), null);
}
Variant ei_quotemeta(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(quotemeta);
  return (f_quotemeta(a0));
}
Variant ei_imagefilltoborder(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefilltoborder);
  return (f_imagefilltoborder(a0, a1, a2, a3, a4));
}
Variant ei_xml_set_notation_decl_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_notation_decl_handler);
  return (f_xml_set_notation_decl_handler(a0, a1));
}
Variant ei_oci_free_descriptor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_free_descriptor);
  return (f_oci_free_descriptor(a0));
}
Variant ei_is_writeable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_writeable);
  return (f_is_writeable(a0));
}
Variant ei_magickgetwandsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetwandsize);
  return (f_magickgetwandsize(a0));
}
Variant ei_hphp_directoryiterator___tostring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator___tostring);
  return (f_hphp_directoryiterator___tostring(a0));
}
Variant ei_imageinterlace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageinterlace);
  int count = params.size();
  if (count <= 1) return (f_imageinterlace(a0));
  return (f_imageinterlace(a0, a1));
}
Variant ei_preg_match_all(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_match_all);
  int count = params.size();
  if (count <= 3) return (f_preg_match_all(a0, a1, ref(a2)));
  if (count == 4) return (f_preg_match_all(a0, a1, ref(a2), a3));
  return (f_preg_match_all(a0, a1, ref(a2), a3, a4));
}
Variant ei_proc_terminate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(proc_terminate);
  int count = params.size();
  if (count <= 1) return (f_proc_terminate(a0));
  return (f_proc_terminate(a0, a1));
}
Variant ei_apc_bin_loadfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_bin_loadfile);
  int count = params.size();
  if (count <= 1) return (f_apc_bin_loadfile(a0));
  if (count == 2) return (f_apc_bin_loadfile(a0, a1));
  if (count == 3) return (f_apc_bin_loadfile(a0, a1, a2));
  return (f_apc_bin_loadfile(a0, a1, a2, a3));
}
Variant ei_posix_getcwd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getcwd);
  return (f_posix_getcwd());
}
Variant ei_drawpathcurvetoabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetoabsolute);
  return (f_drawpathcurvetoabsolute(a0, a1, a2, a3, a4, a5, a6), null);
}
Variant ei_preg_match(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(preg_match);
  int count = params.size();
  if (count <= 2) return (f_preg_match(a0, a1));
  if (count == 3) return (f_preg_match(a0, a1, ref(a2)));
  if (count == 4) return (f_preg_match(a0, a1, ref(a2), a3));
  return (f_preg_match(a0, a1, ref(a2), a3, a4));
}
Variant ei_timezone_abbreviations_list(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_abbreviations_list);
  return (f_timezone_abbreviations_list());
}
Variant ei_magickradialblurimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickradialblurimage);
  return (f_magickradialblurimage(a0, a1));
}
Variant ei_posix_geteuid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_geteuid);
  return (f_posix_geteuid());
}
Variant ei_mysql_fetch_lengths(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_fetch_lengths);
  return (f_mysql_fetch_lengths(a0));
}
Variant ei_magickwriteimagefile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickwriteimagefile);
  return (f_magickwriteimagefile(a0, a1));
}
Variant ei_serialize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(serialize);
  return (f_serialize(a0));
}
Variant ei_exif_read_data(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(exif_read_data);
  int count = params.size();
  if (count <= 1) return (f_exif_read_data(a0));
  if (count == 2) return (f_exif_read_data(a0, a1));
  if (count == 3) return (f_exif_read_data(a0, a1, a2));
  return (f_exif_read_data(a0, a1, a2, a3));
}
Variant ei_pixelgetiteratorexceptiontype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetiteratorexceptiontype);
  return (f_pixelgetiteratorexceptiontype(a0));
}
Variant ei_destroydrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(destroydrawingwand);
  return (f_destroydrawingwand(a0), null);
}
Variant ei_lstat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(lstat);
  return (f_lstat(a0));
}
Variant ei_apache_note(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_note);
  int count = params.size();
  if (count <= 1) return (f_apache_note(a0));
  return (f_apache_note(a0, a1));
}
Variant ei_drawgetexceptiontype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetexceptiontype);
  return (f_drawgetexceptiontype(a0));
}
Variant ei_drawbezier(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawbezier);
  return (f_drawbezier(a0, a1), null);
}
Variant ei_xmlwriter_start_comment(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_comment);
  return (f_xmlwriter_start_comment(a0));
}
Variant ei_ldap_set_rebind_proc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_set_rebind_proc);
  return (f_ldap_set_rebind_proc(a0, a1));
}
Variant ei_drawsetstrokecolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokecolor);
  return (f_drawsetstrokecolor(a0, a1), null);
}
Variant ei_drawpathlinetohorizontalrelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathlinetohorizontalrelative);
  return (f_drawpathlinetohorizontalrelative(a0, a1), null);
}
Variant ei_gmmktime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gmmktime);
  int count = params.size();
  if (count <= 0) return (f_gmmktime());
  if (count == 1) return (f_gmmktime(a0));
  if (count == 2) return (f_gmmktime(a0, a1));
  if (count == 3) return (f_gmmktime(a0, a1, a2));
  if (count == 4) return (f_gmmktime(a0, a1, a2, a3));
  if (count == 5) return (f_gmmktime(a0, a1, a2, a3, a4));
  return (f_gmmktime(a0, a1, a2, a3, a4, a5));
}
Variant ei_gmdate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gmdate);
  int count = params.size();
  if (count <= 1) return (f_gmdate(a0));
  return (f_gmdate(a0, a1));
}
Variant ei_posix_getgid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getgid);
  return (f_posix_getgid());
}
Variant ei_sinh(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sinh);
  return (f_sinh(a0));
}
Variant ei_apc_fetch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_fetch);
  int count = params.size();
  if (count <= 1) return (f_apc_fetch(a0));
  if (count == 2) return (f_apc_fetch(a0, ref(a1)));
  return (f_apc_fetch(a0, ref(a1), a2));
}
Variant ei_fileowner(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fileowner);
  return (f_fileowner(a0));
}
Variant ei_imagecopymerge(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecopymerge);
  return (f_imagecopymerge(a0, a1, a2, a3, a4, a5, a6, a7, a8));
}
Variant ei_magickclipimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickclipimage);
  return (f_magickclipimage(a0));
}
Variant ei_imagestringup(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagestringup);
  return (f_imagestringup(a0, a1, a2, a3, a4, a5));
}
Variant ei_mt_getrandmax(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mt_getrandmax);
  return (f_mt_getrandmax());
}
Variant ei_magickgetresourcelimit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetresourcelimit);
  return (f_magickgetresourcelimit(a0));
}
Variant ei_hphp_splfileinfo_getlinktarget(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getlinktarget);
  return (f_hphp_splfileinfo_getlinktarget(a0));
}
Variant ei_imagecolorexact(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorexact);
  return (f_imagecolorexact(a0, a1, a2, a3));
}
Variant ei_hphp_recursivedirectoryiterator_current(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_current);
  return (f_hphp_recursivedirectoryiterator_current(a0));
}
Variant ei_setcookie(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(setcookie);
  int count = params.size();
  if (count <= 1) return (f_setcookie(a0));
  if (count == 2) return (f_setcookie(a0, a1));
  if (count == 3) return (f_setcookie(a0, a1, a2));
  if (count == 4) return (f_setcookie(a0, a1, a2, a3));
  if (count == 5) return (f_setcookie(a0, a1, a2, a3, a4));
  if (count == 6) return (f_setcookie(a0, a1, a2, a3, a4, a5));
  return (f_setcookie(a0, a1, a2, a3, a4, a5, a6));
}
Variant ei_fileatime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fileatime);
  return (f_fileatime(a0));
}
Variant ei_apd_stop_trace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_stop_trace);
  return (f_apd_stop_trace(), null);
}
Variant ei_addcslashes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(addcslashes);
  return (f_addcslashes(a0, a1));
}
Variant ei_magicksetimageoption(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageoption);
  return (f_magicksetimageoption(a0, a1, a2, a3));
}
Variant ei_xmlwriter_write_comment(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_comment);
  return (f_xmlwriter_write_comment(a0, a1));
}
Variant ei_drawgetfontstyle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfontstyle);
  return (f_drawgetfontstyle(a0));
}
Variant ei_strtoupper(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strtoupper);
  return (f_strtoupper(a0));
}
Variant ei_xml_set_processing_instruction_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_processing_instruction_handler);
  return (f_xml_set_processing_instruction_handler(a0, a1));
}
Variant ei_apd_breakpoint(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_breakpoint);
  return (f_apd_breakpoint());
}
Variant ei_magickgetimageblueprimary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageblueprimary);
  return (f_magickgetimageblueprimary(a0));
}
Variant ei_magickspreadimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickspreadimage);
  return (f_magickspreadimage(a0, a1));
}
Variant ei_array_fill(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_fill);
  return (f_array_fill(a0, a1, a2));
}
Variant ei_stream_set_write_buffer(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_set_write_buffer);
  return (f_stream_set_write_buffer(a0, a1));
}
Variant ei_mb_list_encodings(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_list_encodings);
  return (f_mb_list_encodings());
}
Variant ei_sleep(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sleep);
  return (f_sleep(a0));
}
Variant ei_cleardrawingwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(cleardrawingwand);
  return (f_cleardrawingwand(a0), null);
}
Variant ei_imagecolorset(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorset);
  return (f_imagecolorset(a0, a1, a2, a3, a4));
}
Variant ei_openssl_x509_checkpurpose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_checkpurpose);
  int count = params.size();
  if (count <= 2) return (f_openssl_x509_checkpurpose(a0, a1));
  if (count == 3) return (f_openssl_x509_checkpurpose(a0, a1, a2));
  return (f_openssl_x509_checkpurpose(a0, a1, a2, a3));
}
Variant ei_drawpathcurvetosmoothabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetosmoothabsolute);
  return (f_drawpathcurvetosmoothabsolute(a0, a1, a2, a3, a4), null);
}
Variant ei_array_intersect_ukey(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_intersect_ukey);
  int count = params.size();
  if (count <= 3) return (f_array_intersect_ukey(count, a0, a1, a2));
  return (f_array_intersect_ukey(count, a0, a1, a2,vargs));
}
Variant ei_timezone_name_from_abbr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(timezone_name_from_abbr);
  int count = params.size();
  if (count <= 1) return (f_timezone_name_from_abbr(a0));
  if (count == 2) return (f_timezone_name_from_abbr(a0, a1));
  return (f_timezone_name_from_abbr(a0, a1, a2));
}
Variant ei_imagefilledellipse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefilledellipse);
  return (f_imagefilledellipse(a0, a1, a2, a3, a4, a5));
}
Variant ei_pcntl_wstopsig(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_wstopsig);
  return (f_pcntl_wstopsig(a0));
}
Variant ei_get_defined_vars(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_defined_vars);
  return (f_get_defined_vars());
}
Variant ei_memory_get_usage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(memory_get_usage);
  int count = params.size();
  if (count <= 0) return (f_memory_get_usage());
  return (f_memory_get_usage(a0));
}
Variant ei_intval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(intval);
  int count = params.size();
  if (count <= 1) return (f_intval(a0));
  return (f_intval(a0, a1));
}
Variant ei_pagelet_server_task_status(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pagelet_server_task_status);
  return (f_pagelet_server_task_status(a0));
}
Variant ei_iconv_set_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_set_encoding);
  return (f_iconv_set_encoding(a0, a1));
}
Variant ei_magickmattefloodfillimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmattefloodfillimage);
  return (f_magickmattefloodfillimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_mailparse_msg_get_part(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_get_part);
  return (f_mailparse_msg_get_part(a0, a1));
}
Variant ei_mb_check_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_check_encoding);
  int count = params.size();
  if (count <= 0) return (f_mb_check_encoding());
  if (count == 1) return (f_mb_check_encoding(a0));
  return (f_mb_check_encoding(a0, a1));
}
Variant ei_ldap_get_dn(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_get_dn);
  return (f_ldap_get_dn(a0, a1));
}
Variant ei_newpixeliterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newpixeliterator);
  return (f_newpixeliterator(a0));
}
Variant ei_magicksetimagefilename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagefilename);
  int count = params.size();
  if (count <= 1) return (f_magicksetimagefilename(a0));
  return (f_magicksetimagefilename(a0, a1));
}
Variant ei_call_user_func(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(call_user_func);
  int count = params.size();
  if (count <= 1) return (f_call_user_func(count, a0));
  return (f_call_user_func(count, a0,vargs));
}
Variant ei_mysql_list_tables(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_list_tables);
  int count = params.size();
  if (count <= 1) return (f_mysql_list_tables(a0));
  return (f_mysql_list_tables(a0, a1));
}
Variant ei_magickgetinterlacescheme(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetinterlacescheme);
  return (f_magickgetinterlacescheme(a0));
}
Variant ei_ltrim(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ltrim);
  int count = params.size();
  if (count <= 1) return (f_ltrim(a0));
  return (f_ltrim(a0, a1));
}
Variant ei_magicktextureimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicktextureimage);
  return (f_magicktextureimage(a0, a1));
}
Variant ei_mb_ereg_match(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_ereg_match);
  int count = params.size();
  if (count <= 2) return (f_mb_ereg_match(a0, a1));
  return (f_mb_ereg_match(a0, a1, a2));
}
Variant ei_mt_srand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mt_srand);
  int count = params.size();
  if (count <= 0) return (f_mt_srand(), null);
  return (f_mt_srand(a0), null);
}
Variant ei_imagecolorallocate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorallocate);
  return (f_imagecolorallocate(a0, a1, a2, a3));
}
Variant ei_define_syslog_variables(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(define_syslog_variables);
  return (f_define_syslog_variables(), null);
}
Variant ei_mcrypt_enc_get_modes_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_get_modes_name);
  return (f_mcrypt_enc_get_modes_name(a0));
}
Variant ei_array_flip(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_flip);
  return (f_array_flip(a0));
}
Variant ei_count(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(count);
  int count = params.size();
  if (count <= 1) return (f_count(a0));
  return (f_count(a0, a1));
}
Variant ei_lcg_value(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(lcg_value);
  return (f_lcg_value());
}
Variant ei_php_logo_guid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(php_logo_guid);
  return (f_php_logo_guid());
}
Variant ei_time(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(time);
  return (f_time());
}
Variant ei_magickcoalesceimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcoalesceimages);
  return (f_magickcoalesceimages(a0));
}
Variant ei_pixelgetquantumcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetquantumcolor);
  return (f_pixelgetquantumcolor(a0));
}
Variant ei_openssl_private_encrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_private_encrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_private_encrypt(a0, ref(a1), a2));
  return (f_openssl_private_encrypt(a0, ref(a1), a2, a3));
}
Variant ei_xhprof_enable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xhprof_enable);
  int count = params.size();
  if (count <= 1) return (f_xhprof_enable(a0), null);
  return (f_xhprof_enable(a0, a1), null);
}
Variant ei_hphp_splfileinfo_gettype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_gettype);
  return (f_hphp_splfileinfo_gettype(a0));
}
Variant ei_xmlwriter_start_document(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_document);
  int count = params.size();
  if (count <= 1) return (f_xmlwriter_start_document(a0));
  if (count == 2) return (f_xmlwriter_start_document(a0, a1));
  if (count == 3) return (f_xmlwriter_start_document(a0, a1, a2));
  return (f_xmlwriter_start_document(a0, a1, a2, a3));
}
Variant ei_libxml_clear_errors(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(libxml_clear_errors);
  return (f_libxml_clear_errors(), null);
}
Variant ei_magicknormalizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicknormalizeimage);
  return (f_magicknormalizeimage(a0));
}
Variant ei_magickgetformat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetformat);
  return (f_magickgetformat(a0));
}
Variant ei_hphp_get_class_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_get_class_info);
  return (f_hphp_get_class_info(a0));
}
Variant ei_mailparse_msg_get_part_data(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_get_part_data);
  return (f_mailparse_msg_get_part_data(a0));
}
Variant ei_openssl_csr_new(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_csr_new);
  int count = params.size();
  if (count <= 2) return (f_openssl_csr_new(a0, ref(a1)));
  if (count == 3) return (f_openssl_csr_new(a0, ref(a1), a2));
  return (f_openssl_csr_new(a0, ref(a1), a2, a3));
}
Variant ei_xbox_task_start(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xbox_task_start);
  return (f_xbox_task_start(a0));
}
Variant ei_getcwd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getcwd);
  return (f_getcwd());
}
Variant ei_posix_getrlimit(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getrlimit);
  return (f_posix_getrlimit());
}
Variant ei_mb_get_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_get_info);
  int count = params.size();
  if (count <= 0) return (f_mb_get_info());
  return (f_mb_get_info(a0));
}
Variant ei_newpixelwands(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(newpixelwands);
  return (f_newpixelwands(a0));
}
Variant ei_fputcsv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fputcsv);
  int count = params.size();
  if (count <= 2) return (f_fputcsv(a0, a1));
  if (count == 3) return (f_fputcsv(a0, a1, a2));
  return (f_fputcsv(a0, a1, a2, a3));
}
Variant ei_stream_bucket_prepend(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_bucket_prepend);
  return (f_stream_bucket_prepend(a0, a1), null);
}
Variant ei_apache_get_scoreboard(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_get_scoreboard);
  return (f_apache_get_scoreboard());
}
Variant ei_sprintf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(sprintf);
  int count = params.size();
  if (count <= 1) return (f_sprintf(count, a0));
  return (f_sprintf(count, a0,vargs));
}
Variant ei_ldap_err2str(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_err2str);
  return (f_ldap_err2str(a0));
}
Variant ei_xmlwriter_end_attribute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_attribute);
  return (f_xmlwriter_end_attribute(a0));
}
Variant ei_imagecharup(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecharup);
  return (f_imagecharup(a0, a1, a2, a3, a4, a5));
}
Variant ei_fflush(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fflush);
  return (f_fflush(a0));
}
Variant ei_magickwaveimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickwaveimage);
  return (f_magickwaveimage(a0, a1, a2));
}
Variant ei_imagepsfreefont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepsfreefont);
  return (f_imagepsfreefont(a0));
}
Variant ei_magickgetsamplingfactors(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetsamplingfactors);
  return (f_magickgetsamplingfactors(a0));
}
Variant ei_hphp_splfileinfo_getpathname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getpathname);
  return (f_hphp_splfileinfo_getpathname(a0));
}
Variant ei_mt_rand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mt_rand);
  int count = params.size();
  if (count <= 0) return (f_mt_rand());
  if (count == 1) return (f_mt_rand(a0));
  return (f_mt_rand(a0, a1));
}
Variant ei_magickflopimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickflopimage);
  return (f_magickflopimage(a0));
}
Variant ei_getenv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getenv);
  return (f_getenv(a0));
}
Variant ei_register_cleanup_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(register_cleanup_function);
  int count = params.size();
  if (count <= 1) return (f_register_cleanup_function(count, a0), null);
  return (f_register_cleanup_function(count, a0,vargs), null);
}
Variant ei_is_dir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_dir);
  return (f_is_dir(a0));
}
Variant ei_get_defined_functions(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_defined_functions);
  return (f_get_defined_functions());
}
Variant ei_stream_set_timeout(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_set_timeout);
  int count = params.size();
  if (count <= 2) return (f_stream_set_timeout(a0, a1));
  return (f_stream_set_timeout(a0, a1, a2));
}
Variant ei_pixelsetblack(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetblack);
  return (f_pixelsetblack(a0, a1), null);
}
Variant ei_magickenhanceimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickenhanceimage);
  return (f_magickenhanceimage(a0));
}
Variant ei_magickgetcharwidth(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetcharwidth);
  int count = params.size();
  if (count <= 3) return (f_magickgetcharwidth(a0, a1, a2));
  return (f_magickgetcharwidth(a0, a1, a2, a3));
}
Variant ei_magickshearimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickshearimage);
  return (f_magickshearimage(a0, a1, a2, a3));
}
Variant ei_stream_socket_enable_crypto(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_enable_crypto);
  int count = params.size();
  if (count <= 2) return (f_stream_socket_enable_crypto(a0, a1));
  if (count == 3) return (f_stream_socket_enable_crypto(a0, a1, a2));
  return (f_stream_socket_enable_crypto(a0, a1, a2, a3));
}
Variant ei_stream_socket_server(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_server);
  int count = params.size();
  if (count <= 1) return (f_stream_socket_server(a0));
  if (count == 2) return (f_stream_socket_server(a0, ref(a1)));
  if (count == 3) return (f_stream_socket_server(a0, ref(a1), ref(a2)));
  if (count == 4) return (f_stream_socket_server(a0, ref(a1), ref(a2), a3));
  return (f_stream_socket_server(a0, ref(a1), ref(a2), a3, a4));
}
Variant ei_apd_set_pprof_trace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apd_set_pprof_trace);
  int count = params.size();
  if (count <= 0) return (f_apd_set_pprof_trace());
  if (count == 1) return (f_apd_set_pprof_trace(a0));
  return (f_apd_set_pprof_trace(a0, a1));
}
Variant ei_sort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sort);
  int count = params.size();
  if (count <= 1) return (f_sort(ref(a0)));
  if (count == 2) return (f_sort(ref(a0), a1));
  return (f_sort(ref(a0), a1, a2));
}
Variant ei_oci_num_rows(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_num_rows);
  return (f_oci_num_rows(a0));
}
Variant ei_ini_set(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ini_set);
  return (f_ini_set(a0, a1));
}
Variant ei_drawgetfont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetfont);
  return (f_drawgetfont(a0));
}
Variant ei_readdir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(readdir);
  return (f_readdir(a0));
}
Variant ei_mysql_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_close);
  int count = params.size();
  if (count <= 0) return (f_mysql_close());
  return (f_mysql_close(a0));
}
Variant ei_ldap_8859_to_t61(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_8859_to_t61);
  return (f_ldap_8859_to_t61(a0));
}
Variant ei_magickblurimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickblurimage);
  int count = params.size();
  if (count <= 3) return (f_magickblurimage(a0, a1, a2));
  return (f_magickblurimage(a0, a1, a2, a3));
}
Variant ei_magickreducenoiseimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickreducenoiseimage);
  return (f_magickreducenoiseimage(a0, a1));
}
Variant ei_magicksetimagerenderingintent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagerenderingintent);
  return (f_magicksetimagerenderingintent(a0, a1));
}
Variant ei_magicktintimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicktintimage);
  return (f_magicktintimage(a0, a1, a2));
}
Variant ei_oci_fetch_all(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_fetch_all);
  int count = params.size();
  if (count <= 2) return (f_oci_fetch_all(a0, ref(a1)));
  if (count == 3) return (f_oci_fetch_all(a0, ref(a1), a2));
  if (count == 4) return (f_oci_fetch_all(a0, ref(a1), a2, a3));
  return (f_oci_fetch_all(a0, ref(a1), a2, a3, a4));
}
Variant ei_rawurldecode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rawurldecode);
  return (f_rawurldecode(a0));
}
Variant ei_xmlwriter_start_element_ns(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_element_ns);
  return (f_xmlwriter_start_element_ns(a0, a1, a2, a3));
}
Variant ei_strftime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strftime);
  int count = params.size();
  if (count <= 1) return (f_strftime(a0));
  return (f_strftime(a0, a1));
}
Variant ei_imagecolorstotal(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorstotal);
  return (f_imagecolorstotal(a0));
}
Variant ei_hphp_splfileinfo_getowner(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getowner);
  return (f_hphp_splfileinfo_getowner(a0));
}
Variant ei_apc_bin_dumpfile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_bin_dumpfile);
  int count = params.size();
  if (count <= 3) return (f_apc_bin_dumpfile(a0, a1, a2));
  if (count == 4) return (f_apc_bin_dumpfile(a0, a1, a2, a3));
  return (f_apc_bin_dumpfile(a0, a1, a2, a3, a4));
}
Variant ei_xml_parse_into_struct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parse_into_struct);
  int count = params.size();
  if (count <= 3) return (f_xml_parse_into_struct(a0, a1, ref(a2)));
  return (f_xml_parse_into_struct(a0, a1, ref(a2), ref(a3)));
}
Variant ei_icu_transliterate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(icu_transliterate);
  return (f_icu_transliterate(a0, a1));
}
Variant ei_mb_eregi_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_eregi_replace);
  int count = params.size();
  if (count <= 3) return (f_mb_eregi_replace(a0, a1, a2));
  return (f_mb_eregi_replace(a0, a1, a2, a3));
}
Variant ei_hphp_splfileinfo_getatime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getatime);
  return (f_hphp_splfileinfo_getatime(a0));
}
Variant ei_array_unshift(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_unshift);
  int count = params.size();
  if (count <= 2) return (f_array_unshift(count, ref(a0), a1));
  return (f_array_unshift(count, ref(a0), a1,vargs));
}
Variant ei_oci_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_error);
  int count = params.size();
  if (count <= 0) return (f_oci_error());
  return (f_oci_error(a0));
}
Variant ei_stat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stat);
  return (f_stat(a0));
}
Variant ei_hphp_directoryiterator_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_directoryiterator_key);
  return (f_hphp_directoryiterator_key(a0));
}
Variant ei_posix_getpid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getpid);
  return (f_posix_getpid());
}
Variant ei_get_current_user(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_current_user);
  return (f_get_current_user());
}
Variant ei_filesize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(filesize);
  return (f_filesize(a0));
}
Variant ei_round(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(round);
  int count = params.size();
  if (count <= 1) return (f_round(a0));
  return (f_round(a0, a1));
}
Variant ei_sqrt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sqrt);
  return (f_sqrt(a0));
}
Variant ei_ldap_close(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_close);
  return (f_ldap_close(a0));
}
Variant ei_mcrypt_enc_get_algorithms_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_get_algorithms_name);
  return (f_mcrypt_enc_get_algorithms_name(a0));
}
Variant ei_hphp_splfileobject_rewind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_rewind);
  return (f_hphp_splfileobject_rewind(a0), null);
}
Variant ei_extension_loaded(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(extension_loaded);
  return (f_extension_loaded(a0));
}
Variant ei_fprintf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(fprintf);
  int count = params.size();
  if (count <= 2) return (f_fprintf(count, a0, a1));
  return (f_fprintf(count, a0, a1,vargs));
}
Variant ei_mb_detect_order(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_detect_order);
  int count = params.size();
  if (count <= 0) return (f_mb_detect_order());
  return (f_mb_detect_order(a0));
}
Variant ei_get_magic_quotes_runtime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_magic_quotes_runtime);
  return (f_get_magic_quotes_runtime());
}
Variant ei_magickmapimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmapimage);
  return (f_magickmapimage(a0, a1, a2));
}
Variant ei_pixelsetopacityquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetopacityquantum);
  return (f_pixelsetopacityquantum(a0, a1), null);
}
Variant ei_ctype_space(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ctype_space);
  return (f_ctype_space(a0));
}
Variant ei_mcrypt_generic_init(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_generic_init);
  return (f_mcrypt_generic_init(a0, a1, a2));
}
Variant ei_quoted_printable_decode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(quoted_printable_decode);
  return (f_quoted_printable_decode(a0));
}
Variant ei_destroymagickwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(destroymagickwand);
  return (f_destroymagickwand(a0), null);
}
Variant ei_hphp_splfileinfo_getfileinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getfileinfo);
  return (f_hphp_splfileinfo_getfileinfo(a0, a1));
}
Variant ei_imagerectangle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagerectangle);
  return (f_imagerectangle(a0, a1, a2, a3, a4, a5));
}
Variant ei_get_cfg_var(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_cfg_var);
  return (f_get_cfg_var(a0));
}
Variant ei_pixelgetalphaquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetalphaquantum);
  return (f_pixelgetalphaquantum(a0));
}
Variant ei_magickgetimageblob(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageblob);
  return (f_magickgetimageblob(a0));
}
Variant ei_imagepsextendfont(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepsextendfont);
  return (f_imagepsextendfont(a0, a1));
}
Variant ei_stream_get_filters(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_get_filters);
  return (f_stream_get_filters());
}
Variant ei_magickqueryfontmetrics(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickqueryfontmetrics);
  int count = params.size();
  if (count <= 3) return (f_magickqueryfontmetrics(a0, a1, a2));
  return (f_magickqueryfontmetrics(a0, a1, a2, a3));
}
Variant ei_ispixeliterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ispixeliterator);
  return (f_ispixeliterator(a0));
}
Variant ei_getdate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getdate);
  int count = params.size();
  if (count <= 0) return (f_getdate());
  return (f_getdate(a0));
}
Variant ei_imagefilledarc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefilledarc);
  return (f_imagefilledarc(a0, a1, a2, a3, a4, a5, a6, a7, a8));
}
Variant ei_oci_server_version(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_server_version);
  return (f_oci_server_version(a0));
}
Variant ei_xmlwriter_write_attribute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_attribute);
  return (f_xmlwriter_write_attribute(a0, a1, a2));
}
Variant ei_imagearc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagearc);
  return (f_imagearc(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_drawgetgravity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetgravity);
  return (f_drawgetgravity(a0));
}
Variant ei_magickreadimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickreadimages);
  return (f_magickreadimages(a0, a1));
}
Variant ei_imagecreatefromgd2(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromgd2);
  return (f_imagecreatefromgd2(a0));
}
Variant ei_stream_socket_shutdown(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_socket_shutdown);
  return (f_stream_socket_shutdown(a0, a1));
}
Variant ei_connection_status(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(connection_status);
  return (f_connection_status());
}
Variant ei_pixelresetiterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelresetiterator);
  return (f_pixelresetiterator(a0), null);
}
Variant ei_msg_send(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(msg_send);
  int count = params.size();
  if (count <= 3) return (f_msg_send(a0, a1, a2));
  if (count == 4) return (f_msg_send(a0, a1, a2, a3));
  if (count == 5) return (f_msg_send(a0, a1, a2, a3, a4));
  return (f_msg_send(a0, a1, a2, a3, a4, ref(a5)));
}
Variant ei_getmygid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getmygid);
  return (f_getmygid());
}
Variant ei_array_udiff_uassoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_udiff_uassoc);
  int count = params.size();
  if (count <= 4) return (f_array_udiff_uassoc(count, a0, a1, a2, a3));
  return (f_array_udiff_uassoc(count, a0, a1, a2, a3,vargs));
}
Variant ei_xml_set_character_data_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_set_character_data_handler);
  return (f_xml_set_character_data_handler(a0, a1));
}
Variant ei_array_diff_uassoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(array_diff_uassoc);
  int count = params.size();
  if (count <= 3) return (f_array_diff_uassoc(count, a0, a1, a2));
  return (f_array_diff_uassoc(count, a0, a1, a2,vargs));
}
Variant ei_strptime(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strptime);
  return (f_strptime(a0, a1));
}
Variant ei_pcntl_waitpid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_waitpid);
  int count = params.size();
  if (count <= 2) return (f_pcntl_waitpid(a0, ref(a1)));
  return (f_pcntl_waitpid(a0, ref(a1), a2));
}
Variant ei_gd_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gd_info);
  return (f_gd_info());
}
Variant ei_stream_get_transports(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_get_transports);
  return (f_stream_get_transports());
}
Variant ei_drawsetstrokepatternurl(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokepatternurl);
  return (f_drawsetstrokepatternurl(a0, a1));
}
Variant ei_drawsetfillrule(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfillrule);
  return (f_drawsetfillrule(a0, a1), null);
}
Variant ei_acosh(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(acosh);
  return (f_acosh(a0));
}
Variant ei_ldap_add(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_add);
  return (f_ldap_add(a0, a1, a2));
}
Variant ei_posix_getsid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getsid);
  return (f_posix_getsid(a0));
}
Variant ei_posix_getlogin(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getlogin);
  return (f_posix_getlogin());
}
Variant ei_socket_create_pair(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_create_pair);
  return (f_socket_create_pair(a0, a1, a2, ref(a3)));
}
Variant ei_imagecreate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreate);
  return (f_imagecreate(a0, a1));
}
Variant ei_imagegd2(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagegd2);
  int count = params.size();
  if (count <= 1) return (f_imagegd2(a0));
  if (count == 2) return (f_imagegd2(a0, a1));
  if (count == 3) return (f_imagegd2(a0, a1, a2));
  return (f_imagegd2(a0, a1, a2, a3));
}
Variant ei_openssl_x509_check_private_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_x509_check_private_key);
  return (f_openssl_x509_check_private_key(a0, a1));
}
Variant ei_oci_num_fields(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_num_fields);
  return (f_oci_num_fields(a0));
}
Variant ei_shm_put_var(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shm_put_var);
  return (f_shm_put_var(a0, a1, a2));
}
Variant ei_debug_print_backtrace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(debug_print_backtrace);
  return (f_debug_print_backtrace(), null);
}
Variant ei_hphp_splfileobject_seek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_seek);
  return (f_hphp_splfileobject_seek(a0, a1), null);
}
Variant ei_stream_set_blocking(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_set_blocking);
  return (f_stream_set_blocking(a0, a1));
}
Variant ei_xml_parser_get_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parser_get_option);
  return (f_xml_parser_get_option(a0, a1));
}
Variant ei_ezmlm_hash(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ezmlm_hash);
  return (f_ezmlm_hash(a0));
}
Variant ei_array_search(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_search);
  int count = params.size();
  if (count <= 2) return (f_array_search(a0, a1));
  return (f_array_search(a0, a1, a2));
}
Variant ei_is_int(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_int);
  return (f_is_int(a0));
}
Variant ei_dangling_server_proxy_new_request(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dangling_server_proxy_new_request);
  return (f_dangling_server_proxy_new_request(a0));
}
Variant ei_xmlwriter_end_dtd_entity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_dtd_entity);
  return (f_xmlwriter_end_dtd_entity(a0));
}
Variant ei_trim(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(trim);
  int count = params.size();
  if (count <= 1) return (f_trim(a0));
  return (f_trim(a0, a1));
}
Variant ei_drawpathclose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathclose);
  return (f_drawpathclose(a0), null);
}
Variant ei_magickprofileimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickprofileimage);
  int count = params.size();
  if (count <= 2) return (f_magickprofileimage(a0, a1));
  return (f_magickprofileimage(a0, a1, a2));
}
Variant ei_connection_timeout(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(connection_timeout);
  return (f_connection_timeout());
}
Variant ei_mysql_data_seek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_data_seek);
  return (f_mysql_data_seek(a0, a1));
}
Variant ei_pixelgetindex(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetindex);
  return (f_pixelgetindex(a0));
}
Variant ei_hebrevc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hebrevc);
  int count = params.size();
  if (count <= 1) return (f_hebrevc(a0));
  return (f_hebrevc(a0, a1));
}
Variant ei_get_meta_tags(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_meta_tags);
  int count = params.size();
  if (count <= 1) return (f_get_meta_tags(a0));
  return (f_get_meta_tags(a0, a1));
}
Variant ei_magicknextimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicknextimage);
  return (f_magicknextimage(a0));
}
Variant ei_hphp_recursivedirectoryiterator_key(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_key);
  return (f_hphp_recursivedirectoryiterator_key(a0));
}
Variant ei_mysql_create_db(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_create_db);
  int count = params.size();
  if (count <= 1) return (f_mysql_create_db(a0));
  return (f_mysql_create_db(a0, a1));
}
Variant ei_mysql_stat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_stat);
  int count = params.size();
  if (count <= 0) return (f_mysql_stat());
  return (f_mysql_stat(a0));
}
Variant ei_get_object_vars(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_object_vars);
  return (f_get_object_vars(a0));
}
Variant ei_msg_receive(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(msg_receive);
  int count = params.size();
  if (count <= 5) return (f_msg_receive(a0, a1, ref(a2), a3, ref(a4)));
  if (count == 6) return (f_msg_receive(a0, a1, ref(a2), a3, ref(a4), a5));
  if (count == 7) return (f_msg_receive(a0, a1, ref(a2), a3, ref(a4), a5, a6));
  return (f_msg_receive(a0, a1, ref(a2), a3, ref(a4), a5, a6, ref(a7)));
}
Variant ei_is_integer(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_integer);
  return (f_is_integer(a0));
}
Variant ei_oci_set_prefetch(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_set_prefetch);
  return (f_oci_set_prefetch(a0, a1));
}
Variant ei_posix_getuid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getuid);
  return (f_posix_getuid());
}
Variant ei_imagecreatefromgif(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromgif);
  return (f_imagecreatefromgif(a0));
}
Variant ei_mb_send_mail(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_send_mail);
  int count = params.size();
  if (count <= 3) return (f_mb_send_mail(a0, a1, a2));
  if (count == 4) return (f_mb_send_mail(a0, a1, a2, a3));
  return (f_mb_send_mail(a0, a1, a2, a3, a4));
}
Variant ei_hphp_splfileinfo___construct(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo___construct);
  return (f_hphp_splfileinfo___construct(a0, a1));
}
Variant ei_register_postsend_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(register_postsend_function);
  int count = params.size();
  if (count <= 1) return (f_register_postsend_function(count, a0), null);
  return (f_register_postsend_function(count, a0,vargs), null);
}
Variant ei_getrusage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getrusage);
  int count = params.size();
  if (count <= 0) return (f_getrusage());
  return (f_getrusage(a0));
}
Variant ei_long2ip(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(long2ip);
  return (f_long2ip(a0));
}
Variant ei_evhttp_set_cache(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(evhttp_set_cache);
  int count = params.size();
  if (count <= 2) return (f_evhttp_set_cache(a0, a1), null);
  return (f_evhttp_set_cache(a0, a1, a2), null);
}
Variant ei_magickoilpaintimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickoilpaintimage);
  return (f_magickoilpaintimage(a0, a1));
}
Variant ei_strripos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strripos);
  int count = params.size();
  if (count <= 2) return (f_strripos(a0, a1));
  return (f_strripos(a0, a1, a2));
}
Variant ei_magicksetimagecolormapcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagecolormapcolor);
  return (f_magicksetimagecolormapcolor(a0, a1, a2));
}
Variant ei_magickgetfilename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetfilename);
  return (f_magickgetfilename(a0));
}
Variant ei_magicksetimagegamma(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagegamma);
  return (f_magicksetimagegamma(a0, a1));
}
Variant ei_mysql_pconnect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_pconnect);
  int count = params.size();
  if (count <= 0) return (f_mysql_pconnect());
  if (count == 1) return (f_mysql_pconnect(a0));
  if (count == 2) return (f_mysql_pconnect(a0, a1));
  if (count == 3) return (f_mysql_pconnect(a0, a1, a2));
  if (count == 4) return (f_mysql_pconnect(a0, a1, a2, a3));
  if (count == 5) return (f_mysql_pconnect(a0, a1, a2, a3, a4));
  return (f_mysql_pconnect(a0, a1, a2, a3, a4, a5));
}
Variant ei_stripos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stripos);
  int count = params.size();
  if (count <= 2) return (f_stripos(a0, a1));
  return (f_stripos(a0, a1, a2));
}
Variant ei_http_build_query(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(http_build_query);
  int count = params.size();
  if (count <= 1) return (f_http_build_query(a0));
  if (count == 2) return (f_http_build_query(a0, a1));
  return (f_http_build_query(a0, a1, a2));
}
Variant ei_apc_add(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_add);
  int count = params.size();
  if (count <= 2) return (f_apc_add(a0, a1));
  if (count == 3) return (f_apc_add(a0, a1, a2));
  return (f_apc_add(a0, a1, a2, a3));
}
Variant ei_iconv_strlen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_strlen);
  int count = params.size();
  if (count <= 1) return (f_iconv_strlen(a0));
  return (f_iconv_strlen(a0, a1));
}
Variant ei_vsprintf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(vsprintf);
  return (f_vsprintf(a0, a1));
}
Variant ei_imageistruecolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageistruecolor);
  return (f_imageistruecolor(a0));
}
Variant ei_mailparse_msg_extract_part_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_msg_extract_part_file);
  int count = params.size();
  if (count <= 2) return (f_mailparse_msg_extract_part_file(a0, a1));
  return (f_mailparse_msg_extract_part_file(a0, a1, a2));
}
Variant ei_is_nan(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_nan);
  return (f_is_nan(a0));
}
Variant ei_imagegif(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagegif);
  int count = params.size();
  if (count <= 1) return (f_imagegif(a0));
  return (f_imagegif(a0, a1));
}
Variant ei_eregi_replace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(eregi_replace);
  return (f_eregi_replace(a0, a1, a2));
}
Variant ei_magickgetimageiterations(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimageiterations);
  return (f_magickgetimageiterations(a0));
}
Variant ei_register_tick_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append((*it)->eval(env));
  }
  FUNCTION_INJECTION(register_tick_function);
  int count = params.size();
  if (count <= 1) return (f_register_tick_function(count, a0));
  return (f_register_tick_function(count, a0,vargs));
}
Variant ei_pixelsetblackquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetblackquantum);
  return (f_pixelsetblackquantum(a0, a1), null);
}
Variant ei_jpeg2wbmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(jpeg2wbmp);
  return (f_jpeg2wbmp(a0, a1, a2, a3, a4));
}
Variant ei_mcrypt_get_iv_size(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_get_iv_size);
  return (f_mcrypt_get_iv_size(a0, a1));
}
Variant ei_mysql_fetch_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_fetch_array);
  int count = params.size();
  if (count <= 1) return (f_mysql_fetch_array(a0));
  return (f_mysql_fetch_array(a0, a1));
}
Variant ei_magickpreviousimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickpreviousimage);
  return (f_magickpreviousimage(a0));
}
Variant ei_magickborderimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickborderimage);
  return (f_magickborderimage(a0, a1, a2, a3));
}
Variant ei_mcrypt_module_is_block_mode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_is_block_mode);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_is_block_mode(a0));
  return (f_mcrypt_module_is_block_mode(a0, a1));
}
Variant ei_mb_substr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_substr);
  int count = params.size();
  if (count <= 2) return (f_mb_substr(a0, a1));
  if (count == 3) return (f_mb_substr(a0, a1, a2));
  return (f_mb_substr(a0, a1, a2, a3));
}
Variant ei_get_defined_constants(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_defined_constants);
  int count = params.size();
  if (count <= 0) return (f_get_defined_constants());
  return (f_get_defined_constants(a0));
}
Variant ei_mcrypt_enc_is_block_mode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_enc_is_block_mode);
  return (f_mcrypt_enc_is_block_mode(a0));
}
Variant ei_mailparse_stream_encode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mailparse_stream_encode);
  return (f_mailparse_stream_encode(a0, a1, a2));
}
Variant ei_drawsetstrokedashoffset(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokedashoffset);
  return (f_drawsetstrokedashoffset(a0, a1), null);
}
Variant ei_php_ini_scanned_files(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(php_ini_scanned_files);
  return (f_php_ini_scanned_files());
}
Variant ei_disk_free_space(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(disk_free_space);
  return (f_disk_free_space(a0));
}
Variant ei_pixelsetyellowquantum(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetyellowquantum);
  return (f_pixelsetyellowquantum(a0, a1), null);
}
Variant ei_openssl_public_decrypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_public_decrypt);
  int count = params.size();
  if (count <= 3) return (f_openssl_public_decrypt(a0, ref(a1), a2));
  return (f_openssl_public_decrypt(a0, ref(a1), a2, a3));
}
Variant ei_convert_uuencode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(convert_uuencode);
  return (f_convert_uuencode(a0));
}
Variant ei_magickequalizeimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickequalizeimage);
  return (f_magickequalizeimage(a0));
}
Variant ei_mysql_field_len(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_field_len);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_len(a0));
  return (f_mysql_field_len(a0, a1));
}
Variant ei_drawsetclipunits(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetclipunits);
  return (f_drawsetclipunits(a0, a1), null);
}
Variant ei_mdecrypt_generic(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mdecrypt_generic);
  return (f_mdecrypt_generic(a0, a1));
}
Variant ei_getprotobyname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getprotobyname);
  return (f_getprotobyname(a0));
}
Variant ei_xmlwriter_start_pi(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_pi);
  return (f_xmlwriter_start_pi(a0, a1));
}
Variant ei_mysql_field_type(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_field_type);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_type(a0));
  return (f_mysql_field_type(a0, a1));
}
Variant ei_apc_cas(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_cas);
  int count = params.size();
  if (count <= 3) return (f_apc_cas(a0, a1, a2));
  return (f_apc_cas(a0, a1, a2, a3));
}
Variant ei_getopt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getopt);
  int count = params.size();
  if (count <= 1) return (f_getopt(a0));
  return (f_getopt(a0, a1));
}
Variant ei_clearpixelwand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(clearpixelwand);
  return (f_clearpixelwand(a0), null);
}
Variant ei_drawsetgravity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetgravity);
  return (f_drawsetgravity(a0, a1), null);
}
Variant ei_magickgetimagecompressionquality(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagecompressionquality);
  return (f_magickgetimagecompressionquality(a0));
}
Variant ei_magickquantizeimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickquantizeimages);
  return (f_magickquantizeimages(a0, a1, a2, a3, a4, a5));
}
Variant ei_mysql_insert_id(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_insert_id);
  int count = params.size();
  if (count <= 0) return (f_mysql_insert_id());
  return (f_mysql_insert_id(a0));
}
Variant ei_hphp_thread_set_warmup_enabled(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_thread_set_warmup_enabled);
  return (f_hphp_thread_set_warmup_enabled(), null);
}
Variant ei_stream_context_set_param(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_context_set_param);
  return (f_stream_context_set_param(a0, a1));
}
Variant ei_drawpathlinetohorizontalabsolute(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathlinetohorizontalabsolute);
  return (f_drawpathlinetohorizontalabsolute(a0, a1), null);
}
Variant ei_openssl_csr_export(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_csr_export);
  int count = params.size();
  if (count <= 2) return (f_openssl_csr_export(a0, ref(a1)));
  return (f_openssl_csr_export(a0, ref(a1), a2));
}
Variant ei_socket_connect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_connect);
  int count = params.size();
  if (count <= 2) return (f_socket_connect(a0, a1));
  return (f_socket_connect(a0, a1, a2));
}
Variant ei_stripslashes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stripslashes);
  return (f_stripslashes(a0));
}
Variant ei_magickhaspreviousimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickhaspreviousimage);
  return (f_magickhaspreviousimage(a0));
}
Variant ei_drawgetstrokecolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgetstrokecolor);
  return (f_drawgetstrokecolor(a0));
}
Variant ei_imagecreatefromwbmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromwbmp);
  return (f_imagecreatefromwbmp(a0));
}
Variant ei_str_repeat(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_repeat);
  return (f_str_repeat(a0, a1));
}
Variant ei_stream_resolve_include_path(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_resolve_include_path);
  int count = params.size();
  if (count <= 1) return (f_stream_resolve_include_path(a0));
  return (f_stream_resolve_include_path(a0, a1));
}
Variant ei_ldap_read(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_read);
  int count = params.size();
  if (count <= 3) return (f_ldap_read(a0, a1, a2));
  if (count == 4) return (f_ldap_read(a0, a1, a2, a3));
  if (count == 5) return (f_ldap_read(a0, a1, a2, a3, a4));
  if (count == 6) return (f_ldap_read(a0, a1, a2, a3, a4, a5));
  if (count == 7) return (f_ldap_read(a0, a1, a2, a3, a4, a5, a6));
  return (f_ldap_read(a0, a1, a2, a3, a4, a5, a6, a7));
}
Variant ei_apc_dec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_dec);
  int count = params.size();
  if (count <= 1) return (f_apc_dec(a0));
  if (count == 2) return (f_apc_dec(a0, a1));
  if (count == 3) return (f_apc_dec(a0, a1, ref(a2)));
  return (f_apc_dec(a0, a1, ref(a2), a3));
}
Variant ei_posix_get_last_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_get_last_error);
  return (f_posix_get_last_error());
}
Variant ei_iptcparse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iptcparse);
  return (f_iptcparse(a0));
}
Variant ei_socket_recvfrom(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a5 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_recvfrom);
  int count = params.size();
  if (count <= 5) return (f_socket_recvfrom(a0, ref(a1), a2, a3, ref(a4)));
  return (f_socket_recvfrom(a0, ref(a1), a2, a3, ref(a4), ref(a5)));
}
Variant ei_curl_setopt_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_setopt_array);
  return (f_curl_setopt_array(a0, a1));
}
Variant ei_imagepstext(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  Variant a9;
  Variant a10;
  Variant a11;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a9 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a10 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a11 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepstext);
  int count = params.size();
  if (count <= 8) return (f_imagepstext(a0, a1, a2, a3, a4, a5, a6, a7));
  if (count == 9) return (f_imagepstext(a0, a1, a2, a3, a4, a5, a6, a7, a8));
  if (count == 10) return (f_imagepstext(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
  if (count == 11) return (f_imagepstext(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
  return (f_imagepstext(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
}
Variant ei_mb_encode_mimeheader(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_encode_mimeheader);
  int count = params.size();
  if (count <= 1) return (f_mb_encode_mimeheader(a0));
  if (count == 2) return (f_mb_encode_mimeheader(a0, a1));
  if (count == 3) return (f_mb_encode_mimeheader(a0, a1, a2));
  if (count == 4) return (f_mb_encode_mimeheader(a0, a1, a2, a3));
  return (f_mb_encode_mimeheader(a0, a1, a2, a3, a4));
}
Variant ei_socket_getsockname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_getsockname);
  int count = params.size();
  if (count <= 2) return (f_socket_getsockname(a0, ref(a1)));
  return (f_socket_getsockname(a0, ref(a1), ref(a2)));
}
Variant ei_imagecreatefromstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromstring);
  return (f_imagecreatefromstring(a0));
}
Variant ei_vfprintf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(vfprintf);
  return (f_vfprintf(a0, a1, a2));
}
Variant ei_magickcompareimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickcompareimages);
  int count = params.size();
  if (count <= 3) return (f_magickcompareimages(a0, a1, a2));
  return (f_magickcompareimages(a0, a1, a2, a3));
}
Variant ei_fscanf(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  Array vargs;
  for (; it != params.end(); ++it) {
    vargs.append(ref((*it)->refval(env)));
  }
  FUNCTION_INJECTION(fscanf);
  int count = params.size();
  if (count <= 2) return (f_fscanf(count, a0, a1));
  return (f_fscanf(count, a0, a1,vargs));
}
Variant ei_stristr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stristr);
  return (f_stristr(a0, a1));
}
Variant ei_xml_parser_set_option(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xml_parser_set_option);
  return (f_xml_parser_set_option(a0, a1, a2));
}
Variant ei_magicksetimageinterlacescheme(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimageinterlacescheme);
  return (f_magicksetimageinterlacescheme(a0, a1));
}
Variant ei_destroypixeliterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(destroypixeliterator);
  return (f_destroypixeliterator(a0), null);
}
Variant ei_magicksetimagetype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagetype);
  return (f_magicksetimagetype(a0, a1));
}
Variant ei_hphp_recursiveiteratoriterator_getinneriterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_getinneriterator);
  return (f_hphp_recursiveiteratoriterator_getinneriterator(a0));
}
Variant ei_date_sunrise(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_sunrise);
  int count = params.size();
  if (count <= 1) return (f_date_sunrise(a0));
  if (count == 2) return (f_date_sunrise(a0, a1));
  if (count == 3) return (f_date_sunrise(a0, a1, a2));
  if (count == 4) return (f_date_sunrise(a0, a1, a2, a3));
  if (count == 5) return (f_date_sunrise(a0, a1, a2, a3, a4));
  return (f_date_sunrise(a0, a1, a2, a3, a4, a5));
}
Variant ei_magickgethomeurl(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgethomeurl);
  return (f_magickgethomeurl());
}
Variant ei_mb_detect_encoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_detect_encoding);
  int count = params.size();
  if (count <= 1) return (f_mb_detect_encoding(a0));
  if (count == 2) return (f_mb_detect_encoding(a0, a1));
  return (f_mb_detect_encoding(a0, a1, a2));
}
Variant ei_wandhasexception(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(wandhasexception);
  return (f_wandhasexception(a0));
}
Variant ei_error_reporting(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(error_reporting);
  int count = params.size();
  if (count <= 0) return (f_error_reporting());
  return (f_error_reporting(a0));
}
Variant ei_imagepalettecopy(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepalettecopy);
  return (f_imagepalettecopy(a0, a1), null);
}
Variant ei_hphp_splfileinfo_isexecutable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_isexecutable);
  return (f_hphp_splfileinfo_isexecutable(a0));
}
Variant ei_rename_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rename_function);
  return (f_rename_function(a0, a1));
}
Variant ei_gzcompress(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzcompress);
  int count = params.size();
  if (count <= 1) return (f_gzcompress(a0));
  return (f_gzcompress(a0, a1));
}
Variant ei_gzeof(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzeof);
  return (f_gzeof(a0));
}
Variant ei_bcadd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcadd);
  int count = params.size();
  if (count <= 2) return (f_bcadd(a0, a1));
  return (f_bcadd(a0, a1, a2));
}
Variant ei_curl_setopt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_setopt);
  return (f_curl_setopt(a0, a1, a2));
}
Variant ei_imagealphablending(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagealphablending);
  return (f_imagealphablending(a0, a1));
}
Variant ei_pixelgetmagenta(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetmagenta);
  return (f_pixelgetmagenta(a0));
}
Variant ei_drawannotation(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawannotation);
  return (f_drawannotation(a0, a1, a2, a3), null);
}
Variant ei_getmypid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getmypid);
  return (f_getmypid());
}
Variant ei_magicksetimagedispose(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagedispose);
  return (f_magicksetimagedispose(a0, a1));
}
Variant ei_drawsetfontsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfontsize);
  return (f_drawsetfontsize(a0, a1), null);
}
Variant ei_gethostbyname(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gethostbyname);
  return (f_gethostbyname(a0));
}
Variant ei_stream_wrapper_restore(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_wrapper_restore);
  return (f_stream_wrapper_restore(a0));
}
Variant ei_magickgetimagecompression(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagecompression);
  return (f_magickgetimagecompression(a0));
}
Variant ei_hphp_invoke_method(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_invoke_method);
  return (f_hphp_invoke_method(a0, a1, a2, a3));
}
Variant ei_date_offset_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_offset_get);
  return (f_date_offset_get(a0));
}
Variant ei_pixelgetiteratorexception(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetiteratorexception);
  return (f_pixelgetiteratorexception(a0));
}
Variant ei_mysql_field_flags(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_field_flags);
  int count = params.size();
  if (count <= 1) return (f_mysql_field_flags(a0));
  return (f_mysql_field_flags(a0, a1));
}
Variant ei_linkinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(linkinfo);
  return (f_linkinfo(a0));
}
Variant ei_strchr(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strchr);
  return (f_strchr(a0, a1));
}
Variant ei_magickqueryformats(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickqueryformats);
  return (f_magickqueryformats(a0));
}
Variant ei_date_time_set(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_time_set);
  int count = params.size();
  if (count <= 3) return (f_date_time_set(a0, a1, a2), null);
  return (f_date_time_set(a0, a1, a2, a3), null);
}
Variant ei_iconv_strpos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iconv_strpos);
  int count = params.size();
  if (count <= 2) return (f_iconv_strpos(a0, a1));
  if (count == 3) return (f_iconv_strpos(a0, a1, a2));
  return (f_iconv_strpos(a0, a1, a2, a3));
}
Variant ei_i18n_loc_set_strength(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(i18n_loc_set_strength);
  return (f_i18n_loc_set_strength(a0));
}
Variant ei_magickgetimagebordercolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagebordercolor);
  return (f_magickgetimagebordercolor(a0));
}
Variant ei_ob_end_clean(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ob_end_clean);
  return (f_ob_end_clean());
}
Variant ei_trigger_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(trigger_error);
  int count = params.size();
  if (count <= 1) return (f_trigger_error(a0));
  return (f_trigger_error(a0, a1));
}
Variant ei_pcntl_getpriority(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pcntl_getpriority);
  int count = params.size();
  if (count <= 0) return (f_pcntl_getpriority());
  if (count == 1) return (f_pcntl_getpriority(a0));
  return (f_pcntl_getpriority(a0, a1));
}
Variant ei_date_default_timezone_get(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_default_timezone_get);
  return (f_date_default_timezone_get());
}
Variant ei_strcmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strcmp);
  return (f_strcmp(a0, a1));
}
Variant ei_hphp_recursivedirectoryiterator_haschildren(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursivedirectoryiterator_haschildren);
  return (f_hphp_recursivedirectoryiterator_haschildren(a0));
}
Variant ei_hphp_instanceof(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_instanceof);
  return (f_hphp_instanceof(a0, a1));
}
Variant ei_import_request_variables(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(import_request_variables);
  int count = params.size();
  if (count <= 1) return (f_import_request_variables(a0));
  return (f_import_request_variables(a0, a1));
}
Variant ei_magickgetpackagename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetpackagename);
  return (f_magickgetpackagename());
}
Variant ei_destroypixelwandarray(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(destroypixelwandarray);
  return (f_destroypixelwandarray(a0), null);
}
Variant ei_spliti(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(spliti);
  int count = params.size();
  if (count <= 2) return (f_spliti(a0, a1));
  return (f_spliti(a0, a1, a2));
}
Variant ei_posix_setgid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_setgid);
  return (f_posix_setgid(a0));
}
Variant ei_is_double(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_double);
  return (f_is_double(a0));
}
Variant ei_output_reset_rewrite_vars(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(output_reset_rewrite_vars);
  return (f_output_reset_rewrite_vars());
}
Variant ei_get_declared_interfaces(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(get_declared_interfaces);
  return (f_get_declared_interfaces());
}
Variant ei_passthru(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(passthru);
  int count = params.size();
  if (count <= 1) return (f_passthru(a0), null);
  return (f_passthru(a0, ref(a1)), null);
}
Variant ei_magickmontageimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmontageimage);
  return (f_magickmontageimage(a0, a1, a2, a3, a4, a5));
}
Variant ei_apc_cache_info(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_cache_info);
  int count = params.size();
  if (count <= 0) return (f_apc_cache_info());
  if (count == 1) return (f_apc_cache_info(a0));
  return (f_apc_cache_info(a0, a1));
}
Variant ei_convert_cyr_string(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(convert_cyr_string);
  return (f_convert_cyr_string(a0, a1, a2));
}
Variant ei_libxml_get_last_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(libxml_get_last_error);
  return (f_libxml_get_last_error());
}
Variant ei_sys_get_temp_dir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sys_get_temp_dir);
  return (f_sys_get_temp_dir());
}
Variant ei_drawline(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawline);
  return (f_drawline(a0, a1, a2, a3, a4), null);
}
Variant ei_drawsetfillcolor(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfillcolor);
  return (f_drawsetfillcolor(a0, a1), null);
}
Variant ei_gzopen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzopen);
  int count = params.size();
  if (count <= 2) return (f_gzopen(a0, a1));
  return (f_gzopen(a0, a1, a2));
}
Variant ei_getservbyport(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getservbyport);
  return (f_getservbyport(a0, a1));
}
Variant ei_hphp_splfileinfo_getfilename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getfilename);
  return (f_hphp_splfileinfo_getfilename(a0));
}
Variant ei_stripcslashes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stripcslashes);
  return (f_stripcslashes(a0));
}
Variant ei_curl_multi_add_handle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_add_handle);
  return (f_curl_multi_add_handle(a0, a1));
}
Variant ei_ldap_free_result(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_free_result);
  return (f_ldap_free_result(a0));
}
Variant ei_xmlwriter_end_pi(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_end_pi);
  return (f_xmlwriter_end_pi(a0));
}
Variant ei_imagewbmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagewbmp);
  int count = params.size();
  if (count <= 1) return (f_imagewbmp(a0));
  if (count == 2) return (f_imagewbmp(a0, a1));
  return (f_imagewbmp(a0, a1, a2));
}
Variant ei_socket_set_nonblock(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_set_nonblock);
  return (f_socket_set_nonblock(a0));
}
Variant ei_shm_get_var(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shm_get_var);
  return (f_shm_get_var(a0, a1));
}
Variant ei_magickgetmimetype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetmimetype);
  return (f_magickgetmimetype(a0));
}
Variant ei_mysql_fetch_assoc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_fetch_assoc);
  return (f_mysql_fetch_assoc(a0));
}
Variant ei_array_filter(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_filter);
  int count = params.size();
  if (count <= 1) return (f_array_filter(a0));
  return (f_array_filter(a0, a1));
}
Variant ei_mysql_query(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_query);
  int count = params.size();
  if (count <= 1) return (f_mysql_query(a0));
  return (f_mysql_query(a0, a1));
}
Variant ei_crypt(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(crypt);
  int count = params.size();
  if (count <= 1) return (f_crypt(a0));
  return (f_crypt(a0, a1));
}
Variant ei_xmlwriter_start_cdata(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_cdata);
  return (f_xmlwriter_start_cdata(a0));
}
Variant ei_fgetc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fgetc);
  return (f_fgetc(a0));
}
Variant ei_move_uploaded_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(move_uploaded_file);
  return (f_move_uploaded_file(a0, a1));
}
Variant ei_hphp_splfileobject_flock(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileobject_flock);
  return (f_hphp_splfileobject_flock(a0, ref(a1)));
}
Variant ei_imagecopyresampled(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  Variant a9;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a9 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecopyresampled);
  return (f_imagecopyresampled(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
}
Variant ei_imagecreatefrompng(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefrompng);
  return (f_imagecreatefrompng(a0));
}
Variant ei_magickgetimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimage);
  return (f_magickgetimage(a0));
}
Variant ei_imagesettile(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesettile);
  return (f_imagesettile(a0, a1));
}
Variant ei_hphp_recursiveiteratoriterator_valid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_recursiveiteratoriterator_valid);
  return (f_hphp_recursiveiteratoriterator_valid(a0));
}
Variant ei_fgets(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fgets);
  int count = params.size();
  if (count <= 1) return (f_fgets(a0));
  return (f_fgets(a0, a1));
}
Variant ei_tempnam(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(tempnam);
  return (f_tempnam(a0, a1));
}
Variant ei_bcdiv(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(bcdiv);
  int count = params.size();
  if (count <= 2) return (f_bcdiv(a0, a1));
  return (f_bcdiv(a0, a1, a2));
}
Variant ei_hphp_splfileinfo_getbasename(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_splfileinfo_getbasename);
  return (f_hphp_splfileinfo_getbasename(a0, a1));
}
Variant ei_rsort(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rsort);
  int count = params.size();
  if (count <= 1) return (f_rsort(ref(a0)));
  if (count == 2) return (f_rsort(ref(a0), a1));
  return (f_rsort(ref(a0), a1, a2));
}
Variant ei_drawgettextdecoration(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgettextdecoration);
  return (f_drawgettextdecoration(a0));
}
Variant ei_strtolower(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strtolower);
  return (f_strtolower(a0));
}
Variant ei_oci_field_name(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_field_name);
  return (f_oci_field_name(a0, a1));
}
Variant ei_posix_getgrgid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getgrgid);
  return (f_posix_getgrgid(a0));
}
Variant ei_apc_inc(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_inc);
  int count = params.size();
  if (count <= 1) return (f_apc_inc(a0));
  if (count == 2) return (f_apc_inc(a0, a1));
  if (count == 3) return (f_apc_inc(a0, a1, ref(a2)));
  return (f_apc_inc(a0, a1, ref(a2), a3));
}
Variant ei_hphp_create_object(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_create_object);
  return (f_hphp_create_object(a0, a1));
}
Variant ei_hexdec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hexdec);
  return (f_hexdec(a0));
}
Variant ei_imagefttext(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  Variant a8;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a8 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefttext);
  int count = params.size();
  if (count <= 8) return (f_imagefttext(a0, a1, a2, a3, a4, a5, a6, a7));
  return (f_imagefttext(a0, a1, a2, a3, a4, a5, a6, a7, a8));
}
Variant ei_xhprof_sample_disable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xhprof_sample_disable);
  return (f_xhprof_sample_disable());
}
Variant ei_ldap_compare(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(ldap_compare);
  return (f_ldap_compare(a0, a1, a2, a3));
}
Variant ei_dns_get_record(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a3 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dns_get_record);
  int count = params.size();
  if (count <= 1) return (f_dns_get_record(a0));
  if (count == 2) return (f_dns_get_record(a0, a1));
  if (count == 3) return (f_dns_get_record(a0, a1, ref(a2)));
  return (f_dns_get_record(a0, a1, ref(a2), ref(a3)));
}
Variant ei_openssl_get_privatekey(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_get_privatekey);
  int count = params.size();
  if (count <= 1) return (f_openssl_get_privatekey(a0));
  return (f_openssl_get_privatekey(a0, a1));
}
Variant ei_socket_bind(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_bind);
  int count = params.size();
  if (count <= 2) return (f_socket_bind(a0, a1));
  return (f_socket_bind(a0, a1, a2));
}
Variant ei_imagepng(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagepng);
  int count = params.size();
  if (count <= 1) return (f_imagepng(a0));
  if (count == 2) return (f_imagepng(a0, a1));
  if (count == 3) return (f_imagepng(a0, a1, a2));
  return (f_imagepng(a0, a1, a2, a3));
}
Variant ei_getmyuid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getmyuid);
  return (f_getmyuid());
}
Variant ei_pixelgetopacity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetopacity);
  return (f_pixelgetopacity(a0));
}
Variant ei_drawsetstrokelinecap(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetstrokelinecap);
  return (f_drawsetstrokelinecap(a0, a1), null);
}
Variant ei_xmlwriter_write_attribute_ns(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_write_attribute_ns);
  return (f_xmlwriter_write_attribute_ns(a0, a1, a2, a3, a4));
}
Variant ei_array_keys(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_keys);
  int count = params.size();
  if (count <= 1) return (f_array_keys(a0));
  if (count == 2) return (f_array_keys(a0, a1));
  return (f_array_keys(a0, a1, a2));
}
Variant ei_call_user_method_array(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(call_user_method_array);
  return (f_call_user_method_array(a0, ref(a1), a2));
}
Variant ei_magickmagnifyimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmagnifyimage);
  return (f_magickmagnifyimage(a0));
}
Variant ei_is_bool(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_bool);
  return (f_is_bool(a0));
}
Variant ei_magickgetimagegreenprimary(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetimagegreenprimary);
  return (f_magickgetimagegreenprimary(a0));
}
Variant ei_filegroup(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(filegroup);
  return (f_filegroup(a0));
}
Variant ei_gzread(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzread);
  int count = params.size();
  if (count <= 1) return (f_gzread(a0));
  return (f_gzread(a0, a1));
}
Variant ei_drawpathellipticarcrelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  Variant a6;
  Variant a7;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a6 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a7 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathellipticarcrelative);
  return (f_drawpathellipticarcrelative(a0, a1, a2, a3, a4, a5, a6, a7), null);
}
Variant ei_openssl_csr_export_to_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_csr_export_to_file);
  int count = params.size();
  if (count <= 2) return (f_openssl_csr_export_to_file(a0, a1));
  return (f_openssl_csr_export_to_file(a0, a1, a2));
}
Variant ei_oci_fetch_row(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_fetch_row);
  return (f_oci_fetch_row(a0));
}
Variant ei_magicksetimagecolorspace(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetimagecolorspace);
  return (f_magicksetimagecolorspace(a0, a1));
}
Variant ei_nl_langinfo(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(nl_langinfo);
  return (f_nl_langinfo(a0));
}
Variant ei_hphp_get_stats(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_get_stats);
  return (f_hphp_get_stats(a0));
}
Variant ei_strncmp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strncmp);
  return (f_strncmp(a0, a1, a2));
}
Variant ei_mb_regex_set_options(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_regex_set_options);
  int count = params.size();
  if (count <= 0) return (f_mb_regex_set_options());
  return (f_mb_regex_set_options(a0));
}
Variant ei_pixelsetmagenta(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetmagenta);
  return (f_pixelsetmagenta(a0, a1), null);
}
Variant ei_magickdeconstructimages(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickdeconstructimages);
  return (f_magickdeconstructimages(a0));
}
Variant ei_xbox_task_status(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xbox_task_status);
  return (f_xbox_task_status(a0));
}
Variant ei_openssl_open(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_open);
  return (f_openssl_open(a0, ref(a1), a2, a3));
}
Variant ei_apc_bin_load(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_bin_load);
  int count = params.size();
  if (count <= 1) return (f_apc_bin_load(a0));
  if (count == 2) return (f_apc_bin_load(a0, a1));
  return (f_apc_bin_load(a0, a1, a2));
}
Variant ei_current(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(current);
  return (f_current(ref(a0)));
}
Variant ei_stream_register_wrapper(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(stream_register_wrapper);
  return (f_stream_register_wrapper(a0, a1));
}
Variant ei_hphp_stats(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(hphp_stats);
  return (f_hphp_stats(a0, a1), null);
}
Variant ei_opendir(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(opendir);
  int count = params.size();
  if (count <= 1) return (f_opendir(a0));
  return (f_opendir(a0, a1));
}
Variant ei_magickgetexceptionstring(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetexceptionstring);
  return (f_magickgetexceptionstring(a0));
}
Variant ei_mcrypt_module_is_block_algorithm_mode(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mcrypt_module_is_block_algorithm_mode);
  int count = params.size();
  if (count <= 1) return (f_mcrypt_module_is_block_algorithm_mode(a0));
  return (f_mcrypt_module_is_block_algorithm_mode(a0, a1));
}
Variant ei_posix_setpgid(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_setpgid);
  return (f_posix_setpgid(a0, a1));
}
Variant ei_dns_get_mx(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dns_get_mx);
  int count = params.size();
  if (count <= 2) return (f_dns_get_mx(a0, ref(a1)));
  return (f_dns_get_mx(a0, ref(a1), ref(a2)));
}
Variant ei_escapeshellarg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(escapeshellarg);
  return (f_escapeshellarg(a0));
}
Variant ei_headers_list(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(headers_list);
  return (f_headers_list());
}
Variant ei_is_scalar(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_scalar);
  return (f_is_scalar(a0));
}
Variant ei_acos(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(acos);
  return (f_acos(a0));
}
Variant ei_oci_internal_debug(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_internal_debug);
  return (f_oci_internal_debug(a0), null);
}
Variant ei_drawgettextencoding(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawgettextencoding);
  return (f_drawgettextencoding(a0));
}
Variant ei_filetype(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(filetype);
  return (f_filetype(a0));
}
Variant ei_magicksetresolution(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetresolution);
  return (f_magicksetresolution(a0, a1, a2));
}
Variant ei_posix_isatty(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_isatty);
  return (f_posix_isatty(a0));
}
Variant ei_escapeshellcmd(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(escapeshellcmd);
  return (f_escapeshellcmd(a0));
}
Variant ei_apc_store(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apc_store);
  int count = params.size();
  if (count <= 2) return (f_apc_store(a0, a1));
  if (count == 3) return (f_apc_store(a0, a1, a2));
  return (f_apc_store(a0, a1, a2, a3));
}
Variant ei_magickresetiterator(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickresetiterator);
  return (f_magickresetiterator(a0), null);
}
Variant ei_apache_lookup_uri(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(apache_lookup_uri);
  return (f_apache_lookup_uri(a0));
}
Variant ei_magickmotionblurimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickmotionblurimage);
  return (f_magickmotionblurimage(a0, a1, a2, a3));
}
Variant ei_magicksetwandsize(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicksetwandsize);
  return (f_magicksetwandsize(a0, a1, a2));
}
Variant ei_number_format(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(number_format);
  int count = params.size();
  if (count <= 1) return (f_number_format(a0));
  if (count == 2) return (f_number_format(a0, a1));
  if (count == 3) return (f_number_format(a0, a1, a2));
  return (f_number_format(a0, a1, a2, a3));
}
Variant ei_array_reduce(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(array_reduce);
  int count = params.size();
  if (count <= 2) return (f_array_reduce(a0, a1));
  return (f_array_reduce(a0, a1, a2));
}
Variant ei_xmlwriter_start_dtd_attlist(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_start_dtd_attlist);
  return (f_xmlwriter_start_dtd_attlist(a0, a1));
}
Variant ei_constant(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(constant);
  return (f_constant(a0));
}
Variant ei_strlen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(strlen);
  return (f_strlen(a0));
}
Variant ei_srand(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(srand);
  int count = params.size();
  if (count <= 0) return (f_srand(), null);
  return (f_srand(a0), null);
}
Variant ei_mysql_fetch_object(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_fetch_object);
  int count = params.size();
  if (count <= 1) return (f_mysql_fetch_object(a0));
  if (count == 2) return (f_mysql_fetch_object(a0, a1));
  return (f_mysql_fetch_object(a0, a1, a2));
}
Variant ei_drawpathlinetoverticalrelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathlinetoverticalrelative);
  return (f_drawpathlinetoverticalrelative(a0, a1), null);
}
Variant ei_magickminifyimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickminifyimage);
  return (f_magickminifyimage(a0));
}
Variant ei_date_sunset(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_sunset);
  int count = params.size();
  if (count <= 1) return (f_date_sunset(a0));
  if (count == 2) return (f_date_sunset(a0, a1));
  if (count == 3) return (f_date_sunset(a0, a1, a2));
  if (count == 4) return (f_date_sunset(a0, a1, a2, a3));
  if (count == 5) return (f_date_sunset(a0, a1, a2, a3, a4));
  return (f_date_sunset(a0, a1, a2, a3, a4, a5));
}
Variant ei_symlink(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(symlink);
  return (f_symlink(a0, a1));
}
Variant ei_imagesetpixel(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagesetpixel);
  return (f_imagesetpixel(a0, a1, a2, a3));
}
Variant ei_split(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(split);
  int count = params.size();
  if (count <= 2) return (f_split(a0, a1));
  return (f_split(a0, a1, a2));
}
Variant ei_drawsetfontstyle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawsetfontstyle);
  return (f_drawsetfontstyle(a0, a1), null);
}
Variant ei_imagecreatefromxbm(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromxbm);
  return (f_imagecreatefromxbm(a0));
}
Variant ei_mysql_db_query(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_db_query);
  int count = params.size();
  if (count <= 2) return (f_mysql_db_query(a0, a1));
  return (f_mysql_db_query(a0, a1, a2));
}
Variant ei_imagecolorclosestalpha(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecolorclosestalpha);
  return (f_imagecolorclosestalpha(a0, a1, a2, a3, a4));
}
Variant ei_gzuncompress(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzuncompress);
  int count = params.size();
  if (count <= 1) return (f_gzuncompress(a0));
  return (f_gzuncompress(a0, a1));
}
Variant ei_is_executable(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_executable);
  return (f_is_executable(a0));
}
Variant ei_socket_create_listen(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_create_listen);
  int count = params.size();
  if (count <= 1) return (f_socket_create_listen(a0));
  return (f_socket_create_listen(a0, a1));
}
Variant ei_pixelgetcolorcount(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelgetcolorcount);
  return (f_pixelgetcolorcount(a0));
}
Variant ei_magickqueryconfigureoptions(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickqueryconfigureoptions);
  return (f_magickqueryconfigureoptions(a0));
}
Variant ei_iptcembed(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(iptcembed);
  int count = params.size();
  if (count <= 2) return (f_iptcembed(a0, a1));
  return (f_iptcembed(a0, a1, a2));
}
Variant ei_posix_getgrnam(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(posix_getgrnam);
  return (f_posix_getgrnam(a0));
}
Variant ei_rtrim(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(rtrim);
  int count = params.size();
  if (count <= 1) return (f_rtrim(a0));
  return (f_rtrim(a0, a1));
}
Variant ei_print_r(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(print_r);
  int count = params.size();
  if (count <= 1) return (f_print_r(a0));
  return (f_print_r(a0, a1));
}
Variant ei_drawpathcurvetoquadraticbeziersmoothrelative(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpathcurvetoquadraticbeziersmoothrelative);
  return (f_drawpathcurvetoquadraticbeziersmoothrelative(a0, a1, a2), null);
}
Variant ei_openssl_pkey_export(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_export);
  int count = params.size();
  if (count <= 2) return (f_openssl_pkey_export(a0, ref(a1)));
  if (count == 3) return (f_openssl_pkey_export(a0, ref(a1), a2));
  return (f_openssl_pkey_export(a0, ref(a1), a2, a3));
}
Variant ei_abs(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(abs);
  return (f_abs(a0));
}
Variant ei_shell_exec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(shell_exec);
  return (f_shell_exec(a0));
}
Variant ei_restore_exception_handler(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(restore_exception_handler);
  return (f_restore_exception_handler());
}
Variant ei_curl_multi_exec(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = ref((*it)->refval(env));
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(curl_multi_exec);
  return (f_curl_multi_exec(a0, ref(a1)));
}
Variant ei_htmlspecialchars(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(htmlspecialchars);
  int count = params.size();
  if (count <= 1) return (f_htmlspecialchars(a0));
  if (count == 2) return (f_htmlspecialchars(a0, a1));
  if (count == 3) return (f_htmlspecialchars(a0, a1, a2));
  return (f_htmlspecialchars(a0, a1, a2, a3));
}
Variant ei_imagexbm(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagexbm);
  int count = params.size();
  if (count <= 1) return (f_imagexbm(a0));
  if (count == 2) return (f_imagexbm(a0, a1));
  return (f_imagexbm(a0, a1, a2));
}
Variant ei_magickgetreleasedate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetreleasedate);
  return (f_magickgetreleasedate());
}
Variant ei_sem_remove(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(sem_remove);
  return (f_sem_remove(a0));
}
Variant ei_imageellipse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imageellipse);
  return (f_imageellipse(a0, a1, a2, a3, a4, a5));
}
Variant ei_getprotobynumber(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(getprotobynumber);
  return (f_getprotobynumber(a0));
}
Variant ei_pixelsetopacity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(pixelsetopacity);
  return (f_pixelsetopacity(a0, a1), null);
}
Variant ei_lchgrp(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(lchgrp);
  return (f_lchgrp(a0, a1));
}
Variant ei_simplexml_load_file(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(simplexml_load_file);
  int count = params.size();
  if (count <= 1) return (f_simplexml_load_file(a0));
  if (count == 2) return (f_simplexml_load_file(a0, a1));
  if (count == 3) return (f_simplexml_load_file(a0, a1, a2));
  if (count == 4) return (f_simplexml_load_file(a0, a1, a2, a3));
  return (f_simplexml_load_file(a0, a1, a2, a3, a4));
}
Variant ei_openssl_pkey_get_details(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_pkey_get_details);
  return (f_openssl_pkey_get_details(a0));
}
Variant ei_imagetypes(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagetypes);
  return (f_imagetypes());
}
Variant ei_gzseek(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzseek);
  int count = params.size();
  if (count <= 2) return (f_gzseek(a0, a1));
  return (f_gzseek(a0, a1, a2));
}
Variant ei_magickgetmaxtextadvance(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magickgetmaxtextadvance);
  int count = params.size();
  if (count <= 3) return (f_magickgetmaxtextadvance(a0, a1, a2));
  return (f_magickgetmaxtextadvance(a0, a1, a2, a3));
}
Variant ei_func_get_arg(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(func_get_arg);
  return (f_func_get_arg(a0));
}
Variant ei_imagefilledrectangle(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagefilledrectangle);
  return (f_imagefilledrectangle(a0, a1, a2, a3, a4, a5));
}
Variant ei_oci_pconnect(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(oci_pconnect);
  int count = params.size();
  if (count <= 2) return (f_oci_pconnect(a0, a1));
  if (count == 3) return (f_oci_pconnect(a0, a1, a2));
  if (count == 4) return (f_oci_pconnect(a0, a1, a2, a3));
  return (f_oci_pconnect(a0, a1, a2, a3, a4));
}
Variant ei_drawpushpattern(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  Variant a3;
  Variant a4;
  Variant a5;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a3 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a4 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a5 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(drawpushpattern);
  return (f_drawpushpattern(a0, a1, a2, a3, a4, a5), null);
}
Variant ei_xmlwriter_set_indent(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(xmlwriter_set_indent);
  return (f_xmlwriter_set_indent(a0, a1));
}
Variant ei_openssl_csr_get_subject(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(openssl_csr_get_subject);
  int count = params.size();
  if (count <= 1) return (f_openssl_csr_get_subject(a0));
  return (f_openssl_csr_get_subject(a0, a1));
}
Variant ei_is_numeric(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(is_numeric);
  return (f_is_numeric(a0));
}
Variant ei_gzdeflate(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(gzdeflate);
  int count = params.size();
  if (count <= 1) return (f_gzdeflate(a0));
  return (f_gzdeflate(a0, a1));
}
Variant ei_dns_check_record(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(dns_check_record);
  int count = params.size();
  if (count <= 1) return (f_dns_check_record(a0));
  return (f_dns_check_record(a0, a1));
}
Variant ei_magicknegateimage(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(magicknegateimage);
  int count = params.size();
  if (count <= 1) return (f_magicknegateimage(a0));
  if (count == 2) return (f_magicknegateimage(a0, a1));
  return (f_magicknegateimage(a0, a1, a2));
}
Variant ei_socket_last_error(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(socket_last_error);
  int count = params.size();
  if (count <= 0) return (f_socket_last_error());
  return (f_socket_last_error(a0));
}
Variant ei_create_function(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(create_function);
  return (f_create_function(a0, a1));
}
Variant ei_str_split(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(str_split);
  int count = params.size();
  if (count <= 1) return (f_str_split(a0));
  return (f_str_split(a0, a1));
}
Variant ei_date_parse(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(date_parse);
  return (f_date_parse(a0));
}
Variant ei_imagecreatefromxpm(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(imagecreatefromxpm);
  return (f_imagecreatefromxpm(a0));
}
Variant ei_mysql_thread_id(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mysql_thread_id);
  int count = params.size();
  if (count <= 0) return (f_mysql_thread_id());
  return (f_mysql_thread_id(a0));
}
Variant ei_mb_encode_numericentity(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(mb_encode_numericentity);
  int count = params.size();
  if (count <= 2) return (f_mb_encode_numericentity(a0, a1));
  return (f_mb_encode_numericentity(a0, a1, a2));
}
Variant ei_fb_call_user_func_array_safe(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  FUNCTION_INJECTION(fb_call_user_func_array_safe);
  return (f_fb_call_user_func_array_safe(a0, a1));
}
Variant Eval::invoke_from_eval_builtin(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 4095) {
    case 1:
      HASH_INVOKE_FROM_EVAL(0x4F7230DC25F0E001LL, magicknormalizeimage);
      break;
    case 2:
      HASH_INVOKE_FROM_EVAL(0x76C320EDB9B6E002LL, xmlwriter_flush);
      break;
    case 3:
      HASH_INVOKE_FROM_EVAL(0x7E0EC3E131BCA003LL, token_name);
      break;
    case 5:
      HASH_INVOKE_FROM_EVAL(0x20D579E7E4131005LL, imagecolorclosest);
      HASH_INVOKE_FROM_EVAL(0x18A0F1EE8E249005LL, msg_send);
      break;
    case 10:
      HASH_INVOKE_FROM_EVAL(0x555D7A3FB939300ALL, apache_setenv);
      break;
    case 11:
      HASH_INVOKE_FROM_EVAL(0x4FDCCE1C7754600BLL, ob_iconv_handler);
      break;
    case 13:
      HASH_INVOKE_FROM_EVAL(0x40FA17130FA7100DLL, openssl_seal);
      break;
    case 22:
      HASH_INVOKE_FROM_EVAL(0x5623A698A728F016LL, getlastmod);
      break;
    case 24:
      HASH_INVOKE_FROM_EVAL(0x4C915E3480E94018LL, mb_substr_count);
      break;
    case 26:
      HASH_INVOKE_FROM_EVAL(0x03834225EBBC101ALL, drawsettextundercolor);
      break;
    case 32:
      HASH_INVOKE_FROM_EVAL(0x583D163A6EB52020LL, oci_result);
      break;
    case 34:
      HASH_INVOKE_FROM_EVAL(0x145D42B2AB55D022LL, drawmatte);
      break;
    case 35:
      HASH_INVOKE_FROM_EVAL(0x35C74650867B7023LL, imagesetpixel);
      break;
    case 40:
      HASH_INVOKE_FROM_EVAL(0x601C5152277AE028LL, readfile);
      break;
    case 44:
      HASH_INVOKE_FROM_EVAL(0x464EB9B1F955202CLL, apc_add);
      break;
    case 51:
      HASH_INVOKE_FROM_EVAL(0x48F35DFD653D7033LL, pclose);
      break;
    case 54:
      HASH_INVOKE_FROM_EVAL(0x32F23F206C394036LL, curl_setopt_array);
      break;
    case 55:
      HASH_INVOKE_FROM_EVAL(0x418D937957ECE037LL, tanh);
      break;
    case 62:
      HASH_INVOKE_FROM_EVAL(0x32E6E5D3CCE3703ELL, magickgetimagewidth);
      HASH_INVOKE_FROM_EVAL(0x43461C4D9130103ELL, exit);
      HASH_INVOKE_FROM_EVAL(0x67C1ED9B816E503ELL, md5_file);
      HASH_INVOKE_FROM_EVAL(0x497E31C70409603ELL, timezone_name_from_abbr);
      break;
    case 63:
      HASH_INVOKE_FROM_EVAL(0x24206A195B9C203FLL, ucfirst);
      break;
    case 65:
      HASH_INVOKE_FROM_EVAL(0x65B39B11F5D7C041LL, array_unique);
      break;
    case 67:
      HASH_INVOKE_FROM_EVAL(0x5ACCF9166CD9D043LL, ftruncate);
      break;
    case 68:
      HASH_INVOKE_FROM_EVAL(0x378A73FF98B60044LL, curl_init);
      break;
    case 73:
      HASH_INVOKE_FROM_EVAL(0x047A8BF04DB51049LL, range);
      HASH_INVOKE_FROM_EVAL(0x4282E0231F600049LL, fseek);
      break;
    case 75:
      HASH_INVOKE_FROM_EVAL(0x17CD0E68E778C04BLL, drawsetstrokelinejoin);
      HASH_INVOKE_FROM_EVAL(0x6370CF455EA8604BLL, socket_create);
      break;
    case 76:
      HASH_INVOKE_FROM_EVAL(0x03047FD5FC67204CLL, exif_read_data);
      break;
    case 83:
      HASH_INVOKE_FROM_EVAL(0x15A9EB33DA6E9053LL, getimagesize);
      HASH_INVOKE_FROM_EVAL(0x07EB5C3A3BEA3053LL, acosh);
      break;
    case 87:
      HASH_INVOKE_FROM_EVAL(0x12B22A2E6B344057LL, ldap_sort);
      break;
    case 90:
      HASH_INVOKE_FROM_EVAL(0x271AB768D202F05ALL, mcrypt_module_is_block_algorithm);
      break;
    case 92:
      HASH_INVOKE_FROM_EVAL(0x2B7532A070BF605CLL, openssl_get_privatekey);
      break;
    case 95:
      HASH_INVOKE_FROM_EVAL(0x4B70746F965E705FLL, preg_last_error);
      break;
    case 98:
      HASH_INVOKE_FROM_EVAL(0x745910AD5C922062LL, magickgetmimetype);
      break;
    case 100:
      HASH_INVOKE_FROM_EVAL(0x5CC8BA5ADFAC0064LL, imagegrabscreen);
      break;
    case 101:
      HASH_INVOKE_FROM_EVAL(0x777FE52584FAE065LL, apc_bin_dump);
      break;
    case 103:
      HASH_INVOKE_FROM_EVAL(0x0CE1918B30DF5067LL, sys_getloadavg);
      HASH_INVOKE_FROM_EVAL(0x4512BD5EA7076067LL, openssl_csr_export_to_file);
      break;
    case 112:
      HASH_INVOKE_FROM_EVAL(0x3C466098FF7B5070LL, mb_check_encoding);
      break;
    case 120:
      HASH_INVOKE_FROM_EVAL(0x6B268C26E21C1078LL, arsort);
      break;
    case 122:
      HASH_INVOKE_FROM_EVAL(0x5F9DDC342A83807ALL, date_default_timezone_get);
      break;
    case 131:
      HASH_INVOKE_FROM_EVAL(0x1A90213EE1A56083LL, array_pop);
      break;
    case 132:
      HASH_INVOKE_FROM_EVAL(0x53FD8C9AC3F4D084LL, dangling_server_proxy_new_request);
      break;
    case 137:
      HASH_INVOKE_FROM_EVAL(0x4AD554CBAB9CC089LL, call_user_method_array);
      break;
    case 140:
      HASH_INVOKE_FROM_EVAL(0x4F1D1ED7B087208CLL, exec);
      HASH_INVOKE_FROM_EVAL(0x3A0B58797E8FE08CLL, xml_set_external_entity_ref_handler);
      break;
    case 141:
      HASH_INVOKE_FROM_EVAL(0x200864F8F053C08DLL, magickgetversionstring);
      break;
    case 142:
      HASH_INVOKE_FROM_EVAL(0x3E4AE974AFA9708ELL, pixelsetquantumcolor);
      break;
    case 145:
      HASH_INVOKE_FROM_EVAL(0x3E5CF6378A49C091LL, ldap_get_attributes);
      HASH_INVOKE_FROM_EVAL(0x673B36244DC87091LL, closelog);
      HASH_INVOKE_FROM_EVAL(0x1C32BB63986C8091LL, socket_strerror);
      break;
    case 147:
      HASH_INVOKE_FROM_EVAL(0x3B5E32078E37A093LL, imagedestroy);
      break;
    case 158:
      HASH_INVOKE_FROM_EVAL(0x4AF87BA91163D09ELL, mysql_db_name);
      HASH_INVOKE_FROM_EVAL(0x74F0D6D8F1F2709ELL, drawsetstrokedashoffset);
      break;
    case 159:
      HASH_INVOKE_FROM_EVAL(0x2B130322DEC4B09FLL, pixelgetopacityquantum);
      break;
    case 161:
      HASH_INVOKE_FROM_EVAL(0x0DF945F12533F0A1LL, abs);
      break;
    case 162:
      HASH_INVOKE_FROM_EVAL(0x10DF7941C3F3E0A2LL, socket_bind);
      break;
    case 163:
      HASH_INVOKE_FROM_EVAL(0x54242D2846BC60A3LL, magickunsharpmaskimage);
      break;
    case 167:
      HASH_INVOKE_FROM_EVAL(0x74C787060F7290A7LL, icu_transliterate);
      break;
    case 168:
      HASH_INVOKE_FROM_EVAL(0x6E8C61326DCE40A8LL, var_export);
      break;
    case 169:
      HASH_INVOKE_FROM_EVAL(0x431F4E8713B9D0A9LL, oci_field_scale);
      break;
    case 171:
      HASH_INVOKE_FROM_EVAL(0x439DF153FC32D0ABLL, printf);
      HASH_INVOKE_FROM_EVAL(0x5B1D9F56698A40ABLL, html_entity_decode);
      break;
    case 172:
      HASH_INVOKE_FROM_EVAL(0x6E27DC1E74C5B0ACLL, drawpathstart);
      break;
    case 173:
      HASH_INVOKE_FROM_EVAL(0x4C9252FB9C3300ADLL, pixelsetalphaquantum);
      break;
    case 174:
      HASH_INVOKE_FROM_EVAL(0x47AB4A08446BD0AELL, bcmod);
      HASH_INVOKE_FROM_EVAL(0x4BBD5D8A6E0110AELL, error_log);
      break;
    case 175:
      HASH_INVOKE_FROM_EVAL(0x3954FFED1E0650AFLL, stream_register_wrapper);
      break;
    case 176:
      HASH_INVOKE_FROM_EVAL(0x5B9F8B3E1D8330B0LL, stream_socket_sendto);
      break;
    case 178:
      HASH_INVOKE_FROM_EVAL(0x48BBFB59FB7F90B2LL, iconv_strlen);
      break;
    case 184:
      HASH_INVOKE_FROM_EVAL(0x05A4C165810A30B8LL, gzread);
      break;
    case 185:
      HASH_INVOKE_FROM_EVAL(0x5C659372B2CD80B9LL, imagecolorstotal);
      break;
    case 187:
      HASH_INVOKE_FROM_EVAL(0x331E7DFBE6E240BBLL, libxml_get_errors);
      break;
    case 188:
      HASH_INVOKE_FROM_EVAL(0x3900350CD9D990BCLL, imagecreatefromjpeg);
      break;
    case 197:
      HASH_INVOKE_FROM_EVAL(0x7424946F7ED520C5LL, magickgetimagefilename);
      HASH_INVOKE_FROM_EVAL(0x6B477F3B9CDB10C5LL, base64_decode);
      break;
    case 199:
      HASH_INVOKE_FROM_EVAL(0x677F33E78342A0C7LL, function_exists);
      break;
    case 200:
      HASH_INVOKE_FROM_EVAL(0x30AB38D851C440C8LL, magickgetimagebackgroundcolor);
      break;
    case 202:
      HASH_INVOKE_FROM_EVAL(0x2EE0967F6EB5A0CALL, date_format);
      HASH_INVOKE_FROM_EVAL(0x4C67DEE74080E0CALL, magicksetimagecompose);
      break;
    case 206:
      HASH_INVOKE_FROM_EVAL(0x64E390E5F2FDC0CELL, ismagickwand);
      break;
    case 210:
      HASH_INVOKE_FROM_EVAL(0x7D1FAF3322A360D2LL, hphp_splfileobject___construct);
      HASH_INVOKE_FROM_EVAL(0x5365BD7509BE60D2LL, ldap_dn2ufn);
      HASH_INVOKE_FROM_EVAL(0x3E4DAD592CD0A0D2LL, magickdescribeimage);
      break;
    case 213:
      HASH_INVOKE_FROM_EVAL(0x3BF44C6DECD790D5LL, xmlwriter_start_dtd_entity);
      break;
    case 217:
      HASH_INVOKE_FROM_EVAL(0x08F6B727D60670D9LL, magicksetimagedepth);
      break;
    case 218:
      HASH_INVOKE_FROM_EVAL(0x6F242340B2E930DALL, hphp_splfileinfo_setfileclass);
      break;
    case 219:
      HASH_INVOKE_FROM_EVAL(0x3801923AD84670DBLL, apc_inc);
      break;
    case 224:
      HASH_INVOKE_FROM_EVAL(0x2E4612DF112010E0LL, imagecopyresized);
      break;
    case 228:
      HASH_INVOKE_FROM_EVAL(0x2B9425038D4230E4LL, imagecreatefromxpm);
      break;
    case 231:
      HASH_INVOKE_FROM_EVAL(0x79E6FD78989B10E7LL, tmpfile);
      HASH_INVOKE_FROM_EVAL(0x59DE3A26AFF570E7LL, magickshaveimage);
      break;
    case 232:
      HASH_INVOKE_FROM_EVAL(0x476F4B6CC987E0E8LL, magickframeimage);
      HASH_INVOKE_FROM_EVAL(0x17CB328F55FDF0E8LL, drawsetstrokeantialias);
      break;
    case 233:
      HASH_INVOKE_FROM_EVAL(0x47F8A63A709D70E9LL, oci_new_cursor);
      break;
    case 234:
      HASH_INVOKE_FROM_EVAL(0x53BA3992F8C240EALL, imagegrabwindow);
      break;
    case 243:
      HASH_INVOKE_FROM_EVAL(0x315CCBC8C5C7D0F3LL, xmlwriter_write_raw);
      break;
    case 249:
      HASH_INVOKE_FROM_EVAL(0x480797DB7165A0F9LL, xmlwriter_set_indent);
      break;
    case 259:
      HASH_INVOKE_FROM_EVAL(0x1FFCBCF1927D7103LL, posix_setpgid);
      break;
    case 261:
      HASH_INVOKE_FROM_EVAL(0x71E3372AA1AD0105LL, is_infinite);
      HASH_INVOKE_FROM_EVAL(0x509B763CDAD9D105LL, gethostbyaddr);
      break;
    case 264:
      HASH_INVOKE_FROM_EVAL(0x60B8B61133F59108LL, quoted_printable_decode);
      break;
    case 267:
      HASH_INVOKE_FROM_EVAL(0x7DE1BEE0C35D010BLL, pcntl_signal);
      break;
    case 273:
      HASH_INVOKE_FROM_EVAL(0x3A9A5D4FEE79A111LL, getmxrr);
      break;
    case 274:
      HASH_INVOKE_FROM_EVAL(0x0B1BA48B0CFB1112LL, strval);
      HASH_INVOKE_FROM_EVAL(0x28C44527BD59D112LL, is_link);
      break;
    case 276:
      HASH_INVOKE_FROM_EVAL(0x02A4724E6A881114LL, mb_decode_numericentity);
      break;
    case 281:
      HASH_INVOKE_FROM_EVAL(0x3AB82455A70F5119LL, imagecolortransparent);
      HASH_INVOKE_FROM_EVAL(0x2B31A877824A1119LL, stristr);
      break;
    case 284:
      HASH_INVOKE_FROM_EVAL(0x070A63F6A0B8711CLL, array_walk_recursive);
      break;
    case 285:
      HASH_INVOKE_FROM_EVAL(0x291088666B8BF11DLL, drawsetfontfamily);
      break;
    case 286:
      HASH_INVOKE_FROM_EVAL(0x658444BB4E29E11ELL, openssl_free_key);
      break;
    case 287:
      HASH_INVOKE_FROM_EVAL(0x4C70C24C84F5511FLL, magicksetimagegamma);
      break;
    case 291:
      HASH_INVOKE_FROM_EVAL(0x3669138315204123LL, mcrypt_module_get_algo_key_size);
      break;
    case 292:
      HASH_INVOKE_FROM_EVAL(0x7D4D28D561392124LL, drawsettextalignment);
      break;
    case 293:
      HASH_INVOKE_FROM_EVAL(0x7A8B3EC0235EF125LL, magickprofileimage);
      break;
    case 301:
      HASH_INVOKE_FROM_EVAL(0x7579DBE83CE5812DLL, imagerectangle);
      break;
    case 307:
      HASH_INVOKE_FROM_EVAL(0x6A7E0B15FF689133LL, mb_ereg_search_init);
      break;
    case 311:
      HASH_INVOKE_FROM_EVAL(0x5666016FA3C0F137LL, socket_clear_error);
      break;
    case 312:
      HASH_INVOKE_FROM_EVAL(0x2676902697E37138LL, xmlwriter_start_comment);
      break;
    case 314:
      HASH_INVOKE_FROM_EVAL(0x2A57E5D29D73D13ALL, register_tick_function);
      break;
    case 315:
      HASH_INVOKE_FROM_EVAL(0x1F61AFCDC510413BLL, imagefilter);
      break;
    case 323:
      HASH_INVOKE_FROM_EVAL(0x296C739F28D6C143LL, drawsetfontsize);
      break;
    case 335:
      HASH_INVOKE_FROM_EVAL(0x61A61E91C477514FLL, chop);
      HASH_INVOKE_FROM_EVAL(0x7863294A8F33D14FLL, file);
      break;
    case 337:
      HASH_INVOKE_FROM_EVAL(0x3044E9F91628E151LL, mb_strlen);
      break;
    case 338:
      HASH_INVOKE_FROM_EVAL(0x5D170BCBBBA02152LL, system);
      HASH_INVOKE_FROM_EVAL(0x26DD46D8C1F47152LL, ldap_bind);
      break;
    case 341:
      HASH_INVOKE_FROM_EVAL(0x2623917110168155LL, fclose);
      HASH_INVOKE_FROM_EVAL(0x4F43FE32079C0155LL, magickgetimagesblob);
      break;
    case 347:
      HASH_INVOKE_FROM_EVAL(0x3711AF36391EA15BLL, mysql_list_tables);
      break;
    case 348:
      HASH_INVOKE_FROM_EVAL(0x6CD7466174B9A15CLL, pixelsetredquantum);
      break;
    case 353:
      HASH_INVOKE_FROM_EVAL(0x309E780586D6C161LL, socket_set_nonblock);
      break;
    case 355:
      HASH_INVOKE_FROM_EVAL(0x36D6B73D289DD163LL, date_sunset);
      break;
    case 360:
      HASH_INVOKE_FROM_EVAL(0x14E46EA3CBCFB168LL, magickgetsamplingfactors);
      break;
    case 361:
      HASH_INVOKE_FROM_EVAL(0x4983571BFEAE6169LL, magickaffinetransformimage);
      HASH_INVOKE_FROM_EVAL(0x1612E331D1726169LL, drawsetstrokecolor);
      break;
    case 366:
      HASH_INVOKE_FROM_EVAL(0x15B61E061268B16ELL, magickenhanceimage);
      HASH_INVOKE_FROM_EVAL(0x0125F8B9428E416ELL, hphp_create_object);
      break;
    case 370:
      HASH_INVOKE_FROM_EVAL(0x59FE6A862E1CB172LL, get_browser);
      break;
    case 372:
      HASH_INVOKE_FROM_EVAL(0x345E070844E3F174LL, create_function);
      break;
    case 375:
      HASH_INVOKE_FROM_EVAL(0x174DB93CAF0D1177LL, hphp_splfileinfo___tostring);
      break;
    case 377:
      HASH_INVOKE_FROM_EVAL(0x6884FAF0D1EF3179LL, posix_mknod);
      break;
    case 379:
      HASH_INVOKE_FROM_EVAL(0x59594143EFC7617BLL, mcrypt_module_open);
      break;
    case 380:
      HASH_INVOKE_FROM_EVAL(0x3E1343B4A3AD717CLL, magickgettextascent);
      break;
    case 383:
      HASH_INVOKE_FROM_EVAL(0x4EF9496D16F9D17FLL, xmlwriter_start_element_ns);
      break;
    case 385:
      HASH_INVOKE_FROM_EVAL(0x1CBD3B58296C8181LL, xmlwriter_write_dtd);
      break;
    case 386:
      HASH_INVOKE_FROM_EVAL(0x7BB7C27B2C118182LL, get_magic_quotes_gpc);
      HASH_INVOKE_FROM_EVAL(0x130B62A8C77F3182LL, mb_ereg_search_getregs);
      break;
    case 389:
      HASH_INVOKE_FROM_EVAL(0x13E90F8874839185LL, ob_get_status);
      HASH_INVOKE_FROM_EVAL(0x54DB5DC6A069A185LL, hphp_get_class_info);
      break;
    case 390:
      HASH_INVOKE_FROM_EVAL(0x5DB5E45860801186LL, openssl_csr_export);
      break;
    case 391:
      HASH_INVOKE_FROM_EVAL(0x1BC448670BA4E187LL, iconv_strpos);
      break;
    case 393:
      HASH_INVOKE_FROM_EVAL(0x0CC53B2F0D38D189LL, timezone_offset_get);
      break;
    case 402:
      HASH_INVOKE_FROM_EVAL(0x07B5BF934F6EA192LL, imagesettile);
      break;
    case 407:
      HASH_INVOKE_FROM_EVAL(0x15AD9CE061C75197LL, timezone_transitions_get);
      break;
    case 409:
      HASH_INVOKE_FROM_EVAL(0x0CE71BC3B75D8199LL, mb_strimwidth);
      break;
    case 411:
      HASH_INVOKE_FROM_EVAL(0x7FF6C2A693CE119BLL, magickcyclecolormapimage);
      HASH_INVOKE_FROM_EVAL(0x74F20C284227219BLL, similar_text);
      break;
    case 416:
      HASH_INVOKE_FROM_EVAL(0x6FB5104FC97A31A0LL, drawpathcurvetorelative);
      break;
    case 418:
      HASH_INVOKE_FROM_EVAL(0x6DFC0765EBAB81A2LL, mcrypt_decrypt);
      HASH_INVOKE_FROM_EVAL(0x2A9015499A2EB1A2LL, fnmatch);
      HASH_INVOKE_FROM_EVAL(0x615723D21421A1A2LL, sem_remove);
      break;
    case 419:
      HASH_INVOKE_FROM_EVAL(0x735B81C45C2971A3LL, drawgetfillopacity);
      break;
    case 424:
      HASH_INVOKE_FROM_EVAL(0x2691B602BFA8A1A8LL, oci_field_size);
      break;
    case 425:
      HASH_INVOKE_FROM_EVAL(0x740DC7FFAD8BB1A9LL, imagecolorat);
      HASH_INVOKE_FROM_EVAL(0x0DDFE3B1F6EEE1A9LL, array_reduce);
      break;
    case 426:
      HASH_INVOKE_FROM_EVAL(0x11A5C66A3D0711AALL, apc_sma_info);
      break;
    case 429:
      HASH_INVOKE_FROM_EVAL(0x5A6EFF8C71A431ADLL, socket_get_status);
      HASH_INVOKE_FROM_EVAL(0x50538F37398AF1ADLL, ldap_get_option);
      break;
    case 431:
      HASH_INVOKE_FROM_EVAL(0x5B1F9C2E9FE111AFLL, fb_utf8ize);
      break;
    case 434:
      HASH_INVOKE_FROM_EVAL(0x4B96F870584541B2LL, hphp_splfileobject_setflags);
      break;
    case 438:
      HASH_INVOKE_FROM_EVAL(0x33BD672B4AC301B6LL, mt_rand);
      break;
    case 445:
      HASH_INVOKE_FROM_EVAL(0x4B3F35310DEA31BDLL, socket_create_pair);
      break;
    case 447:
      HASH_INVOKE_FROM_EVAL(0x0E88ACEB15A581BFLL, magickgetimageextrema);
      HASH_INVOKE_FROM_EVAL(0x681CD0E7D9DB71BFLL, pow);
      break;
    case 450:
      HASH_INVOKE_FROM_EVAL(0x02103322F88C71C2LL, pixelgetcolorcount);
      break;
    case 452:
      HASH_INVOKE_FROM_EVAL(0x3617DAE43A23D1C4LL, xml_parser_set_option);
      break;
    case 455:
      HASH_INVOKE_FROM_EVAL(0x5AE12CB1FFDC21C7LL, drawellipse);
      break;
    case 456:
      HASH_INVOKE_FROM_EVAL(0x11C0B5DA066891C8LL, preg_match_all);
      break;
    case 458:
      HASH_INVOKE_FROM_EVAL(0x75CA86838D24A1CALL, hash_algos);
      break;
    case 460:
      HASH_INVOKE_FROM_EVAL(0x3DF488365DAAF1CCLL, drawgettextencoding);
      break;
    case 461:
      HASH_INVOKE_FROM_EVAL(0x37340B707E7CD1CDLL, magickgetimagebordercolor);
      break;
    case 462:
      HASH_INVOKE_FROM_EVAL(0x2E7741B5440FB1CELL, magicksetlastiterator);
      break;
    case 464:
      HASH_INVOKE_FROM_EVAL(0x03012F3DDD7AB1D0LL, getservbyport);
      break;
    case 468:
      HASH_INVOKE_FROM_EVAL(0x219F3257BA3371D4LL, decbin);
      break;
    case 470:
      HASH_INVOKE_FROM_EVAL(0x78831282736801D6LL, stream_context_get_default);
      break;
    case 472:
      HASH_INVOKE_FROM_EVAL(0x60E9E392663921D8LL, readlink);
      break;
    case 473:
      HASH_INVOKE_FROM_EVAL(0x7A69D0078F4F31D9LL, ldap_start_tls);
      break;
    case 474:
      HASH_INVOKE_FROM_EVAL(0x0482E069503A91DALL, posix_setgid);
      break;
    case 475:
      HASH_INVOKE_FROM_EVAL(0x3FEBBC0DA79F31DBLL, fb_call_user_func_safe);
      break;
    case 476:
      HASH_INVOKE_FROM_EVAL(0x14FB46333D6D11DCLL, xml_set_default_handler);
      HASH_INVOKE_FROM_EVAL(0x5B3A4A72846B21DCLL, current);
      break;
    case 477:
      HASH_INVOKE_FROM_EVAL(0x04666D6F67C7A1DDLL, mysql_list_processes);
      HASH_INVOKE_FROM_EVAL(0x03A183D73942B1DDLL, apc_filehits);
      break;
    case 479:
      HASH_INVOKE_FROM_EVAL(0x7403251412E931DFLL, syslog);
      break;
    case 480:
      HASH_INVOKE_FROM_EVAL(0x5932D2750A8A91E0LL, magickgetpackagename);
      break;
    case 481:
      HASH_INVOKE_FROM_EVAL(0x2771C632A60371E1LL, ftok);
      HASH_INVOKE_FROM_EVAL(0x0ED729A444C611E1LL, openssl_x509_read);
      break;
    case 482:
      HASH_INVOKE_FROM_EVAL(0x67D4BA8513BF41E2LL, newpixelwand);
      break;
    case 483:
      HASH_INVOKE_FROM_EVAL(0x131D11F79A8801E3LL, mb_http_output);
      HASH_INVOKE_FROM_EVAL(0x406BDC51A3FD81E3LL, pcntl_waitpid);
      break;
    case 484:
      HASH_INVOKE_FROM_EVAL(0x08F7A6C37FC7B1E4LL, shm_get_var);
      break;
    case 488:
      HASH_INVOKE_FROM_EVAL(0x7F843353646391E8LL, rad2deg);
      break;
    case 493:
      HASH_INVOKE_FROM_EVAL(0x1B09A9A533FFA1EDLL, drawgetexceptiontype);
      HASH_INVOKE_FROM_EVAL(0x19932EEC5CAE01EDLL, hphp_splfileinfo_getfileinfo);
      break;
    case 497:
      HASH_INVOKE_FROM_EVAL(0x02BCE5B0FBED61F1LL, strlen);
      break;
    case 498:
      HASH_INVOKE_FROM_EVAL(0x46AFE55982B371F2LL, posix_geteuid);
      break;
    case 499:
      HASH_INVOKE_FROM_EVAL(0x582D10141D5601F3LL, stream_context_set_option);
      HASH_INVOKE_FROM_EVAL(0x11BB3CDC5E4971F3LL, xmlwriter_end_pi);
      break;
    case 501:
      HASH_INVOKE_FROM_EVAL(0x542FBDCF960031F5LL, fprintf);
      HASH_INVOKE_FROM_EVAL(0x02ABC00C046291F5LL, imageellipse);
      break;
    case 506:
      HASH_INVOKE_FROM_EVAL(0x135D5CBF936B11FALL, msg_receive);
      break;
    case 509:
      HASH_INVOKE_FROM_EVAL(0x5304E6B47ED0B1FDLL, srand);
      break;
    case 514:
      HASH_INVOKE_FROM_EVAL(0x16699E33370A8202LL, idn_to_unicode);
      break;
    case 515:
      HASH_INVOKE_FROM_EVAL(0x5B3C354575BB8203LL, mysql_free_result);
      break;
    case 520:
      HASH_INVOKE_FROM_EVAL(0x7B525920E026C208LL, gztell);
      break;
    case 524:
      HASH_INVOKE_FROM_EVAL(0x41B15671649A320CLL, curl_multi_getcontent);
      HASH_INVOKE_FROM_EVAL(0x257BEA4D6DC9920CLL, ctype_alnum);
      break;
    case 525:
      HASH_INVOKE_FROM_EVAL(0x5C0DECC8CC67E20DLL, magickwriteimagesfile);
      break;
    case 526:
      HASH_INVOKE_FROM_EVAL(0x533642044A00520ELL, pixelgetmagentaquantum);
      break;
    case 527:
      HASH_INVOKE_FROM_EVAL(0x08DC8BF3ADAE520FLL, getallheaders);
      HASH_INVOKE_FROM_EVAL(0x53631CF3A937320FLL, get_class_methods);
      break;
    case 528:
      HASH_INVOKE_FROM_EVAL(0x15EF510022CAF210LL, xml_parser_create_ns);
      HASH_INVOKE_FROM_EVAL(0x2D41D7F8F4113210LL, sinh);
      break;
    case 529:
      HASH_INVOKE_FROM_EVAL(0x438CD1A0327A8211LL, apc_define_constants);
      break;
    case 532:
      HASH_INVOKE_FROM_EVAL(0x7D85E9FACB92D214LL, magickgetimageblob);
      break;
    case 536:
      HASH_INVOKE_FROM_EVAL(0x56C95225813A5218LL, memory_get_usage);
      break;
    case 538:
      HASH_INVOKE_FROM_EVAL(0x72C0C89D897E721ALL, magicksetimagetype);
      break;
    case 539:
      HASH_INVOKE_FROM_EVAL(0x3A90CC67D58A021BLL, hash_hmac_file);
      break;
    case 545:
      HASH_INVOKE_FROM_EVAL(0x345E2BAE171FA221LL, date_sunrise);
      break;
    case 546:
      HASH_INVOKE_FROM_EVAL(0x39E4E0175FADC222LL, drawskewx);
      break;
    case 550:
      HASH_INVOKE_FROM_EVAL(0x007B6BD94D767226LL, hphp_splfileobject_fpassthru);
      break;
    case 551:
      HASH_INVOKE_FROM_EVAL(0x5A26F00A81BA5227LL, xmlwriter_start_attribute_ns);
      break;
    case 552:
      HASH_INVOKE_FROM_EVAL(0x44911AEE34D63228LL, time_sleep_until);
      break;
    case 556:
      HASH_INVOKE_FROM_EVAL(0x4129FFBF3548E22CLL, mb_strpos);
      break;
    case 560:
      HASH_INVOKE_FROM_EVAL(0x036A5935D9936230LL, hphp_splfileinfo_openfile);
      break;
    case 561:
      HASH_INVOKE_FROM_EVAL(0x61A192D10C004231LL, magickconvolveimage);
      HASH_INVOKE_FROM_EVAL(0x7C07D66F70E43231LL, mailparse_determine_best_xfer_encoding);
      break;
    case 564:
      HASH_INVOKE_FROM_EVAL(0x422C51C95928A234LL, str_replace);
      break;
    case 566:
      HASH_INVOKE_FROM_EVAL(0x5542AABF33A2F236LL, stream_filter_remove);
      break;
    case 568:
      HASH_INVOKE_FROM_EVAL(0x695AC59F79E2A238LL, mb_encode_mimeheader);
      break;
    case 570:
      HASH_INVOKE_FROM_EVAL(0x679ABBE5A08C523ALL, xml_parse_into_struct);
      break;
    case 574:
      HASH_INVOKE_FROM_EVAL(0x5E54CE856B78223ELL, array_flip);
      break;
    case 576:
      HASH_INVOKE_FROM_EVAL(0x0DB9DD4AE24B0240LL, base64_encode);
      break;
    case 579:
      HASH_INVOKE_FROM_EVAL(0x78183A24F2ACB243LL, strtotime);
      break;
    case 584:
      HASH_INVOKE_FROM_EVAL(0x7071BB6F0591E248LL, serialize);
      break;
    case 591:
      HASH_INVOKE_FROM_EVAL(0x1D8FE8E68F7EA24FLL, pixelsetiteratorrow);
      break;
    case 592:
      HASH_INVOKE_FROM_EVAL(0x30747B708DA1D250LL, pushdrawingwand);
      break;
    case 598:
      HASH_INVOKE_FROM_EVAL(0x0384346A8857D256LL, clonemagickwand);
      break;
    case 603:
      HASH_INVOKE_FROM_EVAL(0x2F8F40E95EDF925BLL, sizeof);
      break;
    case 605:
      HASH_INVOKE_FROM_EVAL(0x7E6024E53AEEE25DLL, apc_delete);
      break;
    case 608:
      HASH_INVOKE_FROM_EVAL(0x71D2D4757B7E4260LL, apache_request_headers);
      break;
    case 609:
      HASH_INVOKE_FROM_EVAL(0x383800902035F261LL, apache_child_terminate);
      HASH_INVOKE_FROM_EVAL(0x48305E8ABB8BC261LL, hphp_instanceof);
      break;
    case 610:
      HASH_INVOKE_FROM_EVAL(0x63AC0EED6D946262LL, pcntl_fork);
      break;
    case 612:
      HASH_INVOKE_FROM_EVAL(0x261F403C4174D264LL, posix_getsid);
      break;
    case 613:
      HASH_INVOKE_FROM_EVAL(0x561DB8F1DC0BC265LL, magickseparateimagechannel);
      break;
    case 615:
      HASH_INVOKE_FROM_EVAL(0x50C5488E19492267LL, mb_list_encodings_alias_names);
      HASH_INVOKE_FROM_EVAL(0x38B376B9D9091267LL, xmlwriter_write_attribute);
      break;
    case 620:
      HASH_INVOKE_FROM_EVAL(0x188DF1EB5FD1B26CLL, mailparse_msg_parse_file);
      break;
    case 622:
      HASH_INVOKE_FROM_EVAL(0x5672949384A4F26ELL, stream_filter_register);
      break;
    case 626:
      HASH_INVOKE_FROM_EVAL(0x1C65F32FF28BC272LL, pathinfo);
      break;
    case 627:
      HASH_INVOKE_FROM_EVAL(0x61C991F216E85273LL, inet_ntop);
      break;
    case 634:
      HASH_INVOKE_FROM_EVAL(0x39E05F957C7DD27ALL, magickgetimagedepth);
      break;
    case 636:
      HASH_INVOKE_FROM_EVAL(0x0F7E33D551E0727CLL, posix_getpid);
      break;
    case 637:
      HASH_INVOKE_FROM_EVAL(0x7DB57C59E607627DLL, mcrypt_generic_deinit);
      break;
    case 638:
      HASH_INVOKE_FROM_EVAL(0x4111669F4862E27ELL, drawpathlinetoverticalrelative);
      break;
    case 639:
      HASH_INVOKE_FROM_EVAL(0x5B94A6962F1EC27FLL, magickechoimagesblob);
      HASH_INVOKE_FROM_EVAL(0x57E8781CF111727FLL, fileowner);
      break;
    case 640:
      HASH_INVOKE_FROM_EVAL(0x2E54EF1891172280LL, hphp_splfileinfo_isexecutable);
      break;
    case 641:
      HASH_INVOKE_FROM_EVAL(0x1765A2E5186DE281LL, socket_write);
      HASH_INVOKE_FROM_EVAL(0x0881440DCF5D3281LL, magickflattenimages);
      break;
    case 643:
      HASH_INVOKE_FROM_EVAL(0x4C83B098C8BDA283LL, posix_setsid);
      break;
    case 645:
      HASH_INVOKE_FROM_EVAL(0x5F7DC3612050A285LL, drawsetfontweight);
      HASH_INVOKE_FROM_EVAL(0x1A895A2307126285LL, openssl_pkcs7_decrypt);
      break;
    case 646:
      HASH_INVOKE_FROM_EVAL(0x3A2E2C40B019E286LL, is_a);
      HASH_INVOKE_FROM_EVAL(0x4F028FA6AAEEC286LL, call_user_method);
      break;
    case 647:
      HASH_INVOKE_FROM_EVAL(0x27698DDEDAD6E287LL, openssl_pkey_new);
      break;
    case 656:
      HASH_INVOKE_FROM_EVAL(0x04C11602C720A290LL, convert_cyr_string);
      break;
    case 660:
      HASH_INVOKE_FROM_EVAL(0x4D05DD57E4052294LL, xmlwriter_output_memory);
      break;
    case 661:
      HASH_INVOKE_FROM_EVAL(0x69868C648BC12295LL, apc_store);
      break;
    case 665:
      HASH_INVOKE_FROM_EVAL(0x22D380E06E67E299LL, stream_encoding);
      break;
    case 666:
      HASH_INVOKE_FROM_EVAL(0x68272A37CC9E729ALL, mb_strtolower);
      break;
    case 667:
      HASH_INVOKE_FROM_EVAL(0x4A09634AE6DFF29BLL, fileperms);
      break;
    case 668:
      HASH_INVOKE_FROM_EVAL(0x0F71D3E47044E29CLL, drawpathcurvetosmoothrelative);
      break;
    case 675:
      HASH_INVOKE_FROM_EVAL(0x10E7B5A0E29CF2A3LL, bcscale);
      HASH_INVOKE_FROM_EVAL(0x743EA4BF2CC8F2A3LL, mysql_field_type);
      break;
    case 678:
      HASH_INVOKE_FROM_EVAL(0x73EF3A19F76872A6LL, iconv_strrpos);
      break;
    case 680:
      HASH_INVOKE_FROM_EVAL(0x5409127FEDE332A8LL, exif_imagetype);
      break;
    case 685:
      HASH_INVOKE_FROM_EVAL(0x35D259398CDDA2ADLL, pixelgetredquantum);
      HASH_INVOKE_FROM_EVAL(0x00AB6FC4E9EE62ADLL, imagefilledrectangle);
      break;
    case 686:
      HASH_INVOKE_FROM_EVAL(0x36AB9E6AA687F2AELL, xmlwriter_start_dtd_element);
      break;
    case 691:
      HASH_INVOKE_FROM_EVAL(0x44530C37F2B522B3LL, drawgetstrokedasharray);
      HASH_INVOKE_FROM_EVAL(0x59BB7B8078AC22B3LL, tempnam);
      break;
    case 694:
      HASH_INVOKE_FROM_EVAL(0x0C4B98B47B0862B6LL, apd_echo);
      HASH_INVOKE_FROM_EVAL(0x0E9C9B409F94B2B6LL, setcookie);
      break;
    case 696:
      HASH_INVOKE_FROM_EVAL(0x3C6D50F3BB8102B8LL, next);
      break;
    case 698:
      HASH_INVOKE_FROM_EVAL(0x4A3D2113D3DFD2BALL, newpixelwandarray);
      break;
    case 700:
      HASH_INVOKE_FROM_EVAL(0x33E08846F3EB42BCLL, ldap_get_values);
      HASH_INVOKE_FROM_EVAL(0x41F7E2214DDE12BCLL, mcrypt_enc_self_test);
      break;
    case 701:
      HASH_INVOKE_FROM_EVAL(0x327C865E52FD12BDLL, ldap_get_values_len);
      break;
    case 702:
      HASH_INVOKE_FROM_EVAL(0x72D6F9B3661AB2BELL, magickgetimage);
      break;
    case 704:
      HASH_INVOKE_FROM_EVAL(0x5B7C1B74BA3452C0LL, newpixelregioniterator);
      break;
    case 707:
      HASH_INVOKE_FROM_EVAL(0x446D76A95365D2C3LL, pixelgetyellow);
      break;
    case 708:
      HASH_INVOKE_FROM_EVAL(0x6018C9F7DF40C2C4LL, xml_get_current_column_number);
      break;
    case 716:
      HASH_INVOKE_FROM_EVAL(0x407EF03C23BF92CCLL, drawpathellipticarcabsolute);
      HASH_INVOKE_FROM_EVAL(0x44273F8BA3F542CCLL, imagesx);
      break;
    case 718:
      HASH_INVOKE_FROM_EVAL(0x1922D51F3E1522CELL, xmlwriter_end_dtd_attlist);
      break;
    case 719:
      HASH_INVOKE_FROM_EVAL(0x4ACE27EC476632CFLL, apc_bin_dumpfile);
      break;
    case 722:
      HASH_INVOKE_FROM_EVAL(0x4D9A87BD0CF742D2LL, imagepsextendfont);
      break;
    case 725:
      HASH_INVOKE_FROM_EVAL(0x4D04C580CF9212D5LL, posix_getgroups);
      break;
    case 728:
      HASH_INVOKE_FROM_EVAL(0x56C4896BA2FF52D8LL, drawsetstrokeopacity);
      break;
    case 730:
      HASH_INVOKE_FROM_EVAL(0x5C6A85B448C352DALL, posix_uname);
      break;
    case 733:
      HASH_INVOKE_FROM_EVAL(0x5F585DF7CB82E2DDLL, hphp_splfileinfo_iswritable);
      break;
    case 738:
      HASH_INVOKE_FROM_EVAL(0x4AEC19D75BF652E2LL, magickremoveimage);
      break;
    case 739:
      HASH_INVOKE_FROM_EVAL(0x45382D0BA5B262E3LL, mysql_get_proto_info);
      break;
    case 749:
      HASH_INVOKE_FROM_EVAL(0x215E0E2EFA7422EDLL, drawgetstrokeantialias);
      break;
    case 750:
      HASH_INVOKE_FROM_EVAL(0x2884B7B3252B02EELL, imagealphablending);
      break;
    case 752:
      HASH_INVOKE_FROM_EVAL(0x25CA0794823AA2F0LL, openssl_csr_get_public_key);
      break;
    case 754:
      HASH_INVOKE_FROM_EVAL(0x2EE56D216BB832F2LL, time_nanosleep);
      break;
    case 756:
      HASH_INVOKE_FROM_EVAL(0x418EC805C5FD32F4LL, mcrypt_get_key_size);
      break;
    case 761:
      HASH_INVOKE_FROM_EVAL(0x00CFD56391DF82F9LL, mysql_data_seek);
      HASH_INVOKE_FROM_EVAL(0x319EF52B36AAB2F9LL, posix_isatty);
      break;
    case 763:
      HASH_INVOKE_FROM_EVAL(0x4D393D30CE1112FBLL, drawpathmovetoabsolute);
      break;
    case 764:
      HASH_INVOKE_FROM_EVAL(0x66D59E4DBC7382FCLL, drawscale);
      break;
    case 766:
      HASH_INVOKE_FROM_EVAL(0x208B66A8731F72FELL, sem_get);
      HASH_INVOKE_FROM_EVAL(0x755A9950B65472FELL, drawgetgravity);
      break;
    case 770:
      HASH_INVOKE_FROM_EVAL(0x0103FE1E2C307302LL, socket_recvfrom);
      break;
    case 773:
      HASH_INVOKE_FROM_EVAL(0x65D40C6B4842F305LL, clearpixelwand);
      break;
    case 774:
      HASH_INVOKE_FROM_EVAL(0x689D60184DD81306LL, htmlspecialchars_decode);
      break;
    case 777:
      HASH_INVOKE_FROM_EVAL(0x414038596F552309LL, magickgetversionnumber);
      HASH_INVOKE_FROM_EVAL(0x47CB27E8FDB60309LL, array_fill);
      break;
    case 779:
      HASH_INVOKE_FROM_EVAL(0x0C6F751411F5E30BLL, strrev);
      HASH_INVOKE_FROM_EVAL(0x65F586C35A88030BLL, magickresizeimage);
      break;
    case 780:
      HASH_INVOKE_FROM_EVAL(0x553940FCE453330CLL, hphp_splfileobject_getmaxlinelen);
      break;
    case 789:
      HASH_INVOKE_FROM_EVAL(0x4F1E663AE18FD315LL, msg_remove_queue);
      break;
    case 798:
      HASH_INVOKE_FROM_EVAL(0x27FF9DB54420531ELL, xml_error_string);
      break;
    case 804:
      HASH_INVOKE_FROM_EVAL(0x5E5E4F998C8E7324LL, pcntl_wifexited);
      break;
    case 808:
      HASH_INVOKE_FROM_EVAL(0x73FEB3BF75FFB328LL, ctype_space);
      break;
    case 811:
      HASH_INVOKE_FROM_EVAL(0x2BDB1EE3869E132BLL, restore_error_handler);
      break;
    case 815:
      HASH_INVOKE_FROM_EVAL(0x7DD6461A6290B32FLL, mysql_real_escape_string);
      break;
    case 816:
      HASH_INVOKE_FROM_EVAL(0x300F758BB0E16330LL, mysql_num_rows);
      HASH_INVOKE_FROM_EVAL(0x1601C1826E90B330LL, strptime);
      break;
    case 817:
      HASH_INVOKE_FROM_EVAL(0x00DAFE46631AE331LL, stream_set_timeout);
      break;
    case 818:
      HASH_INVOKE_FROM_EVAL(0x037055C215998332LL, bcsub);
      break;
    case 824:
      HASH_INVOKE_FROM_EVAL(0x549D51040C250338LL, cleardrawingwand);
      break;
    case 825:
      HASH_INVOKE_FROM_EVAL(0x48D57F17C5132339LL, drawgetclippath);
      break;
    case 826:
      HASH_INVOKE_FROM_EVAL(0x34DDF0DFC546033ALL, xbox_task_start);
      break;
    case 829:
      HASH_INVOKE_FROM_EVAL(0x4E166ECE0EC6A33DLL, openssl_pkey_get_public);
      break;
    case 830:
      HASH_INVOKE_FROM_EVAL(0x758EA7E9AA45C33ELL, xmlwriter_end_document);
      break;
    case 835:
      HASH_INVOKE_FROM_EVAL(0x6794CFB89DEEF343LL, curl_exec);
      break;
    case 836:
      HASH_INVOKE_FROM_EVAL(0x1A9DC76AB74F6344LL, openssl_verify);
      break;
    case 837:
      HASH_INVOKE_FROM_EVAL(0x45FAE3D08E96B345LL, curl_errno);
      break;
    case 842:
      HASH_INVOKE_FROM_EVAL(0x208BB4C3C0BA534ALL, xmlwriter_write_dtd_element);
      break;
    case 843:
      HASH_INVOKE_FROM_EVAL(0x57A9E8878872D34BLL, parse_ini_file);
      break;
    case 844:
      HASH_INVOKE_FROM_EVAL(0x0644E5FB91C8134CLL, array_udiff);
      break;
    case 845:
      HASH_INVOKE_FROM_EVAL(0x5998E61D600D634DLL, drawaffine);
      break;
    case 847:
      HASH_INVOKE_FROM_EVAL(0x5C8B3B9FA833934FLL, ldap_first_attribute);
      break;
    case 849:
      HASH_INVOKE_FROM_EVAL(0x2B422699C3A57351LL, sha1);
      break;
    case 852:
      HASH_INVOKE_FROM_EVAL(0x501F4DF5C8997354LL, hphp_get_property);
      HASH_INVOKE_FROM_EVAL(0x77EB4D2F5BDDB354LL, magickgetimageresolution);
      break;
    case 858:
      HASH_INVOKE_FROM_EVAL(0x4BF5DEBDB76EC35ALL, mcrypt_enc_get_iv_size);
      HASH_INVOKE_FROM_EVAL(0x0E0C79E42812235ALL, imagepng);
      break;
    case 859:
      HASH_INVOKE_FROM_EVAL(0x1AC48909BEEF935BLL, func_get_arg);
      break;
    case 861:
      HASH_INVOKE_FROM_EVAL(0x54C3E9AB6FB8E35DLL, magickswirlimage);
      break;
    case 863:
      HASH_INVOKE_FROM_EVAL(0x280DE04F84FB235FLL, popdrawingwand);
      break;
    case 869:
      HASH_INVOKE_FROM_EVAL(0x68DBF8ABB26A8365LL, hphp_directoryiterator_rewind);
      break;
    case 870:
      HASH_INVOKE_FROM_EVAL(0x4EF3469306E44366LL, floatval);
      break;
    case 871:
      HASH_INVOKE_FROM_EVAL(0x4810A9774785C367LL, posix_getpgrp);
      break;
    case 872:
      HASH_INVOKE_FROM_EVAL(0x5D406167C673D368LL, magickcompareimages);
      break;
    case 873:
      HASH_INVOKE_FROM_EVAL(0x6C715D7DD63DA369LL, is_integer);
      break;
    case 878:
      HASH_INVOKE_FROM_EVAL(0x7CE90898E882F36ELL, pixelsetyellow);
      break;
    case 882:
      HASH_INVOKE_FROM_EVAL(0x7107AE03689F5372LL, hphp_invoke);
      break;
    case 889:
      HASH_INVOKE_FROM_EVAL(0x5ED8901DB5D14379LL, magickcharcoalimage);
      break;
    case 890:
      HASH_INVOKE_FROM_EVAL(0x69EA8DC005FEC37ALL, hphp_splfileobject_fwrite);
      break;
    case 900:
      HASH_INVOKE_FROM_EVAL(0x44C1BC500D175384LL, wandgetexception);
      break;
    case 901:
      HASH_INVOKE_FROM_EVAL(0x7C5CA3E2E3C8F385LL, magickflipimage);
      HASH_INVOKE_FROM_EVAL(0x57554E082E0ED385LL, pcntl_exec);
      HASH_INVOKE_FROM_EVAL(0x0B0B8765A4CDD385LL, hphp_splfileobject_fgets);
      break;
    case 902:
      HASH_INVOKE_FROM_EVAL(0x589E24C7664D5386LL, doubleval);
      break;
    case 904:
      HASH_INVOKE_FROM_EVAL(0x791E946E04F50388LL, magicksetresourcelimit);
      break;
    case 907:
      HASH_INVOKE_FROM_EVAL(0x73A3F87C0A56238BLL, stat);
      break;
    case 908:
      HASH_INVOKE_FROM_EVAL(0x7F18BA1FBD95B38CLL, hphp_directoryiterator_next);
      break;
    case 909:
      HASH_INVOKE_FROM_EVAL(0x4127DE142CD4A38DLL, xml_get_error_code);
      break;
    case 913:
      HASH_INVOKE_FROM_EVAL(0x25FA64929C619391LL, asin);
      break;
    case 914:
      HASH_INVOKE_FROM_EVAL(0x2052D8D4822EF392LL, is_subclass_of);
      HASH_INVOKE_FROM_EVAL(0x2395B0A85E292392LL, hphp_splfileobject_flock);
      break;
    case 916:
      HASH_INVOKE_FROM_EVAL(0x269A220896FD2394LL, deg2rad);
      HASH_INVOKE_FROM_EVAL(0x36953788781F4394LL, mailparse_msg_extract_part);
      break;
    case 917:
      HASH_INVOKE_FROM_EVAL(0x7B0552A224E27395LL, bcsqrt);
      HASH_INVOKE_FROM_EVAL(0x422599B9E8AC0395LL, stream_bucket_make_writeable);
      break;
    case 918:
      HASH_INVOKE_FROM_EVAL(0x15EC64198D93C396LL, openssl_pkcs12_read);
      break;
    case 919:
      HASH_INVOKE_FROM_EVAL(0x1D2C305EA5C82397LL, idn_to_utf8);
      break;
    case 920:
      HASH_INVOKE_FROM_EVAL(0x215547858BA7E398LL, hphp_recursiveiteratoriterator___construct);
      break;
    case 921:
      HASH_INVOKE_FROM_EVAL(0x66DA89629BA5D399LL, posix_getgrgid);
      break;
    case 922:
      HASH_INVOKE_FROM_EVAL(0x0CC562CBD773639ALL, i18n_loc_get_default);
      break;
    case 923:
      HASH_INVOKE_FROM_EVAL(0x25DF28703309C39BLL, idate);
      HASH_INVOKE_FROM_EVAL(0x5B33B55D4B7E339BLL, fpassthru);
      break;
    case 926:
      HASH_INVOKE_FROM_EVAL(0x27AD0D17AA7FB39ELL, ldap_set_rebind_proc);
      break;
    case 927:
      HASH_INVOKE_FROM_EVAL(0x57E72C21F67D039FLL, user_error);
      HASH_INVOKE_FROM_EVAL(0x0368F1779E3AE39FLL, mysql_field_table);
      break;
    case 929:
      HASH_INVOKE_FROM_EVAL(0x5C29B6D7973903A1LL, proc_nice);
      break;
    case 930:
      HASH_INVOKE_FROM_EVAL(0x0207E332D629A3A2LL, mailparse_msg_get_structure);
      HASH_INVOKE_FROM_EVAL(0x0A2A4AA078D433A2LL, hexdec);
      break;
    case 932:
      HASH_INVOKE_FROM_EVAL(0x1676FB393F8493A4LL, constant);
      break;
    case 934:
      HASH_INVOKE_FROM_EVAL(0x40E0D496EE29B3A6LL, call_user_func_array);
      break;
    case 936:
      HASH_INVOKE_FROM_EVAL(0x4120B8157ED413A8LL, i18n_loc_set_strength);
      break;
    case 937:
      HASH_INVOKE_FROM_EVAL(0x03A023F87CB923A9LL, oci_field_name);
      break;
    case 938:
      HASH_INVOKE_FROM_EVAL(0x3238A5BD362443AALL, escapeshellcmd);
      break;
    case 946:
      HASH_INVOKE_FROM_EVAL(0x3DB7EBC0B670C3B2LL, magicksetimageredprimary);
      break;
    case 947:
      HASH_INVOKE_FROM_EVAL(0x61720D771D1A23B3LL, posix_getpwnam);
      break;
    case 948:
      HASH_INVOKE_FROM_EVAL(0x2788C40C6AB4E3B4LL, oci_free_descriptor);
      break;
    case 950:
      HASH_INVOKE_FROM_EVAL(0x6C07640F7C5BD3B6LL, imagettfbbox);
      break;
    case 955:
      HASH_INVOKE_FROM_EVAL(0x5A3F5AAD1B13A3BBLL, is_executable);
      break;
    case 956:
      HASH_INVOKE_FROM_EVAL(0x0629158C42C893BCLL, compact);
      break;
    case 957:
      HASH_INVOKE_FROM_EVAL(0x60294C2616F6A3BDLL, mcrypt_enc_get_supported_key_sizes);
      break;
    case 958:
      HASH_INVOKE_FROM_EVAL(0x49A34964289453BELL, eregi);
      break;
    case 959:
      HASH_INVOKE_FROM_EVAL(0x0E38CDC93E5893BFLL, magicksetimagemattecolor);
      break;
    case 968:
      HASH_INVOKE_FROM_EVAL(0x4D100C70E86593C8LL, stream_set_write_buffer);
      HASH_INVOKE_FROM_EVAL(0x3101CE70BA49A3C8LL, error_reporting);
      break;
    case 971:
      HASH_INVOKE_FROM_EVAL(0x0173CC6FACAB93CBLL, quotemeta);
      HASH_INVOKE_FROM_EVAL(0x4C3B6BE9112E63CBLL, str_split);
      break;
    case 972:
      HASH_INVOKE_FROM_EVAL(0x50C88817090C63CCLL, pcntl_wait);
      break;
    case 974:
      HASH_INVOKE_FROM_EVAL(0x4F9F68F60FD7A3CELL, drawgetfillrule);
      HASH_INVOKE_FROM_EVAL(0x02BEFBEE8287D3CELL, get_magic_quotes_runtime);
      break;
    case 978:
      HASH_INVOKE_FROM_EVAL(0x67C155632E5373D2LL, mailparse_msg_create);
      break;
    case 979:
      HASH_INVOKE_FROM_EVAL(0x734FD402E190E3D3LL, evhttp_async_get);
      HASH_INVOKE_FROM_EVAL(0x0A8D4FAF266973D3LL, bcpow);
      break;
    case 983:
      HASH_INVOKE_FROM_EVAL(0x7677A58EF5D593D7LL, oci_parse);
      HASH_INVOKE_FROM_EVAL(0x382B5B1EF00153D7LL, imagecreatefrompng);
      break;
    case 996:
      HASH_INVOKE_FROM_EVAL(0x7E7718CC939D63E4LL, setrawcookie);
      break;
    case 1000:
      HASH_INVOKE_FROM_EVAL(0x6BB9D669DDB703E8LL, xml_get_current_byte_index);
      HASH_INVOKE_FROM_EVAL(0x4A3127C309B0C3E8LL, drawsetstrokelinecap);
      break;
    case 1002:
      HASH_INVOKE_FROM_EVAL(0x0D3C8F00B0C633EALL, inet_pton);
      HASH_INVOKE_FROM_EVAL(0x6DA49696220FE3EALL, mailparse_rfc822_parse_addresses);
      break;
    case 1003:
      HASH_INVOKE_FROM_EVAL(0x1DAE0831CECB63EBLL, ob_get_clean);
      break;
    case 1006:
      HASH_INVOKE_FROM_EVAL(0x598472448937E3EELL, magickqueryfontmetrics);
      break;
    case 1009:
      HASH_INVOKE_FROM_EVAL(0x5EFE291585A713F1LL, method_exists);
      break;
    case 1010:
      HASH_INVOKE_FROM_EVAL(0x0FE12E46BC9853F2LL, stream_filter_append);
      HASH_INVOKE_FROM_EVAL(0x41A19AE18BC8B3F2LL, curl_error);
      HASH_INVOKE_FROM_EVAL(0x696241660648B3F2LL, magickwhitethresholdimage);
      break;
    case 1012:
      HASH_INVOKE_FROM_EVAL(0x26D53A77483EF3F4LL, drawbezier);
      break;
    case 1013:
      HASH_INVOKE_FROM_EVAL(0x34159AB5FE8FC3F5LL, oci_internal_debug);
      break;
    case 1015:
      HASH_INVOKE_FROM_EVAL(0x43F22CB4E3E8F3F7LL, apache_note);
      break;
    case 1016:
      HASH_INVOKE_FROM_EVAL(0x4C024573FCD5B3F8LL, var_dump);
      HASH_INVOKE_FROM_EVAL(0x514EA9C8FF5B33F8LL, posix_getrlimit);
      break;
    case 1018:
      HASH_INVOKE_FROM_EVAL(0x1B217E78CBC713FALL, zend_thread_id);
      break;
    case 1025:
      HASH_INVOKE_FROM_EVAL(0x36B9C440B1881401LL, fmod);
      HASH_INVOKE_FROM_EVAL(0x3DCB1C92B5864401LL, gzrewind);
      break;
    case 1028:
      HASH_INVOKE_FROM_EVAL(0x2B12B0E9109D0404LL, iptcembed);
      break;
    case 1033:
      HASH_INVOKE_FROM_EVAL(0x2E57E06900594409LL, xbox_send_message);
      break;
    case 1034:
      HASH_INVOKE_FROM_EVAL(0x6DC61C51FA1D340ALL, show_source);
      break;
    case 1035:
      HASH_INVOKE_FROM_EVAL(0x6C2CE092B900D40BLL, hphp_splfileinfo___construct);
      break;
    case 1037:
      HASH_INVOKE_FROM_EVAL(0x2939C5BAE0C4A40DLL, nl2br);
      HASH_INVOKE_FROM_EVAL(0x267529454569840DLL, ob_flush);
      HASH_INVOKE_FROM_EVAL(0x152C7161567F940DLL, func_num_args);
      HASH_INVOKE_FROM_EVAL(0x002CCCD877D9640DLL, drawpathclose);
      break;
    case 1043:
      HASH_INVOKE_FROM_EVAL(0x56EC1A6732D07413LL, drawgetfontsize);
      HASH_INVOKE_FROM_EVAL(0x20C24D873DC65413LL, openssl_csr_get_subject);
      break;
    case 1051:
      HASH_INVOKE_FROM_EVAL(0x47279C717370B41BLL, acos);
      break;
    case 1054:
      HASH_INVOKE_FROM_EVAL(0x3E4E7C561D3A541ELL, fgetss);
      break;
    case 1055:
      HASH_INVOKE_FROM_EVAL(0x301963016A91741FLL, hphp_stats);
      break;
    case 1059:
      HASH_INVOKE_FROM_EVAL(0x4C9108B5A5807423LL, drawsetfillcolor);
      break;
    case 1062:
      HASH_INVOKE_FROM_EVAL(0x21EFB0B9D1514426LL, magicksetpassphrase);
      HASH_INVOKE_FROM_EVAL(0x161D8EA3339AB426LL, apc_cas);
      break;
    case 1068:
      HASH_INVOKE_FROM_EVAL(0x12D324CC744BF42CLL, pixelgetcolorasstring);
      break;
    case 1069:
      HASH_INVOKE_FROM_EVAL(0x333D1E2E28B0942DLL, imagejpeg);
      HASH_INVOKE_FROM_EVAL(0x2A5A519E4BFE442DLL, mb_eregi);
      break;
    case 1071:
      HASH_INVOKE_FROM_EVAL(0x316F2725AC15042FLL, stream_resolve_include_path);
      break;
    case 1074:
      HASH_INVOKE_FROM_EVAL(0x71C6E38BC56CE432LL, stream_wrapper_register);
      break;
    case 1075:
      HASH_INVOKE_FROM_EVAL(0x6829094421CDB433LL, touch);
      break;
    case 1077:
      HASH_INVOKE_FROM_EVAL(0x75DAFEF5BFEF1435LL, imagesetstyle);
      HASH_INVOKE_FROM_EVAL(0x044386A0E8B25435LL, drawgetclipunits);
      break;
    case 1079:
      HASH_INVOKE_FROM_EVAL(0x1AAF02CF6DEBB437LL, magickdeconstructimages);
      break;
    case 1081:
      HASH_INVOKE_FROM_EVAL(0x34C52EF423EFD439LL, proc_open);
      break;
    case 1082:
      HASH_INVOKE_FROM_EVAL(0x5019A1FBF377C43ALL, imagepsbbox);
      break;
    case 1084:
      HASH_INVOKE_FROM_EVAL(0x59ECE01C7629643CLL, mysql_drop_db);
      break;
    case 1088:
      HASH_INVOKE_FROM_EVAL(0x5247425ED698B440LL, hphp_thread_is_warmup_enabled);
      break;
    case 1089:
      HASH_INVOKE_FROM_EVAL(0x158E2271E381C441LL, hash_file);
      HASH_INVOKE_FROM_EVAL(0x05892E3C5B9EB441LL, closedir);
      break;
    case 1090:
      HASH_INVOKE_FROM_EVAL(0x3F869126D0336442LL, trigger_error);
      break;
    case 1105:
      HASH_INVOKE_FROM_EVAL(0x7539134E1CC61451LL, xmlwriter_start_cdata);
      break;
    case 1106:
      HASH_INVOKE_FROM_EVAL(0x1056EF1C14D2A452LL, socket_connect);
      break;
    case 1116:
      HASH_INVOKE_FROM_EVAL(0x436AB52B2099145CLL, ldap_close);
      break;
    case 1117:
      HASH_INVOKE_FROM_EVAL(0x0246AF48CD31245DLL, count_chars);
      break;
    case 1118:
      HASH_INVOKE_FROM_EVAL(0x0ED191E71A60545ELL, magicksetfirstiterator);
      break;
    case 1125:
      HASH_INVOKE_FROM_EVAL(0x05D72365192CE465LL, fwrite);
      HASH_INVOKE_FROM_EVAL(0x406A1404F48E4465LL, posix_getuid);
      break;
    case 1130:
      HASH_INVOKE_FROM_EVAL(0x32643AE461D3F46ALL, mailparse_stream_encode);
      break;
    case 1132:
      HASH_INVOKE_FROM_EVAL(0x07D959A8C0CF546CLL, stream_wrapper_unregister);
      HASH_INVOKE_FROM_EVAL(0x4F39BD300305746CLL, hphp_splfileobject_key);
      break;
    case 1133:
      HASH_INVOKE_FROM_EVAL(0x738D381800CE946DLL, ldap_parse_result);
      HASH_INVOKE_FROM_EVAL(0x5229C0069FD7D46DLL, vfprintf);
      break;
    case 1136:
      HASH_INVOKE_FROM_EVAL(0x0C626F268F120470LL, __halt_compiler);
      break;
    case 1139:
      HASH_INVOKE_FROM_EVAL(0x0F8F276A48900473LL, drawgetstrokelinecap);
      break;
    case 1141:
      HASH_INVOKE_FROM_EVAL(0x268706C46202C475LL, sem_acquire);
      break;
    case 1143:
      HASH_INVOKE_FROM_EVAL(0x18666906A8001477LL, array_diff_assoc);
      break;
    case 1144:
      HASH_INVOKE_FROM_EVAL(0x080594ABE715B478LL, hphp_splfileobject_current);
      HASH_INVOKE_FROM_EVAL(0x6497CC8295DDB478LL, fb_thrift_unserialize);
      break;
    case 1145:
      HASH_INVOKE_FROM_EVAL(0x4859AF715D5A3479LL, magickmagnifyimage);
      break;
    case 1148:
      HASH_INVOKE_FROM_EVAL(0x1A08C578AD3BC47CLL, apache_response_headers);
      HASH_INVOKE_FROM_EVAL(0x2FA7269AB0E1147CLL, mysql_field_seek);
      break;
    case 1150:
      HASH_INVOKE_FROM_EVAL(0x1D583AA4F7F6547ELL, drawpathlinetorelative);
      HASH_INVOKE_FROM_EVAL(0x0AC36D9F961B247ELL, newpixeliterator);
      break;
    case 1151:
      HASH_INVOKE_FROM_EVAL(0x68AE04B02253B47FLL, mb_parse_str);
      break;
    case 1154:
      HASH_INVOKE_FROM_EVAL(0x4590C853C2027482LL, magickembossimage);
      break;
    case 1157:
      HASH_INVOKE_FROM_EVAL(0x250DD3D58EA37485LL, gmstrftime);
      HASH_INVOKE_FROM_EVAL(0x61499C92F4FBA485LL, hphp_splfileobject_fgetc);
      break;
    case 1161:
      HASH_INVOKE_FROM_EVAL(0x4F7EAF5B37663489LL, magickgetimageredprimary);
      break;
    case 1162:
      HASH_INVOKE_FROM_EVAL(0x7E88764A1DE8548ALL, drawgetstrokewidth);
      break;
    case 1163:
      HASH_INVOKE_FROM_EVAL(0x5860ACF621DD948BLL, is_file);
      break;
    case 1165:
      HASH_INVOKE_FROM_EVAL(0x23511F83C2BC548DLL, header);
      HASH_INVOKE_FROM_EVAL(0x275D127C87EF048DLL, mysql_db_query);
      break;
    case 1167:
      HASH_INVOKE_FROM_EVAL(0x43672229728A648FLL, drawpushpattern);
      break;
    case 1171:
      HASH_INVOKE_FROM_EVAL(0x56377FCC2447D493LL, magicksetimagepixels);
      break;
    case 1175:
      HASH_INVOKE_FROM_EVAL(0x353E2A635A47F497LL, evhttp_get);
      HASH_INVOKE_FROM_EVAL(0x5388045C2D13D497LL, mysql_num_fields);
      break;
    case 1181:
      HASH_INVOKE_FROM_EVAL(0x7A59813AC331449DLL, mb_ereg_search_regs);
      break;
    case 1183:
      HASH_INVOKE_FROM_EVAL(0x2B8C2AFB154E449FLL, oci_num_fields);
      HASH_INVOKE_FROM_EVAL(0x7FF66005524E649FLL, drawgettextdecoration);
      break;
    case 1188:
      HASH_INVOKE_FROM_EVAL(0x6EC476E42A53A4A4LL, ldap_err2str);
      break;
    case 1189:
      HASH_INVOKE_FROM_EVAL(0x18BE9B1C2DE6D4A5LL, imagexbm);
      break;
    case 1193:
      HASH_INVOKE_FROM_EVAL(0x386378F2BA3234A9LL, magickevaluateimage);
      break;
    case 1196:
      HASH_INVOKE_FROM_EVAL(0x245AA2790C87C4ACLL, image_type_to_mime_type);
      HASH_INVOKE_FROM_EVAL(0x6E8FFA56842304ACLL, drawgetfont);
      break;
    case 1197:
      HASH_INVOKE_FROM_EVAL(0x3D98ACFCEBB764ADLL, hphp_set_property);
      break;
    case 1199:
      HASH_INVOKE_FROM_EVAL(0x42463E7E5C3434AFLL, mb_strrichr);
      HASH_INVOKE_FROM_EVAL(0x6AC751181531F4AFLL, simplexml_load_string);
      break;
    case 1200:
      HASH_INVOKE_FROM_EVAL(0x0E11D317044974B0LL, magickgetnumberimages);
      HASH_INVOKE_FROM_EVAL(0x3AF65A9F3653E4B0LL, addslashes);
      break;
    case 1201:
      HASH_INVOKE_FROM_EVAL(0x060619D7A1B5F4B1LL, checkdate);
      break;
    case 1203:
      HASH_INVOKE_FROM_EVAL(0x57034CAD772AF4B3LL, magickgetimagechannelmean);
      break;
    case 1204:
      HASH_INVOKE_FROM_EVAL(0x00621C58E54D44B4LL, hphp_recursiveiteratoriterator_key);
      break;
    case 1206:
      HASH_INVOKE_FROM_EVAL(0x12A9166E68DCF4B6LL, pixelgetgreen);
      break;
    case 1207:
      HASH_INVOKE_FROM_EVAL(0x7EEBC81AF9BC54B7LL, xml_parser_free);
      break;
    case 1209:
      HASH_INVOKE_FROM_EVAL(0x5351290CD139A4B9LL, mb_strrpos);
      break;
    case 1210:
      HASH_INVOKE_FROM_EVAL(0x6B49D11E633274BALL, fopen);
      break;
    case 1213:
      HASH_INVOKE_FROM_EVAL(0x35BE8F6E7726C4BDLL, dechex);
      HASH_INVOKE_FROM_EVAL(0x5BA371A93F60F4BDLL, use_soap_error_handler);
      break;
    case 1214:
      HASH_INVOKE_FROM_EVAL(0x57278846B8B0E4BELL, ldap_count_entries);
      break;
    case 1215:
      HASH_INVOKE_FROM_EVAL(0x01681C307C5AE4BFLL, strtoupper);
      break;
    case 1219:
      HASH_INVOKE_FROM_EVAL(0x7AAC29849263C4C3LL, getprotobyname);
      break;
    case 1220:
      HASH_INVOKE_FROM_EVAL(0x67EADCF4E81084C4LL, mb_ereg);
      HASH_INVOKE_FROM_EVAL(0x4A24DB9D6B0334C4LL, hphp_recursivedirectoryiterator_next);
      break;
    case 1221:
      HASH_INVOKE_FROM_EVAL(0x34A38DDF2CD914C5LL, long2ip);
      break;
    case 1222:
      HASH_INVOKE_FROM_EVAL(0x651F7FBBA90604C6LL, magickgetimageindex);
      break;
    case 1224:
      HASH_INVOKE_FROM_EVAL(0x1B8BBFC882FDB4C8LL, magicktintimage);
      break;
    case 1230:
      HASH_INVOKE_FROM_EVAL(0x60783C20BF7724CELL, mailparse_msg_free);
      break;
    case 1231:
      HASH_INVOKE_FROM_EVAL(0x72DECE786967A4CFLL, magickpreviousimage);
      break;
    case 1232:
      HASH_INVOKE_FROM_EVAL(0x7DF31BD0D23FD4D0LL, oci_num_rows);
      break;
    case 1233:
      HASH_INVOKE_FROM_EVAL(0x29EE24C41FD3D4D1LL, mysql_field_name);
      break;
    case 1238:
      HASH_INVOKE_FROM_EVAL(0x19ECDD5A937DD4D6LL, mailparse_msg_get_part_data);
      break;
    case 1239:
      HASH_INVOKE_FROM_EVAL(0x215403F1E335C4D7LL, magicksolarizeimage);
      break;
    case 1240:
      HASH_INVOKE_FROM_EVAL(0x2532EB687D51E4D8LL, unregister_tick_function);
      HASH_INVOKE_FROM_EVAL(0x14BF763DDDC014D8LL, imagepsencodefont);
      HASH_INVOKE_FROM_EVAL(0x56B908FC91C834D8LL, magickflopimage);
      HASH_INVOKE_FROM_EVAL(0x1301F911ED6D54D8LL, is_nan);
      HASH_INVOKE_FROM_EVAL(0x575C5AE3D2A694D8LL, ob_end_clean);
      break;
    case 1247:
      HASH_INVOKE_FROM_EVAL(0x747A7F585CD694DFLL, zend_version);
      HASH_INVOKE_FROM_EVAL(0x2E5E5A0FC3B5C4DFLL, xml_set_character_data_handler);
      break;
    case 1248:
      HASH_INVOKE_FROM_EVAL(0x340A51AE22A924E0LL, reset);
      break;
    case 1251:
      HASH_INVOKE_FROM_EVAL(0x7D57A0D72D6254E3LL, ob_implicit_flush);
      break;
    case 1262:
      HASH_INVOKE_FROM_EVAL(0x5895ADDD91F354EELL, hphp_thread_set_warmup_enabled);
      break;
    case 1265:
      HASH_INVOKE_FROM_EVAL(0x65BD541EAB38E4F1LL, mysql_close);
      break;
    case 1268:
      HASH_INVOKE_FROM_EVAL(0x436B36C5EB8DB4F4LL, mcrypt_generic);
      break;
    case 1269:
      HASH_INVOKE_FROM_EVAL(0x528AC8D252D224F5LL, log10);
      HASH_INVOKE_FROM_EVAL(0x112A0ACDD8B9D4F5LL, mb_list_mime_names);
      break;
    case 1272:
      HASH_INVOKE_FROM_EVAL(0x011006D90D79E4F8LL, mysql_errno);
      break;
    case 1277:
      HASH_INVOKE_FROM_EVAL(0x002387F1D23B44FDLL, mcrypt_list_modes);
      break;
    case 1287:
      HASH_INVOKE_FROM_EVAL(0x197A5D237BD4C507LL, mb_ereg_search_getpos);
      break;
    case 1288:
      HASH_INVOKE_FROM_EVAL(0x63A08D6AD1209508LL, magickgetexception);
      break;
    case 1291:
      HASH_INVOKE_FROM_EVAL(0x71DCF11E3640C50BLL, hphp_directoryiterator_valid);
      break;
    case 1295:
      HASH_INVOKE_FROM_EVAL(0x5A66CCB3D924450FLL, xml_parser_create);
      break;
    case 1297:
      HASH_INVOKE_FROM_EVAL(0x09D5355CA8198511LL, mb_internal_encoding);
      HASH_INVOKE_FROM_EVAL(0x3C0304A55503D511LL, magickgetimageiterations);
      break;
    case 1299:
      HASH_INVOKE_FROM_EVAL(0x772E8BF114FEF513LL, eregi_replace);
      break;
    case 1300:
      HASH_INVOKE_FROM_EVAL(0x100385A0988FD514LL, magickgetfilename);
      break;
    case 1314:
      HASH_INVOKE_FROM_EVAL(0x7DA98E0379D33522LL, chdir);
      break;
    case 1316:
      HASH_INVOKE_FROM_EVAL(0x28E724EDE0BB6524LL, mb_strcut);
      break;
    case 1317:
      HASH_INVOKE_FROM_EVAL(0x230FE1D6EC599525LL, link);
      break;
    case 1318:
      HASH_INVOKE_FROM_EVAL(0x57DDA4C3F7FF8526LL, fputcsv);
      break;
    case 1319:
      HASH_INVOKE_FROM_EVAL(0x6B2B942CAF1A2527LL, array_shift);
      break;
    case 1324:
      HASH_INVOKE_FROM_EVAL(0x1AB55BBA0967952CLL, mb_convert_variables);
      break;
    case 1327:
      HASH_INVOKE_FROM_EVAL(0x6770E2559C9A152FLL, openssl_private_decrypt);
      break;
    case 1329:
      HASH_INVOKE_FROM_EVAL(0x6776C27C6123D531LL, dl);
      break;
    case 1330:
      HASH_INVOKE_FROM_EVAL(0x6193A26936F4D532LL, disk_total_space);
      break;
    case 1331:
      HASH_INVOKE_FROM_EVAL(0x313D2A505076A533LL, dir);
      break;
    case 1333:
      HASH_INVOKE_FROM_EVAL(0x6C87406DDC0AB535LL, mcrypt_ecb);
      break;
    case 1334:
      HASH_INVOKE_FROM_EVAL(0x0E80D04691227536LL, eval);
      break;
    case 1335:
      HASH_INVOKE_FROM_EVAL(0x557C72DE98679537LL, hash_update_stream);
      HASH_INVOKE_FROM_EVAL(0x175B86BCB3124537LL, magickgetexceptionstring);
      break;
    case 1337:
      HASH_INVOKE_FROM_EVAL(0x3C88F0FAC3EDD539LL, phpversion);
      break;
    case 1340:
      HASH_INVOKE_FROM_EVAL(0x5CA55E62F2A5953CLL, drawgetstrokeopacity);
      break;
    case 1341:
      HASH_INVOKE_FROM_EVAL(0x0F32841DBF7A053DLL, fb_crossall_query);
      break;
    case 1342:
      HASH_INVOKE_FROM_EVAL(0x36A80B48E08B753ELL, implode);
      break;
    case 1346:
      HASH_INVOKE_FROM_EVAL(0x59A44591E67D4542LL, drawrender);
      break;
    case 1347:
      HASH_INVOKE_FROM_EVAL(0x20E2B1D920122543LL, die);
      HASH_INVOKE_FROM_EVAL(0x0962EACAE0F0B543LL, hphp_splfileinfo_getlinktarget);
      break;
    case 1348:
      HASH_INVOKE_FROM_EVAL(0x4D397FE5D0C0B544LL, magickmedianfilterimage);
      break;
    case 1350:
      HASH_INVOKE_FROM_EVAL(0x12A739BE0ED32546LL, ignore_user_abort);
      HASH_INVOKE_FROM_EVAL(0x081F76AC889BC546LL, getrusage);
      break;
    case 1352:
      HASH_INVOKE_FROM_EVAL(0x0AD3BFAB5F780548LL, magickcoalesceimages);
      break;
    case 1355:
      HASH_INVOKE_FROM_EVAL(0x40CE61115E11154BLL, msg_stat_queue);
      break;
    case 1357:
      HASH_INVOKE_FROM_EVAL(0x0F0702D91EAFB54DLL, drawgettextantialias);
      HASH_INVOKE_FROM_EVAL(0x1B9E769FFEC3C54DLL, pcntl_wtermsig);
      break;
    case 1359:
      HASH_INVOKE_FROM_EVAL(0x063200B5AAFEC54FLL, mysql_thread_id);
      break;
    case 1370:
      HASH_INVOKE_FROM_EVAL(0x268EE73DB2EA555ALL, get_object_vars);
      break;
    case 1372:
      HASH_INVOKE_FROM_EVAL(0x5749AD20CAFCD55CLL, pixelgetbluequantum);
      break;
    case 1379:
      HASH_INVOKE_FROM_EVAL(0x1B1B2D70792D9563LL, mysql_get_client_info);
      break;
    case 1382:
      HASH_INVOKE_FROM_EVAL(0x6E2FDBD28F895566LL, timezone_abbreviations_list);
      HASH_INVOKE_FROM_EVAL(0x3DA2058E5C540566LL, spliti);
      break;
    case 1386:
      HASH_INVOKE_FROM_EVAL(0x74599147803DC56ALL, magickgetstringwidth);
      break;
    case 1387:
      HASH_INVOKE_FROM_EVAL(0x0DE86977367F656BLL, register_shutdown_function);
      break;
    case 1390:
      HASH_INVOKE_FROM_EVAL(0x2A1F1B52160DE56ELL, zend_logo_guid);
      break;
    case 1391:
      HASH_INVOKE_FROM_EVAL(0x016722439BBA756FLL, filetype);
      break;
    case 1392:
      HASH_INVOKE_FROM_EVAL(0x13D0427F3BB3E570LL, get_declared_interfaces);
      HASH_INVOKE_FROM_EVAL(0x21B3935EB3140570LL, mysql_fetch_object);
      break;
    case 1393:
      HASH_INVOKE_FROM_EVAL(0x2AD3361DE8B1D571LL, pcntl_signal_dispatch);
      break;
    case 1396:
      HASH_INVOKE_FROM_EVAL(0x636C871213F37574LL, mcrypt_encrypt);
      break;
    case 1399:
      HASH_INVOKE_FROM_EVAL(0x412521E7ADB21577LL, iconv_mime_decode_headers);
      HASH_INVOKE_FROM_EVAL(0x1E154D823451B577LL, magicksetresolution);
      break;
    case 1400:
      HASH_INVOKE_FROM_EVAL(0x588DE7449C8E0578LL, oci_connect);
      break;
    case 1401:
      HASH_INVOKE_FROM_EVAL(0x1DC8A386E219C579LL, ldap_add);
      break;
    case 1405:
      HASH_INVOKE_FROM_EVAL(0x78EDB608B02A857DLL, join);
      HASH_INVOKE_FROM_EVAL(0x22E08DEDF360057DLL, pixelsetmagenta);
      break;
    case 1406:
      HASH_INVOKE_FROM_EVAL(0x31529E9BCA1E157ELL, shm_remove);
      HASH_INVOKE_FROM_EVAL(0x132776D93181E57ELL, ldap_set_option);
      break;
    case 1410:
      HASH_INVOKE_FROM_EVAL(0x02688986D5D76582LL, magickspreadimage);
      HASH_INVOKE_FROM_EVAL(0x0B1F0EB755BDB582LL, ispixeliterator);
      break;
    case 1411:
      HASH_INVOKE_FROM_EVAL(0x3B2CD86F5DB72583LL, magickblackthresholdimage);
      break;
    case 1419:
      HASH_INVOKE_FROM_EVAL(0x3A34B44E4C51C58BLL, xml_set_element_handler);
      break;
    case 1420:
      HASH_INVOKE_FROM_EVAL(0x560C2F71978CE58CLL, shm_put_var);
      break;
    case 1426:
      HASH_INVOKE_FROM_EVAL(0x3E9519FE856C4592LL, curl_multi_init);
      HASH_INVOKE_FROM_EVAL(0x5464E148E8A0C592LL, get_extension_funcs);
      HASH_INVOKE_FROM_EVAL(0x7F65501600346592LL, mcrypt_get_block_size);
      break;
    case 1427:
      HASH_INVOKE_FROM_EVAL(0x0F5984B8A7FD8593LL, hphp_splfileinfo_getperms);
      break;
    case 1431:
      HASH_INVOKE_FROM_EVAL(0x513787A813DB0597LL, date_date_set);
      break;
    case 1433:
      HASH_INVOKE_FROM_EVAL(0x12F502A88E0AA599LL, magickcompositeimage);
      break;
    case 1434:
      HASH_INVOKE_FROM_EVAL(0x77F1EDE7D5EF759ALL, apc_cache_info);
      break;
    case 1435:
      HASH_INVOKE_FROM_EVAL(0x37D003B09D0C759BLL, stream_get_contents);
      break;
    case 1440:
      HASH_INVOKE_FROM_EVAL(0x20502FCACBB9F5A0LL, convert_uuencode);
      break;
    case 1441:
      HASH_INVOKE_FROM_EVAL(0x297690F3A63335A1LL, magickrotateimage);
      break;
    case 1444:
      HASH_INVOKE_FROM_EVAL(0x3C014439AE5D75A4LL, magickgetcharheight);
      break;
    case 1448:
      HASH_INVOKE_FROM_EVAL(0x4FBB1F662399A5A8LL, is_soap_fault);
      break;
    case 1451:
      HASH_INVOKE_FROM_EVAL(0x79E0380A18A345ABLL, apache_get_modules);
      break;
    case 1452:
      HASH_INVOKE_FROM_EVAL(0x763BA2B1C60A55ACLL, pixelgetalphaquantum);
      break;
    case 1453:
      HASH_INVOKE_FROM_EVAL(0x4110AF96B98B25ADLL, gzeof);
      break;
    case 1455:
      HASH_INVOKE_FROM_EVAL(0x1636FBA5043CF5AFLL, ldap_error);
      break;
    case 1459:
      HASH_INVOKE_FROM_EVAL(0x001DBE44BC0B55B3LL, magicksetimagecolormapcolor);
      break;
    case 1461:
      HASH_INVOKE_FROM_EVAL(0x3F9C5B4708FC55B5LL, timezone_name_get);
      HASH_INVOKE_FROM_EVAL(0x5EFE573046B565B5LL, mcrypt_module_close);
      break;
    case 1466:
      HASH_INVOKE_FROM_EVAL(0x05B8EB2C515885BALL, vprintf);
      break;
    case 1472:
      HASH_INVOKE_FROM_EVAL(0x61465CD8C67905C0LL, openssl_pkey_free);
      break;
    case 1473:
      HASH_INVOKE_FROM_EVAL(0x7731B90FB7C975C1LL, magickremoveimageprofile);
      break;
    case 1478:
      HASH_INVOKE_FROM_EVAL(0x3B3D5CE69B1565C6LL, mcrypt_module_is_block_mode);
      break;
    case 1481:
      HASH_INVOKE_FROM_EVAL(0x75B299F5E35A95C9LL, mb_strwidth);
      HASH_INVOKE_FROM_EVAL(0x60F8818C0F38D5C9LL, hphp_directoryiterator___tostring);
      break;
    case 1483:
      HASH_INVOKE_FROM_EVAL(0x6751946191FBE5CBLL, override_function);
      break;
    case 1484:
      HASH_INVOKE_FROM_EVAL(0x2A6F86821A39C5CCLL, expm1);
      break;
    case 1487:
      HASH_INVOKE_FROM_EVAL(0x5D9818B3E1C385CFLL, openssl_pkey_export_to_file);
      break;
    case 1489:
      HASH_INVOKE_FROM_EVAL(0x054503DBBF5CA5D1LL, imagecopy);
      break;
    case 1492:
      HASH_INVOKE_FROM_EVAL(0x2FE56B4C457AB5D4LL, ctype_graph);
      break;
    case 1493:
      HASH_INVOKE_FROM_EVAL(0x43901543EA8625D5LL, curl_multi_select);
      break;
    case 1494:
      HASH_INVOKE_FROM_EVAL(0x6D265875A19685D6LL, is_float);
      break;
    case 1495:
      HASH_INVOKE_FROM_EVAL(0x617AD1AD708785D7LL, magickmodulateimage);
      break;
    case 1508:
      HASH_INVOKE_FROM_EVAL(0x3A9643992AC805E4LL, magickdrawimage);
      break;
    case 1510:
      HASH_INVOKE_FROM_EVAL(0x6FE2E44FBC44E5E6LL, magickaddnoiseimage);
      HASH_INVOKE_FROM_EVAL(0x08069ECE0EA3C5E6LL, imagecopymergegray);
      break;
    case 1514:
      HASH_INVOKE_FROM_EVAL(0x0B7ACBAB402015EALL, mb_send_mail);
      break;
    case 1518:
      HASH_INVOKE_FROM_EVAL(0x3076D369F63E65EELL, pixelgetalpha);
      break;
    case 1524:
      HASH_INVOKE_FROM_EVAL(0x1E89F15B7F2805F4LL, openssl_pkcs7_encrypt);
      HASH_INVOKE_FROM_EVAL(0x459330C31956A5F4LL, vsprintf);
      break;
    case 1525:
      HASH_INVOKE_FROM_EVAL(0x0D1BD0E5AF4175F5LL, drawsetfont);
      HASH_INVOKE_FROM_EVAL(0x73A1F34DF95B35F5LL, get_defined_constants);
      break;
    case 1527:
      HASH_INVOKE_FROM_EVAL(0x18E4CC945005E5F7LL, drawpushclippath);
      break;
    case 1528:
      HASH_INVOKE_FROM_EVAL(0x7C48F6EA39B7B5F8LL, magickadaptivethresholdimage);
      break;
    case 1531:
      HASH_INVOKE_FROM_EVAL(0x0FEC4ED541B7F5FBLL, magickgetimagevirtualpixelmethod);
      break;
    case 1532:
      HASH_INVOKE_FROM_EVAL(0x39156C7CCE2D75FCLL, hash_update);
      break;
    case 1533:
      HASH_INVOKE_FROM_EVAL(0x0C1CB24A3FC065FDLL, bcmul);
      break;
    case 1534:
      HASH_INVOKE_FROM_EVAL(0x397D3C6576ED75FELL, set_include_path);
      break;
    case 1535:
      HASH_INVOKE_FROM_EVAL(0x40A557CBB9FC35FFLL, mysql_tablename);
      break;
    case 1537:
      HASH_INVOKE_FROM_EVAL(0x0F3403D8676C2601LL, mysql_query);
      break;
    case 1545:
      HASH_INVOKE_FROM_EVAL(0x52D5698F31D12609LL, pcntl_setpriority);
      break;
    case 1555:
      HASH_INVOKE_FROM_EVAL(0x36783304F63C4613LL, sscanf);
      HASH_INVOKE_FROM_EVAL(0x4AC405EA2B8C4613LL, magickresetiterator);
      break;
    case 1557:
      HASH_INVOKE_FROM_EVAL(0x6AD774816F8F7615LL, mb_strrchr);
      break;
    case 1558:
      HASH_INVOKE_FROM_EVAL(0x66C7616225F1C616LL, pixelsetgreen);
      HASH_INVOKE_FROM_EVAL(0x7FA6D13B0D38E616LL, imagegif);
      break;
    case 1561:
      HASH_INVOKE_FROM_EVAL(0x6DD51BF03F003619LL, mailparse_uudecode_all);
      HASH_INVOKE_FROM_EVAL(0x2F29627AF1A97619LL, shm_attach);
      break;
    case 1563:
      HASH_INVOKE_FROM_EVAL(0x40DDE277D934061BLL, gzputs);
      break;
    case 1564:
      HASH_INVOKE_FROM_EVAL(0x70725954DC99F61CLL, mcrypt_create_iv);
      break;
    case 1565:
      HASH_INVOKE_FROM_EVAL(0x7E98B97C1B5D861DLL, magickqueryconfigureoptions);
      break;
    case 1569:
      HASH_INVOKE_FROM_EVAL(0x0F71DDE51AA55621LL, hphp_output_global_state);
      break;
    case 1570:
      HASH_INVOKE_FROM_EVAL(0x134550B9EB596622LL, drawgetfontstyle);
      break;
    case 1576:
      HASH_INVOKE_FROM_EVAL(0x1E77B3BCF062D628LL, magickreadimage);
      break;
    case 1577:
      HASH_INVOKE_FROM_EVAL(0x679B81CE06EE0629LL, bcdiv);
      break;
    case 1578:
      HASH_INVOKE_FROM_EVAL(0x608EA42B08A7462ALL, linkinfo);
      break;
    case 1580:
      HASH_INVOKE_FROM_EVAL(0x5CEA60D9C54A162CLL, pcntl_wifstopped);
      break;
    case 1583:
      HASH_INVOKE_FROM_EVAL(0x652C331CE138362FLL, is_string);
      break;
    case 1585:
      HASH_INVOKE_FROM_EVAL(0x5AD6595ACA656631LL, pixelresetiterator);
      break;
    case 1591:
      HASH_INVOKE_FROM_EVAL(0x60276BC7990F9637LL, mysql_list_dbs);
      break;
    case 1595:
      HASH_INVOKE_FROM_EVAL(0x391C68F2BE85E63BLL, pixelgetiteratorexceptionstring);
      break;
    case 1596:
      HASH_INVOKE_FROM_EVAL(0x62DE03461EF4663CLL, symlink);
      break;
    case 1598:
      HASH_INVOKE_FROM_EVAL(0x60302D15A677963ELL, ldap_free_result);
      break;
    case 1599:
      HASH_INVOKE_FROM_EVAL(0x17242BC6C9C9563FLL, crypt);
      break;
    case 1606:
      HASH_INVOKE_FROM_EVAL(0x4901517CB796F646LL, msg_set_queue);
      HASH_INVOKE_FROM_EVAL(0x234F6A0A486E8646LL, natcasesort);
      break;
    case 1613:
      HASH_INVOKE_FROM_EVAL(0x4FAA0B35DDAB364DLL, oci_statement_type);
      break;
    case 1614:
      HASH_INVOKE_FROM_EVAL(0x7E978C38D741664ELL, fgetcsv);
      HASH_INVOKE_FROM_EVAL(0x769E5C6A5369F64ELL, ob_list_handlers);
      break;
    case 1617:
      HASH_INVOKE_FROM_EVAL(0x5F3DA61B6506A651LL, oci_error);
      break;
    case 1618:
      HASH_INVOKE_FROM_EVAL(0x03066277F647E652LL, hphp_splfileobject_ftell);
      break;
    case 1621:
      HASH_INVOKE_FROM_EVAL(0x629EDDC1E74ED655LL, array_uintersect_assoc);
      HASH_INVOKE_FROM_EVAL(0x6BE3B1277BBF8655LL, oci_pconnect);
      break;
    case 1628:
      HASH_INVOKE_FROM_EVAL(0x381BBFEABFEC865CLL, libxml_get_last_error);
      break;
    case 1630:
      HASH_INVOKE_FROM_EVAL(0x205BB9CFF397B65ELL, ldap_mod_replace);
      break;
    case 1631:
      HASH_INVOKE_FROM_EVAL(0x1355AFB40AB1165FLL, drawsetfontstyle);
      break;
    case 1636:
      HASH_INVOKE_FROM_EVAL(0x5B0759F776EC2664LL, newdrawingwand);
      break;
    case 1637:
      HASH_INVOKE_FROM_EVAL(0x08A6AD20C2C5A665LL, hphp_set_static_property);
      break;
    case 1639:
      HASH_INVOKE_FROM_EVAL(0x557A08AC57724667LL, hphp_splfileinfo_getpathinfo);
      break;
    case 1647:
      HASH_INVOKE_FROM_EVAL(0x7D68CADB8069466FLL, magickaverageimages);
      break;
    case 1651:
      HASH_INVOKE_FROM_EVAL(0x126FC82D358E9673LL, magicksetimagevirtualpixelmethod);
      break;
    case 1655:
      HASH_INVOKE_FROM_EVAL(0x001F23CAC36E3677LL, magickgetimagescene);
      break;
    case 1658:
      HASH_INVOKE_FROM_EVAL(0x583AA7498A40E67ALL, drawgetcliprule);
      break;
    case 1659:
      HASH_INVOKE_FROM_EVAL(0x5BCED33A57D9B67BLL, intval);
      break;
    case 1661:
      HASH_INVOKE_FROM_EVAL(0x69616E2817E1967DLL, fileinode);
      break;
    case 1662:
      HASH_INVOKE_FROM_EVAL(0x20B9799C1BDDE67ELL, oci_fetch);
      break;
    case 1666:
      HASH_INVOKE_FROM_EVAL(0x665D2615E377A682LL, pagelet_server_task_start);
      HASH_INVOKE_FROM_EVAL(0x5F6750E1C7E5D682LL, imageinterlace);
      break;
    case 1677:
      HASH_INVOKE_FROM_EVAL(0x07A946E3DD8E968DLL, ldap_connect);
      break;
    case 1679:
      HASH_INVOKE_FROM_EVAL(0x2EFF4F69EB1DF68FLL, apache_get_config);
      break;
    case 1680:
      HASH_INVOKE_FROM_EVAL(0x166D5E2336878690LL, imagepolygon);
      break;
    case 1681:
      HASH_INVOKE_FROM_EVAL(0x57BA0BC1A4870691LL, magickgetquantumdepth);
      break;
    case 1682:
      HASH_INVOKE_FROM_EVAL(0x16BE0DBA42800692LL, magickgetimagesize);
      break;
    case 1684:
      HASH_INVOKE_FROM_EVAL(0x2673FAB2B4DE4694LL, destroypixelwands);
      break;
    case 1685:
      HASH_INVOKE_FROM_EVAL(0x7186EF5EF0581695LL, exp);
      break;
    case 1686:
      HASH_INVOKE_FROM_EVAL(0x0DD7A2DB53093696LL, utf8_decode);
      break;
    case 1691:
      HASH_INVOKE_FROM_EVAL(0x24D34E49C21DE69BLL, mb_stristr);
      break;
    case 1694:
      HASH_INVOKE_FROM_EVAL(0x5E9821F06711669ELL, gethostbynamel);
      break;
    case 1702:
      HASH_INVOKE_FROM_EVAL(0x0D841874977646A6LL, krsort);
      break;
    case 1703:
      HASH_INVOKE_FROM_EVAL(0x38BBEE42F136D6A7LL, magickgetimageblueprimary);
      break;
    case 1704:
      HASH_INVOKE_FROM_EVAL(0x45AB8F419BA666A8LL, drawpathlinetohorizontalabsolute);
      break;
    case 1706:
      HASH_INVOKE_FROM_EVAL(0x6E9D4D3A119D76AALL, wandgetexceptiontype);
      HASH_INVOKE_FROM_EVAL(0x48C4DB333172F6AALL, parse_url);
      HASH_INVOKE_FROM_EVAL(0x541926FB6D6FC6AALL, magickgetimagecolors);
      break;
    case 1707:
      HASH_INVOKE_FROM_EVAL(0x72B3F8E02D8B16ABLL, array_unshift);
      break;
    case 1711:
      HASH_INVOKE_FROM_EVAL(0x65497D63C0D716AFLL, getdate);
      break;
    case 1712:
      HASH_INVOKE_FROM_EVAL(0x23AAF570C78AC6B0LL, ip2long);
      break;
    case 1714:
      HASH_INVOKE_FROM_EVAL(0x0D669C546C0EC6B2LL, proc_terminate);
      break;
    case 1717:
      HASH_INVOKE_FROM_EVAL(0x798B4197212456B5LL, bcpowmod);
      HASH_INVOKE_FROM_EVAL(0x623CE67C41A9E6B5LL, ldap_next_attribute);
      HASH_INVOKE_FROM_EVAL(0x7E773A36449576B5LL, imagecharup);
      break;
    case 1720:
      HASH_INVOKE_FROM_EVAL(0x44A226F0E402D6B8LL, oci_execute);
      break;
    case 1721:
      HASH_INVOKE_FROM_EVAL(0x316F054CB76446B9LL, openssl_sign);
      break;
    case 1722:
      HASH_INVOKE_FROM_EVAL(0x72B901C3605CB6BALL, pixelsetopacity);
      break;
    case 1726:
      HASH_INVOKE_FROM_EVAL(0x081D5EA9920076BELL, drawgetfillalpha);
      break;
    case 1732:
      HASH_INVOKE_FROM_EVAL(0x4842AF70A71BE6C4LL, uksort);
      HASH_INVOKE_FROM_EVAL(0x34184B42D6AA86C4LL, mb_ereg_search_pos);
      HASH_INVOKE_FROM_EVAL(0x3C042C09F662C6C4LL, drawsetstrokepatternurl);
      break;
    case 1733:
      HASH_INVOKE_FROM_EVAL(0x28526EF49FF516C5LL, pixelsetgreenquantum);
      break;
    case 1736:
      HASH_INVOKE_FROM_EVAL(0x29DD2C9F889246C8LL, passthru);
      break;
    case 1737:
      HASH_INVOKE_FROM_EVAL(0x2D8DF100C30D06C9LL, xmlwriter_set_indent_string);
      break;
    case 1738:
      HASH_INVOKE_FROM_EVAL(0x41BCD0A72B1396CALL, xmlwriter_start_dtd_attlist);
      break;
    case 1745:
      HASH_INVOKE_FROM_EVAL(0x2B3D5B9AF915D6D1LL, imagecopymerge);
      break;
    case 1748:
      HASH_INVOKE_FROM_EVAL(0x04A0E6E8337E56D4LL, drawcolor);
      break;
    case 1749:
      HASH_INVOKE_FROM_EVAL(0x317FFA522A7D96D5LL, imagefilledpolygon);
      break;
    case 1750:
      HASH_INVOKE_FROM_EVAL(0x158348EB08F406D6LL, strtr);
      break;
    case 1761:
      HASH_INVOKE_FROM_EVAL(0x11DA0A0EB8E0D6E1LL, clock_getres);
      break;
    case 1764:
      HASH_INVOKE_FROM_EVAL(0x40D0E3AF799226E4LL, bin2hex);
      HASH_INVOKE_FROM_EVAL(0x1CF3544CB5C9D6E4LL, xml_set_processing_instruction_handler);
      HASH_INVOKE_FROM_EVAL(0x31FFFC333AA6D6E4LL, drawsetfillrule);
      break;
    case 1767:
      HASH_INVOKE_FROM_EVAL(0x44201A16F3D876E7LL, trim);
      break;
    case 1772:
      HASH_INVOKE_FROM_EVAL(0x0A5EFECAE87EA6ECLL, hphp_splfileobject_eof);
      break;
    case 1773:
      HASH_INVOKE_FROM_EVAL(0x04BD4B43921956EDLL, ldap_search);
      break;
    case 1774:
      HASH_INVOKE_FROM_EVAL(0x76382756EA00B6EELL, is_object);
      break;
    case 1775:
      HASH_INVOKE_FROM_EVAL(0x0FA74D85885F86EFLL, output_add_rewrite_var);
      break;
    case 1776:
      HASH_INVOKE_FROM_EVAL(0x014BD9A6823256F0LL, extract);
      break;
    case 1777:
      HASH_INVOKE_FROM_EVAL(0x6B7347DF1AA7E6F1LL, drawpopdefs);
      break;
    case 1779:
      HASH_INVOKE_FROM_EVAL(0x6F1968BE449FB6F3LL, stream_socket_pair);
      HASH_INVOKE_FROM_EVAL(0x5768A80BB0B926F3LL, apd_set_session_trace_socket);
      break;
    case 1785:
      HASH_INVOKE_FROM_EVAL(0x20740D956F0236F9LL, image2wbmp);
      break;
    case 1791:
      HASH_INVOKE_FROM_EVAL(0x623C20A027A606FFLL, array_uintersect_uassoc);
      break;
    case 1793:
      HASH_INVOKE_FROM_EVAL(0x1A80392751AA7701LL, magickgetformat);
      break;
    case 1796:
      HASH_INVOKE_FROM_EVAL(0x5EFE15CE970A5704LL, drawpolyline);
      break;
    case 1801:
      HASH_INVOKE_FROM_EVAL(0x7681C631B34CC709LL, hphp_splfileobject_fflush);
      HASH_INVOKE_FROM_EVAL(0x21972B2BC7A14709LL, imageistruecolor);
      break;
    case 1803:
      HASH_INVOKE_FROM_EVAL(0x5F7873F2DF5BE70BLL, ctype_cntrl);
      break;
    case 1805:
      HASH_INVOKE_FROM_EVAL(0x7CE752299E80B70DLL, unserialize);
      HASH_INVOKE_FROM_EVAL(0x4F3C0DB2F6C8F70DLL, unlink);
      break;
    case 1807:
      HASH_INVOKE_FROM_EVAL(0x2FB2FA1DD832C70FLL, xmlwriter_write_attribute_ns);
      break;
    case 1812:
      HASH_INVOKE_FROM_EVAL(0x1778ED2AF035F714LL, rsort);
      break;
    case 1813:
      HASH_INVOKE_FROM_EVAL(0x25D578B4772C1715LL, define);
      break;
    case 1816:
      HASH_INVOKE_FROM_EVAL(0x7971A5647C957718LL, date_time_set);
      break;
    case 1819:
      HASH_INVOKE_FROM_EVAL(0x3C16230CBC6D471BLL, imagecreatetruecolor);
      break;
    case 1820:
      HASH_INVOKE_FROM_EVAL(0x50AC61A28C5AC71CLL, imagecolorclosestalpha);
      break;
    case 1824:
      HASH_INVOKE_FROM_EVAL(0x2D213FD80048F720LL, usleep);
      break;
    case 1827:
      HASH_INVOKE_FROM_EVAL(0x78420E0B5D110723LL, imagetruecolortopalette);
      break;
    case 1828:
      HASH_INVOKE_FROM_EVAL(0x4DAA3FBC2BD3A724LL, magickequalizeimage);
      break;
    case 1829:
      HASH_INVOKE_FROM_EVAL(0x31EAD049860CE725LL, posix_kill);
      break;
    case 1830:
      HASH_INVOKE_FROM_EVAL(0x523AB2EA95DAD726LL, get_included_files);
      break;
    case 1831:
      HASH_INVOKE_FROM_EVAL(0x11641BE0F11CD727LL, magickgammaimage);
      break;
    case 1833:
      HASH_INVOKE_FROM_EVAL(0x1D30F1E638D71729LL, readgzfile);
      break;
    case 1834:
      HASH_INVOKE_FROM_EVAL(0x17C0D9B1C10B872ALL, openssl_x509_export);
      HASH_INVOKE_FROM_EVAL(0x1F98B41362CDA72ALL, magickgetimagegreenprimary);
      break;
    case 1837:
      HASH_INVOKE_FROM_EVAL(0x14563723F798172DLL, magickpaintopaqueimage);
      break;
    case 1840:
      HASH_INVOKE_FROM_EVAL(0x0D558F552A784730LL, ob_get_contents);
      break;
    case 1842:
      HASH_INVOKE_FROM_EVAL(0x2B1C192C419B8732LL, drawgetexception);
      break;
    case 1855:
      HASH_INVOKE_FROM_EVAL(0x650E641CC0E3873FLL, connection_aborted);
      break;
    case 1857:
      HASH_INVOKE_FROM_EVAL(0x5062777D2B947741LL, wordwrap);
      break;
    case 1863:
      HASH_INVOKE_FROM_EVAL(0x3CD58419E181A747LL, magickstereoimage);
      HASH_INVOKE_FROM_EVAL(0x13BB9EC5A2D2E747LL, hphp_splfileinfo_isdir);
      break;
    case 1864:
      HASH_INVOKE_FROM_EVAL(0x0D7BBA9608A36748LL, magickcombineimages);
      break;
    case 1865:
      HASH_INVOKE_FROM_EVAL(0x73E4417BA7B49749LL, curl_multi_info_read);
      break;
    case 1866:
      HASH_INVOKE_FROM_EVAL(0x1FF03B7DE19DD74ALL, drawpathmovetorelative);
      break;
    case 1867:
      HASH_INVOKE_FROM_EVAL(0x7DA9307A6149B74BLL, get_meta_tags);
      break;
    case 1873:
      HASH_INVOKE_FROM_EVAL(0x017FF216C00D9751LL, property_exists);
      break;
    case 1875:
      HASH_INVOKE_FROM_EVAL(0x42795829DF700753LL, mysql_get_host_info);
      break;
    case 1876:
      HASH_INVOKE_FROM_EVAL(0x53AEFD595C044754LL, max);
      break;
    case 1879:
      HASH_INVOKE_FROM_EVAL(0x7554E3E8674F2757LL, mb_list_encodings);
      break;
    case 1883:
      HASH_INVOKE_FROM_EVAL(0x05D293F45C15F75BLL, ldap_mod_del);
      break;
    case 1884:
      HASH_INVOKE_FROM_EVAL(0x6D5B592E524AF75CLL, hphp_splfileinfo_getbasename);
      break;
    case 1887:
      HASH_INVOKE_FROM_EVAL(0x3EDB48C5DDD9675FLL, socket_select);
      break;
    case 1888:
      HASH_INVOKE_FROM_EVAL(0x1BD984C11BB16760LL, array_merge);
      HASH_INVOKE_FROM_EVAL(0x7AB5E6EA37196760LL, date_timezone_set);
      break;
    case 1889:
      HASH_INVOKE_FROM_EVAL(0x6AF50085AC2AC761LL, xmlwriter_write_element);
      break;
    case 1893:
      HASH_INVOKE_FROM_EVAL(0x1D803CE961921765LL, md5);
      HASH_INVOKE_FROM_EVAL(0x45631C592AD6D765LL, str_ireplace);
      break;
    case 1894:
      HASH_INVOKE_FROM_EVAL(0x1F4505BE6460D766LL, scandir);
      break;
    case 1895:
      HASH_INVOKE_FROM_EVAL(0x6C280D5855D20767LL, drawsetfillalpha);
      break;
    case 1896:
      HASH_INVOKE_FROM_EVAL(0x179A72074C778768LL, openssl_x509_export_to_file);
      break;
    case 1901:
      HASH_INVOKE_FROM_EVAL(0x3304663FBC6C976DLL, get_html_translation_table);
      HASH_INVOKE_FROM_EVAL(0x553ADA5A41AE976DLL, mb_ereg_replace);
      break;
    case 1902:
      HASH_INVOKE_FROM_EVAL(0x6DB71D850799D76ELL, hphp_splfileobject_fscanf);
      break;
    case 1904:
      HASH_INVOKE_FROM_EVAL(0x6F6C5B9E3DC64770LL, drawgetstrokemiterlimit);
      break;
    case 1909:
      HASH_INVOKE_FROM_EVAL(0x04D9076808F79775LL, getenv);
      break;
    case 1910:
      HASH_INVOKE_FROM_EVAL(0x616DDB67073A0776LL, ord);
      HASH_INVOKE_FROM_EVAL(0x4102C410C5031776LL, magickcolorizeimage);
      break;
    case 1914:
      HASH_INVOKE_FROM_EVAL(0x1FBF36B5D65E677ALL, fb_call_user_func_safe_return);
      HASH_INVOKE_FROM_EVAL(0x4330CE9C9002477ALL, array_udiff_uassoc);
      break;
    case 1915:
      HASH_INVOKE_FROM_EVAL(0x129E39AC523A977BLL, magickgethomeurl);
      break;
    case 1920:
      HASH_INVOKE_FROM_EVAL(0x29824AAA934CE780LL, array_filter);
      break;
    case 1923:
      HASH_INVOKE_FROM_EVAL(0x53B4DBE58B356783LL, imagesetthickness);
      HASH_INVOKE_FROM_EVAL(0x38704D99FEA9B783LL, mysql_fetch_array);
      break;
    case 1924:
      HASH_INVOKE_FROM_EVAL(0x784FD2E7191A3784LL, drawpathellipticarcrelative);
      break;
    case 1925:
      HASH_INVOKE_FROM_EVAL(0x5BFC6198960A5785LL, in_array);
      break;
    case 1926:
      HASH_INVOKE_FROM_EVAL(0x3D3F7C6DE95D5786LL, oci_field_is_null);
      break;
    case 1927:
      HASH_INVOKE_FROM_EVAL(0x4991643BD854D787LL, drawgetexceptionstring);
      break;
    case 1928:
      HASH_INVOKE_FROM_EVAL(0x32D8CE5D0FA6D788LL, ldap_rename);
      break;
    case 1930:
      HASH_INVOKE_FROM_EVAL(0x70A1EC006032E78ALL, pixelgetquantumcolor);
      break;
    case 1935:
      HASH_INVOKE_FROM_EVAL(0x7B4E25772D0AC78FLL, simplexml_load_file);
      break;
    case 1938:
      HASH_INVOKE_FROM_EVAL(0x0D4891A5E1A20792LL, get_defined_functions);
      break;
    case 1945:
      HASH_INVOKE_FROM_EVAL(0x26D226FD28566799LL, date_isodate_set);
      break;
    case 1947:
      HASH_INVOKE_FROM_EVAL(0x1196D899ACCD379BLL, evhttp_recv);
      break;
    case 1949:
      HASH_INVOKE_FROM_EVAL(0x02ECD8C169DF579DLL, feof);
      break;
    case 1951:
      HASH_INVOKE_FROM_EVAL(0x4B092931EFB7979FLL, mysql_create_db);
      break;
    case 1959:
      HASH_INVOKE_FROM_EVAL(0x1F76E954F9A147A7LL, magickcontrastimage);
      break;
    case 1961:
      HASH_INVOKE_FROM_EVAL(0x7C251B7DE8DB87A9LL, mcrypt_list_algorithms);
      HASH_INVOKE_FROM_EVAL(0x7707A7FEA07FB7A9LL, hphp_recursivedirectoryiterator___construct);
      break;
    case 1962:
      HASH_INVOKE_FROM_EVAL(0x45A53A884414A7AALL, pack);
      HASH_INVOKE_FROM_EVAL(0x58D6464A3A9127AALL, apc_bin_loadfile);
      break;
    case 1965:
      HASH_INVOKE_FROM_EVAL(0x7DA08D9D148837ADLL, posix_mkfifo);
      HASH_INVOKE_FROM_EVAL(0x217C52A1EBDF87ADLL, apache_get_version);
      break;
    case 1966:
      HASH_INVOKE_FROM_EVAL(0x00141B0E3E6F77AELL, xml_set_unparsed_entity_decl_handler);
      break;
    case 1967:
      HASH_INVOKE_FROM_EVAL(0x16CB9891EF26D7AFLL, drawgetstrokedashoffset);
      break;
    case 1977:
      HASH_INVOKE_FROM_EVAL(0x1FC9406FD7FCD7B9LL, strrpos);
      HASH_INVOKE_FROM_EVAL(0x1B6467AD87E167B9LL, log1p);
      break;
    case 1983:
      HASH_INVOKE_FROM_EVAL(0x3F46374E6E1B07BFLL, posix_getpwuid);
      break;
    case 1984:
      HASH_INVOKE_FROM_EVAL(0x152D1AB941A647C0LL, hphp_get_extension_info);
      HASH_INVOKE_FROM_EVAL(0x52FDAC1D298D67C0LL, mcrypt_enc_get_algorithms_name);
      break;
    case 1985:
      HASH_INVOKE_FROM_EVAL(0x4E172EA6743697C1LL, ldap_first_entry);
      break;
    case 1988:
      HASH_INVOKE_FROM_EVAL(0x3C696836396BE7C4LL, mb_language);
      break;
    case 1990:
      HASH_INVOKE_FROM_EVAL(0x0C8A7BE6ABC957C6LL, clearpixeliterator);
      HASH_INVOKE_FROM_EVAL(0x3D6D684AF537A7C6LL, ldap_explode_dn);
      break;
    case 1991:
      HASH_INVOKE_FROM_EVAL(0x686C5142FD0337C7LL, lcg_value);
      break;
    case 1994:
      HASH_INVOKE_FROM_EVAL(0x3C781898488687CALL, xml_parse);
      HASH_INVOKE_FROM_EVAL(0x55B68546CFAC87CALL, magicksetimageresolution);
      break;
    case 1998:
      HASH_INVOKE_FROM_EVAL(0x3AE33FEA6830C7CELL, magickshearimage);
      break;
    case 1999:
      HASH_INVOKE_FROM_EVAL(0x2FAB1F75659707CFLL, is_scalar);
      break;
    case 2001:
      HASH_INVOKE_FROM_EVAL(0x35B661C87484D7D1LL, openssl_csr_sign);
      break;
    case 2009:
      HASH_INVOKE_FROM_EVAL(0x2ED6760DAA3A67D9LL, strcasecmp);
      break;
    case 2012:
      HASH_INVOKE_FROM_EVAL(0x1FE65AFCC92967DCLL, rmdir);
      break;
    case 2013:
      HASH_INVOKE_FROM_EVAL(0x2B5AEDF1A5FC47DDLL, strripos);
      break;
    case 2018:
      HASH_INVOKE_FROM_EVAL(0x0888289CBD2887E2LL, iconv_substr);
      break;
    case 2020:
      HASH_INVOKE_FROM_EVAL(0x2621680306BC97E4LL, magicksetimagescene);
      break;
    case 2023:
      HASH_INVOKE_FROM_EVAL(0x4215DDB57604F7E7LL, xmlwriter_start_pi);
      break;
    case 2024:
      HASH_INVOKE_FROM_EVAL(0x53B7BF8991FA67E8LL, i18n_loc_get_error_code);
      break;
    case 2025:
      HASH_INVOKE_FROM_EVAL(0x6BB8AC68771287E9LL, strcmp);
      break;
    case 2027:
      HASH_INVOKE_FROM_EVAL(0x54AE7140B95027EBLL, pixelgetgreenquantum);
      HASH_INVOKE_FROM_EVAL(0x1A397501431EC7EBLL, is_numeric);
      break;
    case 2031:
      HASH_INVOKE_FROM_EVAL(0x5367B0F3A4D2D7EFLL, ldap_list);
      break;
    case 2032:
      HASH_INVOKE_FROM_EVAL(0x14F700DD189DB7F0LL, drawsetclipunits);
      break;
    case 2035:
      HASH_INVOKE_FROM_EVAL(0x73877357478137F3LL, posix_ctermid);
      HASH_INVOKE_FROM_EVAL(0x4B57E07A323FE7F3LL, drawpathlinetoverticalabsolute);
      HASH_INVOKE_FROM_EVAL(0x7F436B50B7BBD7F3LL, getcwd);
      break;
    case 2041:
      HASH_INVOKE_FROM_EVAL(0x376FB2649384A7F9LL, str_pad);
      break;
    case 2042:
      HASH_INVOKE_FROM_EVAL(0x0FD7C3144B4007FALL, libxml_set_streams_context);
      break;
    case 2045:
      HASH_INVOKE_FROM_EVAL(0x238E501F2536E7FDLL, drawsetclippath);
      break;
    case 2048:
      HASH_INVOKE_FROM_EVAL(0x0E66983DD04B0800LL, get_current_user);
      break;
    case 2051:
      HASH_INVOKE_FROM_EVAL(0x10F7244AA9CB5803LL, imagepstext);
      break;
    case 2052:
      HASH_INVOKE_FROM_EVAL(0x349A0DF6723B6804LL, pixelsetcolorcount);
      break;
    case 2053:
      HASH_INVOKE_FROM_EVAL(0x54ED49F8B155C805LL, ldap_t61_to_8859);
      break;
    case 2056:
      HASH_INVOKE_FROM_EVAL(0x19279D6DB4F70808LL, hash_hmac);
      HASH_INVOKE_FROM_EVAL(0x083B8F01AE15B808LL, assert);
      break;
    case 2057:
      HASH_INVOKE_FROM_EVAL(0x221F5A9D5E021809LL, magickwriteimages);
      break;
    case 2058:
      HASH_INVOKE_FROM_EVAL(0x5A0D1AE1D4C6F80ALL, array_slice);
      break;
    case 2060:
      HASH_INVOKE_FROM_EVAL(0x3FF63423EC4B280CLL, posix_getegid);
      break;
    case 2061:
      HASH_INVOKE_FROM_EVAL(0x11EC19E702F2C80DLL, getmyinode);
      HASH_INVOKE_FROM_EVAL(0x727F5A6D8E26B80DLL, extension_loaded);
      break;
    case 2063:
      HASH_INVOKE_FROM_EVAL(0x2342E5B393F0680FLL, oci_password_change);
      break;
    case 2064:
      HASH_INVOKE_FROM_EVAL(0x4297B1072CE76810LL, fb_call_user_func_array_safe);
      break;
    case 2067:
      HASH_INVOKE_FROM_EVAL(0x1A6B577442218813LL, pixelsetmagentaquantum);
      HASH_INVOKE_FROM_EVAL(0x5F7940A713863813LL, floor);
      break;
    case 2068:
      HASH_INVOKE_FROM_EVAL(0x3C0DFA15D3447814LL, rawurldecode);
      break;
    case 2071:
      HASH_INVOKE_FROM_EVAL(0x0D8B1D0A8C381817LL, stream_bucket_new);
      break;
    case 2072:
      HASH_INVOKE_FROM_EVAL(0x0FBDB0B22A59B818LL, mailparse_msg_parse);
      break;
    case 2077:
      HASH_INVOKE_FROM_EVAL(0x4D624A655A9B581DLL, drawpoint);
      break;
    case 2081:
      HASH_INVOKE_FROM_EVAL(0x2D52FB9B52EC2821LL, xml_set_notation_decl_handler);
      HASH_INVOKE_FROM_EVAL(0x107DBCA79C15B821LL, addcslashes);
      break;
    case 2084:
      HASH_INVOKE_FROM_EVAL(0x2B78E204F615A824LL, openssl_pkcs12_export_to_file);
      break;
    case 2087:
      HASH_INVOKE_FROM_EVAL(0x33EC567341B9C827LL, magickgetmaxtextadvance);
      break;
    case 2089:
      HASH_INVOKE_FROM_EVAL(0x39EE4CCCA716E829LL, stream_context_get_options);
      HASH_INVOKE_FROM_EVAL(0x57FFCEB7FA2D9829LL, usort);
      break;
    case 2092:
      HASH_INVOKE_FROM_EVAL(0x34F0E032AB05C82CLL, pixelsetblue);
      break;
    case 2093:
      HASH_INVOKE_FROM_EVAL(0x1C4AE57BF4E4A82DLL, apc_dec);
      break;
    case 2094:
      HASH_INVOKE_FROM_EVAL(0x3402C1E7544C382ELL, lstat);
      break;
    case 2095:
      HASH_INVOKE_FROM_EVAL(0x79A05154A7F5482FLL, magickgetimagedelay);
      break;
    case 2096:
      HASH_INVOKE_FROM_EVAL(0x5BBFA7EAEBD25830LL, pixelgetcyanquantum);
      break;
    case 2100:
      HASH_INVOKE_FROM_EVAL(0x605132E71CE7D834LL, array_push);
      break;
    case 2101:
      HASH_INVOKE_FROM_EVAL(0x1C4A162E6635B835LL, imageftbbox);
      HASH_INVOKE_FROM_EVAL(0x43A96BA7F58EB835LL, hphp_splfileobject_valid);
      break;
    case 2104:
      HASH_INVOKE_FROM_EVAL(0x63E554E0F11CE838LL, mysql_unbuffered_query);
      HASH_INVOKE_FROM_EVAL(0x03098F16B0AD5838LL, mcrypt_module_get_supported_key_sizes);
      HASH_INVOKE_FROM_EVAL(0x0890F9052322E838LL, fstat);
      break;
    case 2107:
      HASH_INVOKE_FROM_EVAL(0x63E2EA180786B83BLL, pixelsetblack);
      break;
    case 2108:
      HASH_INVOKE_FROM_EVAL(0x7C8969C75CA1783CLL, get_declared_classes);
      HASH_INVOKE_FROM_EVAL(0x034EDEBD109FD83CLL, filesize);
      break;
    case 2115:
      HASH_INVOKE_FROM_EVAL(0x567A7139AD476843LL, socket_listen);
      break;
    case 2116:
      HASH_INVOKE_FROM_EVAL(0x1639883196856844LL, oci_close);
      break;
    case 2118:
      HASH_INVOKE_FROM_EVAL(0x50088ED5D482C846LL, ldap_mod_add);
      break;
    case 2119:
      HASH_INVOKE_FROM_EVAL(0x4E69A952E3EA4847LL, magicksetfilename);
      break;
    case 2122:
      HASH_INVOKE_FROM_EVAL(0x7D3F626E636C084ALL, ldap_delete);
      break;
    case 2123:
      HASH_INVOKE_FROM_EVAL(0x68B7597C22FA484BLL, openssl_public_encrypt);
      break;
    case 2124:
      HASH_INVOKE_FROM_EVAL(0x26A2BBC465A2B84CLL, strcoll);
      break;
    case 2126:
      HASH_INVOKE_FROM_EVAL(0x488C2F267BF2884ELL, array_intersect);
      break;
    case 2128:
      HASH_INVOKE_FROM_EVAL(0x4DDB82A3632FA850LL, atan);
      break;
    case 2129:
      HASH_INVOKE_FROM_EVAL(0x488BFCC942C73851LL, gzopen);
      break;
    case 2140:
      HASH_INVOKE_FROM_EVAL(0x5A017A4C6A41E85CLL, curl_multi_add_handle);
      break;
    case 2142:
      HASH_INVOKE_FROM_EVAL(0x6B4DE6865142285ELL, destroypixeliterator);
      break;
    case 2145:
      HASH_INVOKE_FROM_EVAL(0x2AD6B0E3B9F3B861LL, array_search);
      break;
    case 2147:
      HASH_INVOKE_FROM_EVAL(0x21B30164F5D49863LL, is_resource);
      break;
    case 2148:
      HASH_INVOKE_FROM_EVAL(0x168EDA8238EEE864LL, mb_detect_order);
      break;
    case 2151:
      HASH_INVOKE_FROM_EVAL(0x65A68A31B96E7867LL, hash);
      break;
    case 2152:
      HASH_INVOKE_FROM_EVAL(0x785C812E6292E868LL, i18n_loc_set_default);
      break;
    case 2153:
      HASH_INVOKE_FROM_EVAL(0x246EC2B1844DB869LL, pixelgetexception);
      break;
    case 2155:
      HASH_INVOKE_FROM_EVAL(0x0C1BBEDECEF1C86BLL, newmagickwand);
      break;
    case 2156:
      HASH_INVOKE_FROM_EVAL(0x6414504A6658286CLL, stripos);
      break;
    case 2159:
      HASH_INVOKE_FROM_EVAL(0x1476A177CC50686FLL, mb_strstr);
      break;
    case 2160:
      HASH_INVOKE_FROM_EVAL(0x34F50577C14C6870LL, array_diff_uassoc);
      break;
    case 2162:
      HASH_INVOKE_FROM_EVAL(0x3C7B86F57AFA0872LL, hebrev);
      HASH_INVOKE_FROM_EVAL(0x558D62FBEB210872LL, str_rot13);
      break;
    case 2163:
      HASH_INVOKE_FROM_EVAL(0x4C06B4AFC1C08873LL, str_shuffle);
      break;
    case 2167:
      HASH_INVOKE_FROM_EVAL(0x6AA3788C9B737877LL, magickdespeckleimage);
      break;
    case 2168:
      HASH_INVOKE_FROM_EVAL(0x00F8C6758B50B878LL, drawpathcurvetoquadraticbezierabsolute);
      break;
    case 2172:
      HASH_INVOKE_FROM_EVAL(0x11DFC3C9D916387CLL, hphp_splfileobject_ftruncate);
      HASH_INVOKE_FROM_EVAL(0x6451BCB825D1787CLL, chroot);
      break;
    case 2173:
      HASH_INVOKE_FROM_EVAL(0x54F84DC9A334287DLL, gzencode);
      HASH_INVOKE_FROM_EVAL(0x2B36081E0828487DLL, debug_print_backtrace);
      break;
    case 2176:
      HASH_INVOKE_FROM_EVAL(0x7549612A72BA5880LL, hphp_splfileinfo_getrealpath);
      break;
    case 2179:
      HASH_INVOKE_FROM_EVAL(0x3EBD8F559B4EA883LL, hphp_splfileobject_getflags);
      break;
    case 2180:
      HASH_INVOKE_FROM_EVAL(0x766CD15A7F2A0884LL, array_uintersect);
      break;
    case 2184:
      HASH_INVOKE_FROM_EVAL(0x1062CF2DA5443888LL, imagedashedline);
      break;
    case 2191:
      HASH_INVOKE_FROM_EVAL(0x539868C56806688FLL, imagecopyresampled);
      break;
    case 2200:
      HASH_INVOKE_FROM_EVAL(0x4AC522FF7BB60898LL, xmlwriter_write_dtd_entity);
      break;
    case 2205:
      HASH_INVOKE_FROM_EVAL(0x1FC855F0E4F1189DLL, magickminifyimage);
      break;
    case 2208:
      HASH_INVOKE_FROM_EVAL(0x6B1A3BCE67BAC8A0LL, openssl_csr_new);
      break;
    case 2209:
      HASH_INVOKE_FROM_EVAL(0x1756D4437A4098A1LL, date_modify);
      break;
    case 2215:
      HASH_INVOKE_FROM_EVAL(0x57105D4E43B078A7LL, magicksetformat);
      HASH_INVOKE_FROM_EVAL(0x6C6B4B739AE1B8A7LL, curl_close);
      break;
    case 2217:
      HASH_INVOKE_FROM_EVAL(0x346B2DB3BA2378A9LL, imagecolormatch);
      break;
    case 2218:
      HASH_INVOKE_FROM_EVAL(0x44BC069A75EE98AALL, xhprof_disable);
      break;
    case 2219:
      HASH_INVOKE_FROM_EVAL(0x39F11BA6A4D778ABLL, strnatcmp);
      break;
    case 2220:
      HASH_INVOKE_FROM_EVAL(0x5B1F4C6424DDD8ACLL, openlog);
      break;
    case 2224:
      HASH_INVOKE_FROM_EVAL(0x2CEF8DDC092698B0LL, drawgetvectorgraphics);
      break;
    case 2226:
      HASH_INVOKE_FROM_EVAL(0x31830AA5032428B2LL, is_double);
      break;
    case 2236:
      HASH_INVOKE_FROM_EVAL(0x7AE3AE9B634988BCLL, stream_context_create);
      break;
    case 2244:
      HASH_INVOKE_FROM_EVAL(0x5C28BE7FFE6A68C4LL, xml_set_start_namespace_decl_handler);
      break;
    case 2245:
      HASH_INVOKE_FROM_EVAL(0x146A1A7658CCA8C5LL, asinh);
      break;
    case 2247:
      HASH_INVOKE_FROM_EVAL(0x4623383F8534E8C7LL, array_multisort);
      HASH_INVOKE_FROM_EVAL(0x6D9B9BE3CED388C7LL, apc_load_constants);
      break;
    case 2254:
      HASH_INVOKE_FROM_EVAL(0x3FFAA982E4B1E8CELL, date_offset_get);
      break;
    case 2257:
      HASH_INVOKE_FROM_EVAL(0x1015EB3F52B098D1LL, print);
      break;
    case 2260:
      HASH_INVOKE_FROM_EVAL(0x6DB4EE8696C7E8D4LL, magicksetimageiterations);
      break;
    case 2262:
      HASH_INVOKE_FROM_EVAL(0x2F585B36DDDB68D6LL, mb_convert_case);
      HASH_INVOKE_FROM_EVAL(0x26DC8AB4A9CBE8D6LL, iconv);
      break;
    case 2264:
      HASH_INVOKE_FROM_EVAL(0x3A65182A3E8908D8LL, openssl_open);
      break;
    case 2265:
      HASH_INVOKE_FROM_EVAL(0x18B64D6BFE4208D9LL, stream_get_transports);
      break;
    case 2267:
      HASH_INVOKE_FROM_EVAL(0x4052842EC87038DBLL, magickcropimage);
      break;
    case 2268:
      HASH_INVOKE_FROM_EVAL(0x31F50FDA18B888DCLL, magickgetimagetype);
      break;
    case 2276:
      HASH_INVOKE_FROM_EVAL(0x16A18007E10F48E4LL, socket_getsockname);
      break;
    case 2278:
      HASH_INVOKE_FROM_EVAL(0x69887F054A1E28E6LL, strtok);
      break;
    case 2279:
      HASH_INVOKE_FROM_EVAL(0x608729F27FA428E7LL, error_get_last);
      break;
    case 2280:
      HASH_INVOKE_FROM_EVAL(0x4F7ED8C3156AD8E8LL, magicksetimagedispose);
      break;
    case 2293:
      HASH_INVOKE_FROM_EVAL(0x45DA105C5B48F8F5LL, apd_set_pprof_trace);
      break;
    case 2295:
      HASH_INVOKE_FROM_EVAL(0x17582BEA497D48F7LL, ctype_alpha);
      break;
    case 2298:
      HASH_INVOKE_FROM_EVAL(0x6F0F82818B68A8FALL, array_values);
      break;
    case 2299:
      HASH_INVOKE_FROM_EVAL(0x214532C4A2BC28FBLL, ldap_next_entry);
      break;
    case 2300:
      HASH_INVOKE_FROM_EVAL(0x4C2AFB2EFDB1B8FCLL, stripslashes);
      break;
    case 2302:
      HASH_INVOKE_FROM_EVAL(0x047BF4D3D0ED08FELL, strchr);
      break;
    case 2315:
      HASH_INVOKE_FROM_EVAL(0x67B879A1120C190BLL, headers_sent);
      HASH_INVOKE_FROM_EVAL(0x2987B15E11FE890BLL, clock_settime);
      break;
    case 2316:
      HASH_INVOKE_FROM_EVAL(0x72E1EBF65C25F90CLL, oci_fetch_assoc);
      break;
    case 2321:
      HASH_INVOKE_FROM_EVAL(0x04F822B7817E5911LL, bindec);
      HASH_INVOKE_FROM_EVAL(0x0AFD4F231D6CB911LL, magickaddimage);
      HASH_INVOKE_FROM_EVAL(0x5B9B2C3B32906911LL, drawsetfillpatternurl);
      break;
    case 2323:
      HASH_INVOKE_FROM_EVAL(0x55757E1242390913LL, cos);
      break;
    case 2324:
      HASH_INVOKE_FROM_EVAL(0x6E22C6D840B44914LL, mcrypt_generic_init);
      break;
    case 2326:
      HASH_INVOKE_FROM_EVAL(0x245A2DC3B6B62916LL, apache_lookup_uri);
      break;
    case 2329:
      HASH_INVOKE_FROM_EVAL(0x022B16C0D64D7919LL, file_put_contents);
      HASH_INVOKE_FROM_EVAL(0x4AA4DD47E99E5919LL, oci_bind_array_by_name);
      break;
    case 2333:
      HASH_INVOKE_FROM_EVAL(0x069C028EFEF8C91DLL, date);
      break;
    case 2335:
      HASH_INVOKE_FROM_EVAL(0x277D7E2D1F5C191FLL, drawpathcurvetoquadraticbezierrelative);
      HASH_INVOKE_FROM_EVAL(0x4E2C55C92D71F91FLL, magickcolorfloodfillimage);
      break;
    case 2337:
      HASH_INVOKE_FROM_EVAL(0x0F5917FFCDD6C921LL, mb_substr);
      break;
    case 2339:
      HASH_INVOKE_FROM_EVAL(0x044B276686B77923LL, fscanf);
      break;
    case 2346:
      HASH_INVOKE_FROM_EVAL(0x174C510386E6492ALL, hphp_directoryiterator_key);
      break;
    case 2349:
      HASH_INVOKE_FROM_EVAL(0x27363CE6CBFC392DLL, pcntl_wexitstatus);
      HASH_INVOKE_FROM_EVAL(0x2337F8C3EE17192DLL, sprintf);
      break;
    case 2350:
      HASH_INVOKE_FROM_EVAL(0x26E8B741BDDDC92ELL, xmlwriter_start_element);
      break;
    case 2352:
      HASH_INVOKE_FROM_EVAL(0x507CE1912FD74930LL, mail);
      HASH_INVOKE_FROM_EVAL(0x30972530BD557930LL, shell_exec);
      break;
    case 2354:
      HASH_INVOKE_FROM_EVAL(0x72C01E1D90BE5932LL, mcrypt_enc_get_block_size);
      break;
    case 2356:
      HASH_INVOKE_FROM_EVAL(0x4FB95164A5F84934LL, mcrypt_generic_end);
      break;
    case 2357:
      HASH_INVOKE_FROM_EVAL(0x46BD9A56BDE40935LL, mysql_escape_string);
      HASH_INVOKE_FROM_EVAL(0x06486B6912479935LL, zlib_get_coding_type);
      HASH_INVOKE_FROM_EVAL(0x48D3CA6CA0B29935LL, mb_regex_set_options);
      break;
    case 2359:
      HASH_INVOKE_FROM_EVAL(0x0447476ED176F937LL, oci_bind_by_name);
      break;
    case 2361:
      HASH_INVOKE_FROM_EVAL(0x5B60C8396C624939LL, mb_substitute_character);
      break;
    case 2366:
      HASH_INVOKE_FROM_EVAL(0x3946D67A0D16D93ELL, hphp_splfileinfo_isreadable);
      HASH_INVOKE_FROM_EVAL(0x0CADFE289C92893ELL, socket_getpeername);
      break;
    case 2371:
      HASH_INVOKE_FROM_EVAL(0x7C565AD57BC84943LL, pixelsetindex);
      break;
    case 2373:
      HASH_INVOKE_FROM_EVAL(0x7CB0596B6CCFA945LL, split);
      break;
    case 2375:
      HASH_INVOKE_FROM_EVAL(0x630288865DE68947LL, php_strip_whitespace);
      break;
    case 2376:
      HASH_INVOKE_FROM_EVAL(0x6A3412DE82715948LL, openssl_x509_checkpurpose);
      break;
    case 2377:
      HASH_INVOKE_FROM_EVAL(0x243BB8B284895949LL, apache_get_rewrite_rules);
      break;
    case 2379:
      HASH_INVOKE_FROM_EVAL(0x37F356F578FA394BLL, substr);
      break;
    case 2381:
      HASH_INVOKE_FROM_EVAL(0x3D3AD12E52FF294DLL, imagecreatefromwbmp);
      break;
    case 2387:
      HASH_INVOKE_FROM_EVAL(0x068438AFD33A9953LL, imagecolorclosesthwb);
      break;
    case 2391:
      HASH_INVOKE_FROM_EVAL(0x253AC5D4E450A957LL, magickgetreleasedate);
      break;
    case 2394:
      HASH_INVOKE_FROM_EVAL(0x103C12985527295ALL, hphp_splfileobject_setcsvcontrol);
      HASH_INVOKE_FROM_EVAL(0x7056E766A274895ALL, virtual);
      break;
    case 2397:
      HASH_INVOKE_FROM_EVAL(0x21DBCE74EB1FC95DLL, xmlwriter_text);
      break;
    case 2401:
      HASH_INVOKE_FROM_EVAL(0x5EA7052A00E88961LL, magickgetcopyright);
      break;
    case 2407:
      HASH_INVOKE_FROM_EVAL(0x1419B3BF428B2967LL, evhttp_async_post);
      break;
    case 2415:
      HASH_INVOKE_FROM_EVAL(0x134EF88685C0396FLL, magickgetexceptiontype);
      break;
    case 2417:
      HASH_INVOKE_FROM_EVAL(0x442A28FB6F6C3971LL, xmlwriter_start_attribute);
      HASH_INVOKE_FROM_EVAL(0x72C73F5DA7D6F971LL, magickgetimagecolormapcolor);
      break;
    case 2418:
      HASH_INVOKE_FROM_EVAL(0x758263CEBF2E8972LL, assert_options);
      break;
    case 2421:
      HASH_INVOKE_FROM_EVAL(0x7E26D48503362975LL, drawpathcurvetoabsolute);
      HASH_INVOKE_FROM_EVAL(0x488141281A75E975LL, imagecreatefromgif);
      break;
    case 2423:
      HASH_INVOKE_FROM_EVAL(0x0C16C797916C2977LL, posix_setegid);
      break;
    case 2430:
      HASH_INVOKE_FROM_EVAL(0x5067A65AD1D0297ELL, pixelgetiteratorexception);
      break;
    case 2432:
      HASH_INVOKE_FROM_EVAL(0x3D3445105C335980LL, filectime);
      break;
    case 2434:
      HASH_INVOKE_FROM_EVAL(0x214EA70BDD8FB982LL, magickmorphimages);
      break;
    case 2435:
      HASH_INVOKE_FROM_EVAL(0x3DA64BF893DBF983LL, strncmp);
      break;
    case 2436:
      HASH_INVOKE_FROM_EVAL(0x2B2A9D6B27656984LL, oci_new_connect);
      break;
    case 2438:
      HASH_INVOKE_FROM_EVAL(0x6ECE4BDB8842E986LL, posix_strerror);
      break;
    case 2439:
      HASH_INVOKE_FROM_EVAL(0x22B3CF8DD3D1A987LL, pixelsynciterator);
      break;
    case 2440:
      HASH_INVOKE_FROM_EVAL(0x489355BDBE396988LL, drawsettextencoding);
      HASH_INVOKE_FROM_EVAL(0x55BE7AE8DEF3F988LL, magickgetstringheight);
      break;
    case 2443:
      HASH_INVOKE_FROM_EVAL(0x0E863EF8C11A598BLL, is_writable);
      break;
    case 2445:
      HASH_INVOKE_FROM_EVAL(0x23DEB9C15DF9D98DLL, oci_commit);
      HASH_INVOKE_FROM_EVAL(0x69003892F71C798DLL, apache_get_scoreboard);
      HASH_INVOKE_FROM_EVAL(0x651A8CBB8D2A398DLL, mysql_stat);
      break;
    case 2446:
      HASH_INVOKE_FROM_EVAL(0x45CFDEE19995398ELL, hphp_recursiveiteratoriterator_next);
      HASH_INVOKE_FROM_EVAL(0x333D4DFD4927898ELL, magickgetimagewhitepoint);
      break;
    case 2448:
      HASH_INVOKE_FROM_EVAL(0x342D957A86A03990LL, hphp_splfileobject_seek);
      break;
    case 2456:
      HASH_INVOKE_FROM_EVAL(0x501AAD31C8086998LL, posix_getcwd);
      break;
    case 2459:
      HASH_INVOKE_FROM_EVAL(0x564D8D3DA1E8E99BLL, xml_get_current_line_number);
      break;
    case 2462:
      HASH_INVOKE_FROM_EVAL(0x59D2DFF08F4DB99ELL, imagecreate);
      break;
    case 2466:
      HASH_INVOKE_FROM_EVAL(0x01D2367A02F0A9A2LL, magicksetsize);
      HASH_INVOKE_FROM_EVAL(0x3FE0D440B157A9A2LL, oci_field_precision);
      break;
    case 2467:
      HASH_INVOKE_FROM_EVAL(0x43D1339C52E309A3LL, hphp_service_thread_started);
      HASH_INVOKE_FROM_EVAL(0x78261FA60B8D89A3LL, imagepsloadfont);
      break;
    case 2468:
      HASH_INVOKE_FROM_EVAL(0x6F8676B049C919A4LL, array_intersect_uassoc);
      break;
    case 2469:
      HASH_INVOKE_FROM_EVAL(0x76988956F35329A5LL, xmlwriter_end_cdata);
      break;
    case 2473:
      HASH_INVOKE_FROM_EVAL(0x6F9CF95104CAE9A9LL, pixelgetyellowquantum);
      break;
    case 2476:
      HASH_INVOKE_FROM_EVAL(0x522256BAA78159ACLL, popen);
      HASH_INVOKE_FROM_EVAL(0x1D4F0A3AEA18F9ACLL, oci_server_version);
      break;
    case 2477:
      HASH_INVOKE_FROM_EVAL(0x05C5AD90751159ADLL, drawpathcurvetoquadraticbeziersmoothabsolute);
      break;
    case 2479:
      HASH_INVOKE_FROM_EVAL(0x25268012A48A99AFLL, magickclipimage);
      break;
    case 2481:
      HASH_INVOKE_FROM_EVAL(0x7C1CE38F14E529B1LL, date_default_timezone_set);
      break;
    case 2482:
      HASH_INVOKE_FROM_EVAL(0x65D7CBE8681CE9B2LL, gzgetss);
      break;
    case 2486:
      HASH_INVOKE_FROM_EVAL(0x5FC1B94446EA59B6LL, magickremoveimageprofiles);
      break;
    case 2487:
      HASH_INVOKE_FROM_EVAL(0x18F2C246FACAD9B7LL, each);
      break;
    case 2488:
      HASH_INVOKE_FROM_EVAL(0x3741447B159359B8LL, mcrypt_get_cipher_name);
      HASH_INVOKE_FROM_EVAL(0x4EFD7A9C90E559B8LL, posix_ttyname);
      break;
    case 2489:
      HASH_INVOKE_FROM_EVAL(0x145702974C97F9B9LL, ltrim);
      break;
    case 2490:
      HASH_INVOKE_FROM_EVAL(0x13B3172E092D99BALL, is_dir);
      break;
    case 2492:
      HASH_INVOKE_FROM_EVAL(0x7E7BF1BDA6DB49BCLL, hphp_splfileinfo_getgroup);
      break;
    case 2494:
      HASH_INVOKE_FROM_EVAL(0x458B5ABEDAC1C9BELL, disk_free_space);
      break;
    case 2498:
      HASH_INVOKE_FROM_EVAL(0x6A7BDB900E7429C2LL, magickconstituteimage);
      break;
    case 2500:
      HASH_INVOKE_FROM_EVAL(0x47B7D3745D80B9C4LL, socket_get_option);
      break;
    case 2502:
      HASH_INVOKE_FROM_EVAL(0x080F661DB8BFC9C6LL, hphp_splfileinfo_getmtime);
      break;
    case 2503:
      HASH_INVOKE_FROM_EVAL(0x6ECDF24B29D789C7LL, strtolower);
      break;
    case 2506:
      HASH_INVOKE_FROM_EVAL(0x5C5B0CC85133B9CALL, mkdir);
      break;
    case 2509:
      HASH_INVOKE_FROM_EVAL(0x4E61FE901C1C29CDLL, array_intersect_key);
      break;
    case 2510:
      HASH_INVOKE_FROM_EVAL(0x7A9FB932873D09CELL, gmmktime);
      break;
    case 2511:
      HASH_INVOKE_FROM_EVAL(0x415B91CAEE0689CFLL, magickgetimageinterlacescheme);
      break;
    case 2514:
      HASH_INVOKE_FROM_EVAL(0x3DCCD1FEAD8759D2LL, array_sum);
      break;
    case 2515:
      HASH_INVOKE_FROM_EVAL(0x1C31A9E1207209D3LL, mb_split);
      HASH_INVOKE_FROM_EVAL(0x10C82F357BB7E9D3LL, curl_version);
      HASH_INVOKE_FROM_EVAL(0x25CA0299103F49D3LL, magickgetsize);
      break;
    case 2517:
      HASH_INVOKE_FROM_EVAL(0x245860A2FE4CB9D5LL, socket_set_blocking);
      break;
    case 2523:
      HASH_INVOKE_FROM_EVAL(0x48B2E069B89489DBLL, magickappendimages);
      break;
    case 2526:
      HASH_INVOKE_FROM_EVAL(0x5C039967E60089DELL, array_intersect_ukey);
      break;
    case 2527:
      HASH_INVOKE_FROM_EVAL(0x349E2E0F2CD7B9DFLL, magickgetversion);
      break;
    case 2534:
      HASH_INVOKE_FROM_EVAL(0x1B44CF284E9B09E6LL, interface_exists);
      break;
    case 2537:
      HASH_INVOKE_FROM_EVAL(0x4ADFA265F07AB9E9LL, drawgettextalignment);
      HASH_INVOKE_FROM_EVAL(0x6A45EB471332A9E9LL, imagecolorexactalpha);
      HASH_INVOKE_FROM_EVAL(0x330EE2729DB7C9E9LL, drawgetfontstretch);
      break;
    case 2538:
      HASH_INVOKE_FROM_EVAL(0x25DDD924EFE979EALL, hash_update_file);
      break;
    case 2539:
      HASH_INVOKE_FROM_EVAL(0x71B0FF80B88459EBLL, diskfreespace);
      break;
    case 2543:
      HASH_INVOKE_FROM_EVAL(0x7EA6200B688459EFLL, ldap_modify);
      break;
    case 2544:
      HASH_INVOKE_FROM_EVAL(0x1FC307200E8959F0LL, stream_bucket_append);
      break;
    case 2547:
      HASH_INVOKE_FROM_EVAL(0x6535B60A4BC449F3LL, dns_get_record);
      break;
    case 2548:
      HASH_INVOKE_FROM_EVAL(0x51201EE65BC729F4LL, localtime);
      break;
    case 2549:
      HASH_INVOKE_FROM_EVAL(0x2BC61637253BE9F5LL, drawgetfontweight);
      HASH_INVOKE_FROM_EVAL(0x35BABFBC091759F5LL, socket_server);
      break;
    case 2557:
      HASH_INVOKE_FROM_EVAL(0x2394D4E030AB69FDLL, getmypid);
      break;
    case 2564:
      HASH_INVOKE_FROM_EVAL(0x17B83C425BD09A04LL, atanh);
      break;
    case 2567:
      HASH_INVOKE_FROM_EVAL(0x391E0A4CF1EC9A07LL, stream_socket_recvfrom);
      break;
    case 2568:
      HASH_INVOKE_FROM_EVAL(0x0436CA4DFB315A08LL, soundex);
      break;
    case 2571:
      HASH_INVOKE_FROM_EVAL(0x70075DC878825A0BLL, ctype_lower);
      break;
    case 2573:
      HASH_INVOKE_FROM_EVAL(0x736C133EFF8E5A0DLL, mysql_list_fields);
      HASH_INVOKE_FROM_EVAL(0x50A7146A79877A0DLL, pcntl_alarm);
      break;
    case 2577:
      HASH_INVOKE_FROM_EVAL(0x472CA39715598A11LL, mb_eregi_replace);
      break;
    case 2588:
      HASH_INVOKE_FROM_EVAL(0x12D49AD562F38A1CLL, date_timezone_get);
      break;
    case 2591:
      HASH_INVOKE_FROM_EVAL(0x35C8BD7DFDADEA1FLL, hphp_directoryiterator_current);
      break;
    case 2592:
      HASH_INVOKE_FROM_EVAL(0x2A420675E6AF0A20LL, basename);
      break;
    case 2593:
      HASH_INVOKE_FROM_EVAL(0x14279BB1A6872A21LL, atan2);
      break;
    case 2597:
      HASH_INVOKE_FROM_EVAL(0x5EC0A3DD935EEA25LL, magickresampleimage);
      HASH_INVOKE_FROM_EVAL(0x1DB9A1FB97A3AA25LL, magicksetimageoption);
      break;
    case 2601:
      HASH_INVOKE_FROM_EVAL(0x618D2A98986B1A29LL, ldap_unbind);
      break;
    case 2602:
      HASH_INVOKE_FROM_EVAL(0x3CAEA6B8D1C92A2ALL, stream_bucket_prepend);
      break;
    case 2609:
      HASH_INVOKE_FROM_EVAL(0x1F3E32847C1CCA31LL, mb_ereg_match);
      break;
    case 2612:
      HASH_INVOKE_FROM_EVAL(0x2D948E4099975A34LL, restore_include_path);
      HASH_INVOKE_FROM_EVAL(0x5AB266C6E7075A34LL, mysql_error);
      break;
    case 2616:
      HASH_INVOKE_FROM_EVAL(0x3E65EF9761BE5A38LL, pixelgetiteratorexceptiontype);
      break;
    case 2619:
      HASH_INVOKE_FROM_EVAL(0x545A7BE199EC4A3BLL, pcntl_getpriority);
      HASH_INVOKE_FROM_EVAL(0x785ECCF53D98BA3BLL, curl_multi_exec);
      break;
    case 2620:
      HASH_INVOKE_FROM_EVAL(0x21DF7BAEEFABCA3CLL, umask);
      break;
    case 2622:
      HASH_INVOKE_FROM_EVAL(0x31C3A072D092FA3ELL, socket_create_listen);
      break;
    case 2623:
      HASH_INVOKE_FROM_EVAL(0x4C0E2C6882051A3FLL, magickgetresourcelimit);
      break;
    case 2624:
      HASH_INVOKE_FROM_EVAL(0x4926EE59103B2A40LL, destroydrawingwand);
      HASH_INVOKE_FROM_EVAL(0x682C14726D484A40LL, fileatime);
      break;
    case 2626:
      HASH_INVOKE_FROM_EVAL(0x128914E131AFFA42LL, microtime);
      HASH_INVOKE_FROM_EVAL(0x5FF7C3A6BDDCFA42LL, mb_convert_kana);
      break;
    case 2628:
      HASH_INVOKE_FROM_EVAL(0x7F6A6306BBE8AA44LL, imagelayereffect);
      break;
    case 2631:
      HASH_INVOKE_FROM_EVAL(0x1B45CFF586F85A47LL, utf8_encode);
      break;
    case 2636:
      HASH_INVOKE_FROM_EVAL(0x7039B1C3356B8A4CLL, hphp_splfileobject_rewind);
      break;
    case 2647:
      HASH_INVOKE_FROM_EVAL(0x5088945958DD4A57LL, mktime);
      HASH_INVOKE_FROM_EVAL(0x7E929ED7D9BE6A57LL, ini_get);
      break;
    case 2648:
      HASH_INVOKE_FROM_EVAL(0x6E823A722DE1EA58LL, stream_socket_client);
      break;
    case 2651:
      HASH_INVOKE_FROM_EVAL(0x2B18DFF183C0BA5BLL, mb_get_info);
      break;
    case 2653:
      HASH_INVOKE_FROM_EVAL(0x7E1E9C4C3D4E8A5DLL, stream_select);
      break;
    case 2654:
      HASH_INVOKE_FROM_EVAL(0x2C6826999658AA5ELL, getopt);
      break;
    case 2655:
      HASH_INVOKE_FROM_EVAL(0x7CAE3FE798EC0A5FLL, php_logo_guid);
      break;
    case 2661:
      HASH_INVOKE_FROM_EVAL(0x469199B8FD886A65LL, putenv);
      HASH_INVOKE_FROM_EVAL(0x3590F3AAC94E0A65LL, array_change_key_case);
      break;
    case 2662:
      HASH_INVOKE_FROM_EVAL(0x60C4B9EEDBD5FA66LL, pos);
      break;
    case 2664:
      HASH_INVOKE_FROM_EVAL(0x01DD2057FD9B1A68LL, xmlwriter_write_cdata);
      HASH_INVOKE_FROM_EVAL(0x32AD0455A7689A68LL, magickoilpaintimage);
      break;
    case 2665:
      HASH_INVOKE_FROM_EVAL(0x10CDCF2BB4057A69LL, debug_zval_dump);
      break;
    case 2667:
      HASH_INVOKE_FROM_EVAL(0x0912965F4440FA6BLL, str_repeat);
      break;
    case 2673:
      HASH_INVOKE_FROM_EVAL(0x5B5DA6AD0AD63A71LL, drawannotation);
      break;
    case 2674:
      HASH_INVOKE_FROM_EVAL(0x71AFF1D58D103A72LL, imagefontheight);
      break;
    case 2677:
      HASH_INVOKE_FROM_EVAL(0x7A957BEC6CA57A75LL, preg_replace_callback);
      break;
    case 2681:
      HASH_INVOKE_FROM_EVAL(0x28AC28C54C4E6A79LL, openssl_error_string);
      break;
    case 2685:
      HASH_INVOKE_FROM_EVAL(0x414C2E31304E9A7DLL, stream_get_filters);
      break;
    case 2689:
      HASH_INVOKE_FROM_EVAL(0x09367774F803EA81LL, hphp_recursiveiteratoriterator_valid);
      break;
    case 2690:
      HASH_INVOKE_FROM_EVAL(0x258205B54DC06A82LL, newpixelwands);
      HASH_INVOKE_FROM_EVAL(0x79786FABC5551A82LL, jpeg2wbmp);
      break;
    case 2691:
      HASH_INVOKE_FROM_EVAL(0x11149278DB0A9A83LL, levenshtein);
      break;
    case 2692:
      HASH_INVOKE_FROM_EVAL(0x08C1A5A05B6A0A84LL, ob_get_length);
      break;
    case 2693:
      HASH_INVOKE_FROM_EVAL(0x755DEFDEDF35DA85LL, ctype_print);
      HASH_INVOKE_FROM_EVAL(0x2180916F8D4F6A85LL, drawcomment);
      break;
    case 2695:
      HASH_INVOKE_FROM_EVAL(0x7C5A22328CAB4A87LL, ereg_replace);
      break;
    case 2696:
      HASH_INVOKE_FROM_EVAL(0x1818A3CFBA357A88LL, magicksetwandsize);
      break;
    case 2699:
      HASH_INVOKE_FROM_EVAL(0x7588BD0546C8BA8BLL, hphp_recursivedirectoryiterator_valid);
      HASH_INVOKE_FROM_EVAL(0x7ACBCD9CF335AA8BLL, xmlwriter_start_document);
      break;
    case 2700:
      HASH_INVOKE_FROM_EVAL(0x6A2EEE463F969A8CLL, getservbyname);
      break;
    case 2706:
      HASH_INVOKE_FROM_EVAL(0x1257DB9F159E9A92LL, magickmontageimage);
      break;
    case 2707:
      HASH_INVOKE_FROM_EVAL(0x4A32653C8E719A93LL, pixelgetcyan);
      break;
    case 2708:
      HASH_INVOKE_FROM_EVAL(0x465E6C67F885AA94LL, drawgetstrokelinejoin);
      HASH_INVOKE_FROM_EVAL(0x7761D019E0B5EA94LL, magickstripimage);
      HASH_INVOKE_FROM_EVAL(0x4B1501C4C22FFA94LL, quoted_printable_encode);
      HASH_INVOKE_FROM_EVAL(0x0AC7CBCE30442A94LL, imagepalettecopy);
      break;
    case 2709:
      HASH_INVOKE_FROM_EVAL(0x34B8A4E5AE0EFA95LL, pixelgetopacity);
      break;
    case 2711:
      HASH_INVOKE_FROM_EVAL(0x0089115038C03A97LL, array_diff_ukey);
      break;
    case 2714:
      HASH_INVOKE_FROM_EVAL(0x19AFF8596E19DA9ALL, xhprof_enable);
      break;
    case 2717:
      HASH_INVOKE_FROM_EVAL(0x1234AB687C515A9DLL, mb_encode_numericentity);
      break;
    case 2719:
      HASH_INVOKE_FROM_EVAL(0x2E5E23ECA0525A9FLL, bcadd);
      break;
    case 2720:
      HASH_INVOKE_FROM_EVAL(0x55FAF12AF1920AA0LL, sha1_file);
      break;
    case 2723:
      HASH_INVOKE_FROM_EVAL(0x2B75B48A53AACAA3LL, imagestring);
      break;
    case 2725:
      HASH_INVOKE_FROM_EVAL(0x2418528164415AA5LL, magickscaleimage);
      HASH_INVOKE_FROM_EVAL(0x421C6B40EB370AA5LL, ldap_sasl_bind);
      break;
    case 2726:
      HASH_INVOKE_FROM_EVAL(0x4BBA1E164DF9CAA6LL, localeconv);
      break;
    case 2727:
      HASH_INVOKE_FROM_EVAL(0x797CEC173CBB7AA7LL, ob_get_flush);
      break;
    case 2729:
      HASH_INVOKE_FROM_EVAL(0x2238FC7870E9CAA9LL, strspn);
      break;
    case 2731:
      HASH_INVOKE_FROM_EVAL(0x1331979EF8EF0AABLL, mb_ereg_search);
      break;
    case 2732:
      HASH_INVOKE_FROM_EVAL(0x18CF3E4A60E4AAACLL, pi);
      break;
    case 2738:
      HASH_INVOKE_FROM_EVAL(0x569EED88F20BAAB2LL, drawgettextundercolor);
      HASH_INVOKE_FROM_EVAL(0x62519270CC9F1AB2LL, stream_get_meta_data);
      break;
    case 2740:
      HASH_INVOKE_FROM_EVAL(0x1BAFB965204D0AB4LL, openssl_x509_check_private_key);
      break;
    case 2751:
      HASH_INVOKE_FROM_EVAL(0x030DFC3D3C88BABFLL, filegroup);
      break;
    case 2757:
      HASH_INVOKE_FROM_EVAL(0x3754E97715176AC5LL, hphp_get_stats);
      break;
    case 2759:
      HASH_INVOKE_FROM_EVAL(0x5D2F899A270D9AC7LL, xmlwriter_end_dtd_element);
      HASH_INVOKE_FROM_EVAL(0x79215854355CBAC7LL, proc_get_status);
      HASH_INVOKE_FROM_EVAL(0x3886D2664F874AC7LL, openssl_pkcs7_verify);
      break;
    case 2761:
      HASH_INVOKE_FROM_EVAL(0x5CA9671385EF0AC9LL, sem_release);
      break;
    case 2762:
      HASH_INVOKE_FROM_EVAL(0x45B30CD663284ACALL, is_int);
      break;
    case 2763:
      HASH_INVOKE_FROM_EVAL(0x348888DDF223AACBLL, mt_getrandmax);
      break;
    case 2764:
      HASH_INVOKE_FROM_EVAL(0x750D0396676E6ACCLL, imagecolorexact);
      HASH_INVOKE_FROM_EVAL(0x2BD6476D2C467ACCLL, pagelet_server_task_status);
      break;
    case 2765:
      HASH_INVOKE_FROM_EVAL(0x173EDC165B673ACDLL, magicktransformimage);
      break;
    case 2769:
      HASH_INVOKE_FROM_EVAL(0x47E2B4F7B8DE5AD1LL, xmlwriter_write_dtd_attlist);
      HASH_INVOKE_FROM_EVAL(0x314317450857FAD1LL, ctype_punct);
      break;
    case 2773:
      HASH_INVOKE_FROM_EVAL(0x0D5DAF8034B41AD5LL, get_include_path);
      HASH_INVOKE_FROM_EVAL(0x5338F971C6DCEAD5LL, hphp_splfileinfo_islink);
      break;
    case 2774:
      HASH_INVOKE_FROM_EVAL(0x231BCE6071220AD6LL, drawcircle);
      break;
    case 2776:
      HASH_INVOKE_FROM_EVAL(0x52401023E146AAD8LL, xmlwriter_end_dtd);
      break;
    case 2779:
      HASH_INVOKE_FROM_EVAL(0x24771ED112008ADBLL, echo);
      break;
    case 2780:
      HASH_INVOKE_FROM_EVAL(0x547E7EE64761AADCLL, imagecreatefromxbm);
      break;
    case 2781:
      HASH_INVOKE_FROM_EVAL(0x3E319E451A32FADDLL, magicksharpenimage);
      break;
    case 2782:
      HASH_INVOKE_FROM_EVAL(0x31D1C58F7BD89ADELL, hphp_directoryiterator_seek);
      break;
    case 2788:
      HASH_INVOKE_FROM_EVAL(0x47B15A7136E94AE4LL, strnatcasecmp);
      HASH_INVOKE_FROM_EVAL(0x1827F1C22F1CCAE4LL, hebrevc);
      break;
    case 2790:
      HASH_INVOKE_FROM_EVAL(0x0E09D0FEA30B6AE6LL, hphp_get_function_info);
      break;
    case 2795:
      HASH_INVOKE_FROM_EVAL(0x225F05071947BAEBLL, drawpathlinetoabsolute);
      break;
    case 2797:
      HASH_INVOKE_FROM_EVAL(0x46C33B4739C2FAEDLL, shm_remove_var);
      break;
    case 2798:
      HASH_INVOKE_FROM_EVAL(0x160A82E3E2CBBAEELL, is_finite);
      break;
    case 2800:
      HASH_INVOKE_FROM_EVAL(0x6B259D5D9D681AF0LL, register_postsend_function);
      break;
    case 2804:
      HASH_INVOKE_FROM_EVAL(0x2EC0ABF9A979FAF4LL, ob_get_level);
      break;
    case 2806:
      HASH_INVOKE_FROM_EVAL(0x2C7C9772AE983AF6LL, drawsetgravity);
      break;
    case 2808:
      HASH_INVOKE_FROM_EVAL(0x12859AD75BAF3AF8LL, magickreadimageblob);
      break;
    case 2813:
      HASH_INVOKE_FROM_EVAL(0x16BA422EB6C51AFDLL, gzwrite);
      break;
    case 2814:
      HASH_INVOKE_FROM_EVAL(0x04E86BA79B6CBAFELL, stream_socket_shutdown);
      break;
    case 2815:
      HASH_INVOKE_FROM_EVAL(0x7833F4C337542AFFLL, openssl_pkey_export);
      break;
    case 2817:
      HASH_INVOKE_FROM_EVAL(0x6F3503C7FB12DB01LL, lchgrp);
      break;
    case 2819:
      HASH_INVOKE_FROM_EVAL(0x673A96C50F00FB03LL, str_word_count);
      HASH_INVOKE_FROM_EVAL(0x32458C11C6E74B03LL, pixelsetblackquantum);
      break;
    case 2826:
      HASH_INVOKE_FROM_EVAL(0x14B366EF64A66B0ALL, get_loaded_extensions);
      HASH_INVOKE_FROM_EVAL(0x14AF32A23B507B0ALL, metaphone);
      break;
    case 2829:
      HASH_INVOKE_FROM_EVAL(0x368DBC0699272B0DLL, magicknegateimage);
      break;
    case 2836:
      HASH_INVOKE_FROM_EVAL(0x76675F14C1138B14LL, gzuncompress);
      break;
    case 2837:
      HASH_INVOKE_FROM_EVAL(0x24D0895FBB7BCB15LL, is_callable);
      HASH_INVOKE_FROM_EVAL(0x773E3809C4954B15LL, hphp_recursivedirectoryiterator_current);
      break;
    case 2839:
      HASH_INVOKE_FROM_EVAL(0x66F9A476DAB47B17LL, pixelsetcolor);
      break;
    case 2840:
      HASH_INVOKE_FROM_EVAL(0x70448A629A74FB18LL, ksort);
      break;
    case 2841:
      HASH_INVOKE_FROM_EVAL(0x0551EACBE8278B19LL, decoct);
      break;
    case 2842:
      HASH_INVOKE_FROM_EVAL(0x399522EE0CF3EB1ALL, drawsetstrokewidth);
      break;
    case 2843:
      HASH_INVOKE_FROM_EVAL(0x1B7CE8114AEACB1BLL, magickannotateimage);
      break;
    case 2844:
      HASH_INVOKE_FROM_EVAL(0x249399CEC35B7B1CLL, png2wbmp);
      break;
    case 2845:
      HASH_INVOKE_FROM_EVAL(0x6791459B883F0B1DLL, apache_reset_timeout);
      break;
    case 2846:
      HASH_INVOKE_FROM_EVAL(0x7160AA24D4251B1ELL, mb_strripos);
      break;
    case 2848:
      HASH_INVOKE_FROM_EVAL(0x2563BB012A5C3B20LL, oci_define_by_name);
      HASH_INVOKE_FROM_EVAL(0x1112712715D75B20LL, pixelgetblackquantum);
      break;
    case 2853:
      HASH_INVOKE_FROM_EVAL(0x798F2776FECAEB25LL, get_required_files);
      break;
    case 2854:
      HASH_INVOKE_FROM_EVAL(0x24CE95457EACBB26LL, get_parent_class);
      break;
    case 2857:
      HASH_INVOKE_FROM_EVAL(0x17C38BE3A6EE8B29LL, mysql_field_flags);
      break;
    case 2858:
      HASH_INVOKE_FROM_EVAL(0x1F4984938E1DBB2ALL, sort);
      break;
    case 2860:
      HASH_INVOKE_FROM_EVAL(0x70742211FA3EFB2CLL, imagettftext);
      break;
    case 2865:
      HASH_INVOKE_FROM_EVAL(0x442B1E05FC146B31LL, stream_context_set_param);
      break;
    case 2867:
      HASH_INVOKE_FROM_EVAL(0x00DCD60DD8752B33LL, set_exception_handler);
      HASH_INVOKE_FROM_EVAL(0x4D5D45D1F1EB3B33LL, posix_access);
      break;
    case 2868:
      HASH_INVOKE_FROM_EVAL(0x0B7D52E2540ABB34LL, tan);
      break;
    case 2869:
      HASH_INVOKE_FROM_EVAL(0x78842C1950B38B35LL, drawpathfinish);
      break;
    case 2871:
      HASH_INVOKE_FROM_EVAL(0x053B14F52350FB37LL, socket_shutdown);
      break;
    case 2872:
      HASH_INVOKE_FROM_EVAL(0x68C09D6CB8E79B38LL, class_exists);
      break;
    case 2873:
      HASH_INVOKE_FROM_EVAL(0x02A2C373E54FFB39LL, hash_init);
      break;
    case 2874:
      HASH_INVOKE_FROM_EVAL(0x49A45F75B2B25B3ALL, apd_breakpoint);
      break;
    case 2876:
      HASH_INVOKE_FROM_EVAL(0x35F4A0789F367B3CLL, drawpathlinetohorizontalrelative);
      break;
    case 2878:
      HASH_INVOKE_FROM_EVAL(0x5E2AF775FEB04B3ELL, posix_getppid);
      break;
    case 2879:
      HASH_INVOKE_FROM_EVAL(0x0B07AD87DF1B5B3FLL, urldecode);
      break;
    case 2880:
      HASH_INVOKE_FROM_EVAL(0x24CBCBA5C4407B40LL, evhttp_set_cache);
      break;
    case 2884:
      HASH_INVOKE_FROM_EVAL(0x4E4449EBAADD7B44LL, magickpingimage);
      break;
    case 2885:
      HASH_INVOKE_FROM_EVAL(0x684881C79ED1AB45LL, func_get_args);
      HASH_INVOKE_FROM_EVAL(0x72E3AE55A0B33B45LL, ispixelwand);
      break;
    case 2886:
      HASH_INVOKE_FROM_EVAL(0x00D8FE7A00252B46LL, escapeshellarg);
      break;
    case 2893:
      HASH_INVOKE_FROM_EVAL(0x37DF53E4D9348B4DLL, xbox_post_message);
      break;
    case 2896:
      HASH_INVOKE_FROM_EVAL(0x6237393C71E56B50LL, array_fill_keys);
      break;
    case 2899:
      HASH_INVOKE_FROM_EVAL(0x40F0B69D55F7EB53LL, drawsetstrokealpha);
      break;
    case 2901:
      HASH_INVOKE_FROM_EVAL(0x333FB673518A1B55LL, ldap_get_entries);
      break;
    case 2904:
      HASH_INVOKE_FROM_EVAL(0x6158E2E0A5ACCB58LL, idn_to_ascii);
      break;
    case 2907:
      HASH_INVOKE_FROM_EVAL(0x23FD09A13E0D8B5BLL, xmlwriter_open_memory);
      break;
    case 2913:
      HASH_INVOKE_FROM_EVAL(0x7636825871399B61LL, highlight_file);
      break;
    case 2920:
      HASH_INVOKE_FROM_EVAL(0x674F1DA24EDE7B68LL, xmlwriter_end_attribute);
      break;
    case 2922:
      HASH_INVOKE_FROM_EVAL(0x4BD4E9D9D4A56B6ALL, exif_tagname);
      break;
    case 2923:
      HASH_INVOKE_FROM_EVAL(0x5543A0CACD153B6BLL, substr_replace);
      HASH_INVOKE_FROM_EVAL(0x1D4136B4CEAE4B6BLL, stripcslashes);
      break;
    case 2927:
      HASH_INVOKE_FROM_EVAL(0x2D8D57FC1DC6CB6FLL, import_request_variables);
      break;
    case 2928:
      HASH_INVOKE_FROM_EVAL(0x1A73FD4416FECB70LL, magickwriteimagefile);
      break;
    case 2929:
      HASH_INVOKE_FROM_EVAL(0x5E5C875DB04CFB71LL, drawrectangle);
      break;
    case 2933:
      HASH_INVOKE_FROM_EVAL(0x42F0AED7599C1B75LL, magickechoimageblob);
      break;
    case 2934:
      HASH_INVOKE_FROM_EVAL(0x2A63A0BF9B7E3B76LL, ini_alter);
      break;
    case 2935:
      HASH_INVOKE_FROM_EVAL(0x7F5F29D8E63ABB77LL, mcrypt_module_self_test);
      HASH_INVOKE_FROM_EVAL(0x5025B43B46679B77LL, openssl_x509_free);
      break;
    case 2937:
      HASH_INVOKE_FROM_EVAL(0x31242F51AA828B79LL, drawpoppattern);
      break;
    case 2940:
      HASH_INVOKE_FROM_EVAL(0x3A096F905FBF7B7CLL, magickcommentimage);
      break;
    case 2941:
      HASH_INVOKE_FROM_EVAL(0x28DE19828167FB7DLL, magickmapimage);
      break;
    case 2943:
      HASH_INVOKE_FROM_EVAL(0x308C90AD9478CB7FLL, substr_compare);
      break;
    case 2946:
      HASH_INVOKE_FROM_EVAL(0x5BDE96FD5015AB82LL, base_convert);
      break;
    case 2949:
      HASH_INVOKE_FROM_EVAL(0x41F8FDD700C0CB85LL, socket_last_error);
      break;
    case 2955:
      HASH_INVOKE_FROM_EVAL(0x3B72159A4B04FB8BLL, set_time_limit);
      break;
    case 2957:
      HASH_INVOKE_FROM_EVAL(0x3B831DB1A615FB8DLL, xhprof_sample_enable);
      break;
    case 2958:
      HASH_INVOKE_FROM_EVAL(0x62A4D7A03F7C3B8ELL, ceil);
      break;
    case 2965:
      HASH_INVOKE_FROM_EVAL(0x687104D0A7C11B95LL, oci_new_descriptor);
      break;
    case 2967:
      HASH_INVOKE_FROM_EVAL(0x09837A82A928AB97LL, is_null);
      break;
    case 2969:
      HASH_INVOKE_FROM_EVAL(0x076E66D4089A3B99LL, mb_stripos);
      break;
    case 2970:
      HASH_INVOKE_FROM_EVAL(0x023133732CB51B9ALL, exif_thumbnail);
      break;
    case 2975:
      HASH_INVOKE_FROM_EVAL(0x390A267EC6B51B9FLL, socket_sendto);
      break;
    case 2978:
      HASH_INVOKE_FROM_EVAL(0x4870ADD98EE02BA2LL, pcntl_wifsignaled);
      break;
    case 2979:
      HASH_INVOKE_FROM_EVAL(0x444A3375EFBC2BA3LL, openssl_public_decrypt);
      break;
    case 2980:
      HASH_INVOKE_FROM_EVAL(0x0D95DD13A2D3BBA4LL, drawtranslate);
      break;
    case 2986:
      HASH_INVOKE_FROM_EVAL(0x7C833A303C7CFBAALL, getrandmax);
      break;
    case 2987:
      HASH_INVOKE_FROM_EVAL(0x006481EAF2A70BABLL, ldap_errno);
      break;
    case 2991:
      HASH_INVOKE_FROM_EVAL(0x6A2236CDDFF12BAFLL, magickhaspreviousimage);
      break;
    case 2992:
      HASH_INVOKE_FROM_EVAL(0x1F3E4C6660247BB0LL, imagecolorresolve);
      HASH_INVOKE_FROM_EVAL(0x7D9BF61D6CDE3BB0LL, fb_parallel_query);
      break;
    case 2993:
      HASH_INVOKE_FROM_EVAL(0x04A24B397CF46BB1LL, strrchr);
      break;
    case 2997:
      HASH_INVOKE_FROM_EVAL(0x3F7DCC3A00800BB5LL, imagecolorallocate);
      break;
    case 2998:
      HASH_INVOKE_FROM_EVAL(0x3AD840AB993DDBB6LL, ldap_8859_to_t61);
      break;
    case 3004:
      HASH_INVOKE_FROM_EVAL(0x43B74276235F4BBCLL, is_bool);
      break;
    case 3006:
      HASH_INVOKE_FROM_EVAL(0x79617ED8EFD1ABBELL, get_class_vars);
      HASH_INVOKE_FROM_EVAL(0x3F56AF1511AEDBBELL, magicklabelimage);
      HASH_INVOKE_FROM_EVAL(0x5ECB0B145B88EBBELL, imagefilledarc);
      HASH_INVOKE_FROM_EVAL(0x42684202E2E62BBELL, mcrypt_get_iv_size);
      break;
    case 3015:
      HASH_INVOKE_FROM_EVAL(0x10C5CF7B55173BC7LL, settype);
      break;
    case 3017:
      HASH_INVOKE_FROM_EVAL(0x0B4E7B9180C4ABC9LL, xml_set_end_namespace_decl_handler);
      HASH_INVOKE_FROM_EVAL(0x22BA0903D344CBC9LL, array_rand);
      break;
    case 3018:
      HASH_INVOKE_FROM_EVAL(0x4122DFAC25BDFBCALL, hphp_splfileinfo_getowner);
      break;
    case 3021:
      HASH_INVOKE_FROM_EVAL(0x22251ECF8CD58BCDLL, array_product);
      HASH_INVOKE_FROM_EVAL(0x53A88C8F973CFBCDLL, apc_clear_cache);
      break;
    case 3022:
      HASH_INVOKE_FROM_EVAL(0x45D6BA980AFFDBCELL, msg_get_queue);
      HASH_INVOKE_FROM_EVAL(0x600AFF0A6378ABCELL, is_writeable);
      break;
    case 3024:
      HASH_INVOKE_FROM_EVAL(0x7046755D8374EBD0LL, ctype_digit);
      HASH_INVOKE_FROM_EVAL(0x6846CA07A5E21BD0LL, hphp_directoryiterator___construct);
      break;
    case 3026:
      HASH_INVOKE_FROM_EVAL(0x6FE3C5FF5E883BD2LL, round);
      break;
    case 3028:
      HASH_INVOKE_FROM_EVAL(0x5B2F2A23D8368BD4LL, magickraiseimage);
      HASH_INVOKE_FROM_EVAL(0x4E4EB301A994DBD4LL, drawpolygon);
      break;
    case 3032:
      HASH_INVOKE_FROM_EVAL(0x21E44C7C7A911BD8LL, phpinfo);
      break;
    case 3038:
      HASH_INVOKE_FROM_EVAL(0x58D0D9B66F045BDELL, strpos);
      break;
    case 3040:
      HASH_INVOKE_FROM_EVAL(0x2E10B74DC6067BE0LL, strip_tags);
      break;
    case 3041:
      HASH_INVOKE_FROM_EVAL(0x25FBB61480091BE1LL, mysql_client_encoding);
      break;
    case 3047:
      HASH_INVOKE_FROM_EVAL(0x1BB5D99C1D29CBE7LL, strstr);
      break;
    case 3048:
      HASH_INVOKE_FROM_EVAL(0x4E903B706977ABE8LL, imagepsslantfont);
      break;
    case 3051:
      HASH_INVOKE_FROM_EVAL(0x505B44DDF2383BEBLL, drawgetfillcolor);
      HASH_INVOKE_FROM_EVAL(0x0C1904372E8EDBEBLL, stream_copy_to_stream);
      break;
    case 3052:
      HASH_INVOKE_FROM_EVAL(0x44279BB3E2191BECLL, socket_accept);
      break;
    case 3054:
      HASH_INVOKE_FROM_EVAL(0x03F50E435DE20BEELL, magickclippathimage);
      HASH_INVOKE_FROM_EVAL(0x790B7C44A3442BEELL, asort);
      break;
    case 3056:
      HASH_INVOKE_FROM_EVAL(0x187C049E785A1BF0LL, iconv_get_encoding);
      HASH_INVOKE_FROM_EVAL(0x04C0582DB1AD7BF0LL, mt_srand);
      break;
    case 3057:
      HASH_INVOKE_FROM_EVAL(0x0CA96856E5BEFBF1LL, iptcparse);
      break;
    case 3060:
      HASH_INVOKE_FROM_EVAL(0x1444DB037B4D5BF4LL, imagegammacorrect);
      break;
    case 3062:
      HASH_INVOKE_FROM_EVAL(0x08B4BEBAB3312BF6LL, image_type_to_extension);
      break;
    case 3063:
      HASH_INVOKE_FROM_EVAL(0x74ABB4A1E10BBBF7LL, time);
      break;
    case 3065:
      HASH_INVOKE_FROM_EVAL(0x5B7F6E0A642BBBF9LL, sleep);
      break;
    case 3068:
      HASH_INVOKE_FROM_EVAL(0x64F52E1DB5E95BFCLL, curl_multi_remove_handle);
      break;
    case 3074:
      HASH_INVOKE_FROM_EVAL(0x249340DF734D9C02LL, magickgetimageheight);
      break;
    case 3077:
      HASH_INVOKE_FROM_EVAL(0x2EC378A759F9EC05LL, xbox_task_status);
      break;
    case 3080:
      HASH_INVOKE_FROM_EVAL(0x48E1616EE837FC08LL, is_uploaded_file);
      break;
    case 3083:
      HASH_INVOKE_FROM_EVAL(0x0EEE484739520C0BLL, magickthresholdimage);
      HASH_INVOKE_FROM_EVAL(0x0833BCE91C40CC0BLL, magickqueryconfigureoption);
      break;
    case 3090:
      HASH_INVOKE_FROM_EVAL(0x510B683F2E764C12LL, fb_load_local_databases);
      break;
    case 3099:
      HASH_INVOKE_FROM_EVAL(0x67742A0F218F6C1BLL, posix_initgroups);
      HASH_INVOKE_FROM_EVAL(0x7D615C7E3ADB2C1BLL, xmlwriter_write_comment);
      break;
    case 3100:
      HASH_INVOKE_FROM_EVAL(0x758A62BD65E6FC1CLL, imagegd2);
      break;
    case 3102:
      HASH_INVOKE_FROM_EVAL(0x7039C5EBB1D6BC1ELL, array_walk);
      break;
    case 3103:
      HASH_INVOKE_FROM_EVAL(0x3A5D921797669C1FLL, hphp_log);
      HASH_INVOKE_FROM_EVAL(0x0D321888A29C6C1FLL, oci_fetch_object);
      break;
    case 3104:
      HASH_INVOKE_FROM_EVAL(0x7BD43EB167198C20LL, xmlwriter_write_pi);
      break;
    case 3105:
      HASH_INVOKE_FROM_EVAL(0x0179CBA2C5F4DC21LL, magickgetimageformat);
      break;
    case 3111:
      HASH_INVOKE_FROM_EVAL(0x5A02EE8ED39F0C27LL, posix_getgrnam);
      break;
    case 3112:
      HASH_INVOKE_FROM_EVAL(0x79A4E240F18BAC28LL, rand);
      break;
    case 3115:
      HASH_INVOKE_FROM_EVAL(0x09A98E99D51E8C2BLL, hphp_recursivedirectoryiterator_seek);
      break;
    case 3116:
      HASH_INVOKE_FROM_EVAL(0x116C3EC924B9AC2CLL, imagegd);
      break;
    case 3122:
      HASH_INVOKE_FROM_EVAL(0x0B9B362534621C32LL, isdrawingwand);
      break;
    case 3123:
      HASH_INVOKE_FROM_EVAL(0x49965C44E9EE3C33LL, set_file_buffer);
      break;
    case 3128:
      HASH_INVOKE_FROM_EVAL(0x21564F9315F3FC38LL, drawsettextdecoration);
      break;
    case 3132:
      HASH_INVOKE_FROM_EVAL(0x69488CC69B897C3CLL, hphp_recursiveiteratoriterator_getinneriterator);
      break;
    case 3134:
      HASH_INVOKE_FROM_EVAL(0x15EC581662651C3ELL, date_parse);
      break;
    case 3141:
      HASH_INVOKE_FROM_EVAL(0x6EF89BCAD607CC45LL, strncasecmp);
      break;
    case 3142:
      HASH_INVOKE_FROM_EVAL(0x7D992445F5E37C46LL, magicktextureimage);
      break;
    case 3143:
      HASH_INVOKE_FROM_EVAL(0x44055093E56E4C47LL, mcrypt_enc_get_key_size);
      break;
    case 3146:
      HASH_INVOKE_FROM_EVAL(0x3C23768CFB492C4ALL, gzinflate);
      break;
    case 3150:
      HASH_INVOKE_FROM_EVAL(0x5DAC1C64D8F08C4ELL, openssl_pkey_get_private);
      break;
    case 3152:
      HASH_INVOKE_FROM_EVAL(0x04534F26B8D05C50LL, drawgetstrokecolor);
      break;
    case 3153:
      HASH_INVOKE_FROM_EVAL(0x56EDB60C824E8C51LL, key);
      break;
    case 3154:
      HASH_INVOKE_FROM_EVAL(0x1FC294B806F76C52LL, php_sapi_name);
      break;
    case 3159:
      HASH_INVOKE_FROM_EVAL(0x313E8EB28A111C57LL, hphp_splfileinfo_setinfoclass);
      break;
    case 3160:
      HASH_INVOKE_FROM_EVAL(0x1B8C3DA27170DC58LL, dirname);
      break;
    case 3161:
      HASH_INVOKE_FROM_EVAL(0x57633BDF8DB3FC59LL, i18n_loc_set_attribute);
      break;
    case 3165:
      HASH_INVOKE_FROM_EVAL(0x1F032B064680FC5DLL, oci_field_type);
      break;
    case 3169:
      HASH_INVOKE_FROM_EVAL(0x6E54EEDA1D887C61LL, magicksetimageinterlacescheme);
      HASH_INVOKE_FROM_EVAL(0x5176725DA884DC61LL, curl_setopt);
      break;
    case 3171:
      HASH_INVOKE_FROM_EVAL(0x43C0E9827D502C63LL, array_intersect_assoc);
      break;
    case 3172:
      HASH_INVOKE_FROM_EVAL(0x3409D717D9246C64LL, libxml_use_internal_errors);
      break;
    case 3175:
      HASH_INVOKE_FROM_EVAL(0x07DC355325165C67LL, magickwriteimage);
      break;
    case 3176:
      HASH_INVOKE_FROM_EVAL(0x10D6AE9D688D1C68LL, copy);
      break;
    case 3178:
      HASH_INVOKE_FROM_EVAL(0x41BD9EA0BC5E4C6ALL, move_uploaded_file);
      break;
    case 3179:
      HASH_INVOKE_FROM_EVAL(0x7C6B37BF6300AC6BLL, iconv_mime_encode);
      break;
    case 3185:
      HASH_INVOKE_FROM_EVAL(0x1E074215FE5FCC71LL, set_error_handler);
      break;
    case 3189:
      HASH_INVOKE_FROM_EVAL(0x528366F3195ACC75LL, xbox_task_result);
      break;
    case 3190:
      HASH_INVOKE_FROM_EVAL(0x1C35934C6BC52C76LL, libxml_clear_errors);
      HASH_INVOKE_FROM_EVAL(0x296AFFE84B5E4C76LL, oci_fetch_row);
      break;
    case 3192:
      HASH_INVOKE_FROM_EVAL(0x665F08996BD4AC78LL, magicksetimagegreenprimary);
      break;
    case 3194:
      HASH_INVOKE_FROM_EVAL(0x05D7B804ECDE8C7ALL, checkdnsrr);
      HASH_INVOKE_FROM_EVAL(0x05F3BC04D61CAC7ALL, get_defined_vars);
      break;
    case 3195:
      HASH_INVOKE_FROM_EVAL(0x749E45FBD48BEC7BLL, hphp_recursivedirectoryiterator___tostring);
      break;
    case 3198:
      HASH_INVOKE_FROM_EVAL(0x5F41821072A06C7ELL, hphp_splfileinfo_getctime);
      break;
    case 3201:
      HASH_INVOKE_FROM_EVAL(0x767806D6F1053C81LL, sin);
      break;
    case 3204:
      HASH_INVOKE_FROM_EVAL(0x5D49AF7004696C84LL, shm_detach);
      break;
    case 3205:
      HASH_INVOKE_FROM_EVAL(0x56DA17241B793C85LL, mysql_set_timeout);
      break;
    case 3209:
      HASH_INVOKE_FROM_EVAL(0x0F9C0C82F40F2C89LL, pixelsetcyanquantum);
      break;
    case 3214:
      HASH_INVOKE_FROM_EVAL(0x467470230015AC8ELL, mcrypt_module_is_block_algorithm_mode);
      break;
    case 3215:
      HASH_INVOKE_FROM_EVAL(0x4173EFD9A8EECC8FLL, magicknewimage);
      break;
    case 3216:
      HASH_INVOKE_FROM_EVAL(0x05556EDFC1BB0C90LL, mysql_info);
      HASH_INVOKE_FROM_EVAL(0x3F0C947E68D02C90LL, ini_get_all);
      break;
    case 3217:
      HASH_INVOKE_FROM_EVAL(0x4E04B71729485C91LL, clonedrawingwand);
      break;
    case 3219:
      HASH_INVOKE_FROM_EVAL(0x0F8242C6327B5C93LL, dns_check_record);
      break;
    case 3222:
      HASH_INVOKE_FROM_EVAL(0x47C5BC101A512C96LL, magickquantizeimage);
      break;
    case 3225:
      HASH_INVOKE_FROM_EVAL(0x2EA6E1D600786C99LL, mb_strtoupper);
      break;
    case 3226:
      HASH_INVOKE_FROM_EVAL(0x374F20BDAF709C9ALL, mb_preferred_mime_name);
      break;
    case 3227:
      HASH_INVOKE_FROM_EVAL(0x36F7F9FD7766DC9BLL, xmlwriter_end_comment);
      break;
    case 3230:
      HASH_INVOKE_FROM_EVAL(0x50296037C7968C9ELL, preg_split);
      break;
    case 3233:
      HASH_INVOKE_FROM_EVAL(0x4590B5971EC9ACA1LL, getmygid);
      break;
    case 3235:
      HASH_INVOKE_FROM_EVAL(0x737253E9FC112CA3LL, socket_close);
      break;
    case 3242:
      HASH_INVOKE_FROM_EVAL(0x5B13DE83E2DE0CAALL, oci_rollback);
      HASH_INVOKE_FROM_EVAL(0x653C0D78A3501CAALL, oci_fetch_all);
      break;
    case 3245:
      HASH_INVOKE_FROM_EVAL(0x1C1216F2B7C16CADLL, ftell);
      break;
    case 3246:
      HASH_INVOKE_FROM_EVAL(0x3ACD2F1EA5282CAELL, magickmattefloodfillimage);
      break;
    case 3248:
      HASH_INVOKE_FROM_EVAL(0x373B3FADEACB7CB0LL, openssl_private_encrypt);
      break;
    case 3249:
      HASH_INVOKE_FROM_EVAL(0x40D8DC24FA917CB1LL, hphp_splfileobject_fgetss);
      HASH_INVOKE_FROM_EVAL(0x735555B148E58CB1LL, ldap_read);
      break;
    case 3250:
      HASH_INVOKE_FROM_EVAL(0x56023CC5ECC9ECB2LL, dns_get_mx);
      break;
    case 3252:
      HASH_INVOKE_FROM_EVAL(0x41FBEF9F7A024CB4LL, xmlwriter_end_element);
      HASH_INVOKE_FROM_EVAL(0x742AD1AA5A80ECB4LL, output_reset_rewrite_vars);
      break;
    case 3254:
      HASH_INVOKE_FROM_EVAL(0x560637BE51C36CB6LL, ezmlm_hash);
      break;
    case 3255:
      HASH_INVOKE_FROM_EVAL(0x3DFD5CA79919DCB7LL, imageantialias);
      HASH_INVOKE_FROM_EVAL(0x39E03AAC188D3CB7LL, magickgetimagecompressionquality);
      break;
    case 3259:
      HASH_INVOKE_FROM_EVAL(0x41D3B07854936CBBLL, token_get_all);
      HASH_INVOKE_FROM_EVAL(0x15ACD9F32D214CBBLL, mysql_fetch_lengths);
      break;
    case 3260:
      HASH_INVOKE_FROM_EVAL(0x19C1872E55A7ECBCLL, is_long);
      HASH_INVOKE_FROM_EVAL(0x3978BE548631ECBCLL, hash_final);
      HASH_INVOKE_FROM_EVAL(0x733137183026ACBCLL, hphp_splfileobject_next);
      break;
    case 3264:
      HASH_INVOKE_FROM_EVAL(0x3033FE14E114FCC0LL, magicksetimageblueprimary);
      break;
    case 3266:
      HASH_INVOKE_FROM_EVAL(0x42BCEFCF899D0CC2LL, magickgetimagecolorspace);
      HASH_INVOKE_FROM_EVAL(0x34B6388D7730BCC2LL, drawline);
      break;
    case 3278:
      HASH_INVOKE_FROM_EVAL(0x0183A548B759BCCELL, posix_getpgid);
      HASH_INVOKE_FROM_EVAL(0x66273C5932B1FCCELL, clock_gettime);
      break;
    case 3279:
      HASH_INVOKE_FROM_EVAL(0x407B1F3AFEC43CCFLL, pixelgetblue);
      break;
    case 3281:
      HASH_INVOKE_FROM_EVAL(0x576C5DC462663CD1LL, explode);
      break;
    case 3282:
      HASH_INVOKE_FROM_EVAL(0x1FD3FB2AB0F48CD2LL, magickgetimagesignature);
      break;
    case 3283:
      HASH_INVOKE_FROM_EVAL(0x544302E2FAD3FCD3LL, magicknextimage);
      break;
    case 3284:
      HASH_INVOKE_FROM_EVAL(0x323FE1D92C9B3CD4LL, gzdecode);
      break;
    case 3285:
      HASH_INVOKE_FROM_EVAL(0x757BC444FDF79CD5LL, posix_get_last_error);
      break;
    case 3286:
      HASH_INVOKE_FROM_EVAL(0x11166D3106DB6CD6LL, wandhasexception);
      break;
    case 3289:
      HASH_INVOKE_FROM_EVAL(0x27BFAF1293A60CD9LL, ldap_get_dn);
      break;
    case 3290:
      HASH_INVOKE_FROM_EVAL(0x674AA2DBDA5E4CDALL, imageloadfont);
      HASH_INVOKE_FROM_EVAL(0x09C6455B4BC6FCDALL, drawsetviewbox);
      break;
    case 3300:
      HASH_INVOKE_FROM_EVAL(0x7CDDF96AFEA2DCE4LL, chunk_split);
      break;
    case 3306:
      HASH_INVOKE_FROM_EVAL(0x5A8AF4F880DA4CEALL, mailparse_msg_extract_whole_part_file);
      HASH_INVOKE_FROM_EVAL(0x7821BD05E5228CEALL, imagewbmp);
      break;
    case 3310:
      HASH_INVOKE_FROM_EVAL(0x78FFA0E69D6AACEELL, mcrypt_cfb);
      break;
    case 3311:
      HASH_INVOKE_FROM_EVAL(0x6AA89C314C647CEFLL, magickgetimagehistogram);
      break;
    case 3313:
      HASH_INVOKE_FROM_EVAL(0x21C8FC9A94404CF1LL, php_ini_scanned_files);
      break;
    case 3314:
      HASH_INVOKE_FROM_EVAL(0x26C49BBC67475CF2LL, magicksetimagewhitepoint);
      break;
    case 3315:
      HASH_INVOKE_FROM_EVAL(0x5C1F75D51C077CF3LL, pixelgetindex);
      break;
    case 3319:
      HASH_INVOKE_FROM_EVAL(0x1C30C8470100ECF7LL, mcrypt_enc_is_block_mode);
      break;
    case 3321:
      HASH_INVOKE_FROM_EVAL(0x537CF5DE8C43CCF9LL, curl_getinfo);
      break;
    case 3323:
      HASH_INVOKE_FROM_EVAL(0x09B4EE276DCCFCFBLL, mysql_fetch_row);
      break;
    case 3326:
      HASH_INVOKE_FROM_EVAL(0x768F3E6D1CBA5CFELL, socket_recv);
      break;
    case 3327:
      HASH_INVOKE_FROM_EVAL(0x748D3DFF0EB57CFFLL, uniqid);
      HASH_INVOKE_FROM_EVAL(0x48A2F2A7A4620CFFLL, pixelsetyellowquantum);
      break;
    case 3330:
      HASH_INVOKE_FROM_EVAL(0x018F22AEA371ED02LL, filemtime);
      break;
    case 3331:
      HASH_INVOKE_FROM_EVAL(0x48EE7157C4392D03LL, apache_getenv);
      break;
    case 3332:
      HASH_INVOKE_FROM_EVAL(0x1248250E701DAD04LL, magickgaussianblurimage);
      break;
    case 3334:
      HASH_INVOKE_FROM_EVAL(0x2BA9FB0F8B76DD06LL, number_format);
      break;
    case 3335:
      HASH_INVOKE_FROM_EVAL(0x19B643D858DC6D07LL, magickgetimagerenderingintent);
      break;
    case 3337:
      HASH_INVOKE_FROM_EVAL(0x153F7DBFC9047D09LL, pixelsetred);
      break;
    case 3340:
      HASH_INVOKE_FROM_EVAL(0x30A8326034801D0CLL, mysql_pconnect);
      break;
    case 3341:
      HASH_INVOKE_FROM_EVAL(0x3ACE8A8BC9ACDD0DLL, iconv_mime_decode);
      break;
    case 3344:
      HASH_INVOKE_FROM_EVAL(0x42BEEC88EE81FD10LL, imagechar);
      HASH_INVOKE_FROM_EVAL(0x08F41A00D5D57D10LL, mb_decode_mimeheader);
      HASH_INVOKE_FROM_EVAL(0x5CEFA5A265104D10LL, count);
      break;
    case 3345:
      HASH_INVOKE_FROM_EVAL(0x2D484921B5400D11LL, magickradialblurimage);
      break;
    case 3346:
      HASH_INVOKE_FROM_EVAL(0x5F165B40AEEE5D12LL, hphp_splfileinfo_getfilename);
      break;
    case 3348:
      HASH_INVOKE_FROM_EVAL(0x63837ECAF6235D14LL, preg_replace);
      break;
    case 3351:
      HASH_INVOKE_FROM_EVAL(0x12BB5E00E714ED17LL, magickgetimagecompose);
      break;
    case 3354:
      HASH_INVOKE_FROM_EVAL(0x75DB75CA9DE56D1ALL, xml_parser_get_option);
      HASH_INVOKE_FROM_EVAL(0x39994614C6315D1ALL, hphp_recursivedirectoryiterator_key);
      break;
    case 3355:
      HASH_INVOKE_FROM_EVAL(0x70C22A7EEF54CD1BLL, ldap_compare);
      break;
    case 3359:
      HASH_INVOKE_FROM_EVAL(0x566465036CCBCD1FLL, min);
      break;
    case 3365:
      HASH_INVOKE_FROM_EVAL(0x71DF0C17F47EDD25LL, getprotobynumber);
      break;
    case 3368:
      HASH_INVOKE_FROM_EVAL(0x7C12261259F87D28LL, mcrypt_enc_is_block_algorithm_mode);
      break;
    case 3369:
      HASH_INVOKE_FROM_EVAL(0x632D50B69429ED29LL, socket_set_block);
      break;
    case 3370:
      HASH_INVOKE_FROM_EVAL(0x7A9C06B9CF853D2ALL, substr_count);
      break;
    case 3378:
      HASH_INVOKE_FROM_EVAL(0x4DAC43060BA57D32LL, stream_wrapper_restore);
      break;
    case 3383:
      HASH_INVOKE_FROM_EVAL(0x3ACF745D381E9D37LL, rtrim);
      break;
    case 3384:
      HASH_INVOKE_FROM_EVAL(0x0BA3AD85EB597D38LL, pagelet_server_task_result);
      break;
    case 3387:
      HASH_INVOKE_FROM_EVAL(0x0784B2B034560D3BLL, destroypixelwand);
      HASH_INVOKE_FROM_EVAL(0x6C9AE626DAD02D3BLL, mailparse_msg_extract_part_file);
      break;
    case 3392:
      HASH_INVOKE_FROM_EVAL(0x198627C81DABAD40LL, register_cleanup_function);
      break;
    case 3393:
      HASH_INVOKE_FROM_EVAL(0x6B6DA1EE18673D41LL, xmlwriter_end_dtd_entity);
      break;
    case 3394:
      HASH_INVOKE_FROM_EVAL(0x40497FCA4EC4DD42LL, posix_seteuid);
      HASH_INVOKE_FROM_EVAL(0x298BA735FA3ABD42LL, nl_langinfo);
      break;
    case 3397:
      HASH_INVOKE_FROM_EVAL(0x400A44045A999D45LL, rawurlencode);
      break;
    case 3398:
      HASH_INVOKE_FROM_EVAL(0x502CF4EB0A747D46LL, magicksetimagebias);
      HASH_INVOKE_FROM_EVAL(0x455DB7F86BCEDD46LL, pixelsetopacityquantum);
      HASH_INVOKE_FROM_EVAL(0x59AD2C922FF75D46LL, mdecrypt_generic);
      break;
    case 3401:
      HASH_INVOKE_FROM_EVAL(0x113ED435AEFDDD49LL, imagecolorallocatealpha);
      HASH_INVOKE_FROM_EVAL(0x41785512C45FCD49LL, mysql_ping);
      break;
    case 3407:
      HASH_INVOKE_FROM_EVAL(0x0FBCF35ADD209D4FLL, drawarc);
      break;
    case 3408:
      HASH_INVOKE_FROM_EVAL(0x39B11A2A25E40D50LL, mysql_get_server_info);
      HASH_INVOKE_FROM_EVAL(0x337D2252CDA22D50LL, is_real);
      break;
    case 3413:
      HASH_INVOKE_FROM_EVAL(0x36D672EF4FBEFD55LL, json_encode);
      break;
    case 3416:
      HASH_INVOKE_FROM_EVAL(0x146109BDD2F97D58LL, hphp_splfileobject_setmaxlinelen);
      break;
    case 3418:
      HASH_INVOKE_FROM_EVAL(0x4ACCF26A7AE80D5ALL, imagefilltoborder);
      break;
    case 3419:
      HASH_INVOKE_FROM_EVAL(0x41B5E3D2AADE2D5BLL, drawroundrectangle);
      break;
    case 3420:
      HASH_INVOKE_FROM_EVAL(0x1371413B4F6F8D5CLL, pixelgetred);
      break;
    case 3424:
      HASH_INVOKE_FROM_EVAL(0x6FACBD7F02B6FD60LL, uasort);
      HASH_INVOKE_FROM_EVAL(0x567276D68FE12D60LL, preg_quote);
      break;
    case 3425:
      HASH_INVOKE_FROM_EVAL(0x34F150F3D94E6D61LL, gzpassthru);
      HASH_INVOKE_FROM_EVAL(0x357BAB6E700EBD61LL, destroypixelwandarray);
      break;
    case 3427:
      HASH_INVOKE_FROM_EVAL(0x470A406564DBAD63LL, oci_field_type_raw);
      break;
    case 3430:
      HASH_INVOKE_FROM_EVAL(0x0C393EE8F6540D66LL, bccomp);
      break;
    case 3437:
      HASH_INVOKE_FROM_EVAL(0x21D924BA98BFCD6DLL, file_get_contents);
      HASH_INVOKE_FROM_EVAL(0x7D9E024FD8696D6DLL, get_class);
      HASH_INVOKE_FROM_EVAL(0x4351AFD0FD818D6DLL, magickmotionblurimage);
      break;
    case 3438:
      HASH_INVOKE_FROM_EVAL(0x0B1348D1540E7D6ELL, magicksetimageformat);
      break;
    case 3443:
      HASH_INVOKE_FROM_EVAL(0x7D8DCC72522CBD73LL, mb_detect_encoding);
      break;
    case 3446:
      HASH_INVOKE_FROM_EVAL(0x7467E8107EF08D76LL, unpack);
      break;
    case 3447:
      HASH_INVOKE_FROM_EVAL(0x3ED49C2BBDDFAD77LL, ldap_next_reference);
      break;
    case 3448:
      HASH_INVOKE_FROM_EVAL(0x6352349F97557D78LL, stream_socket_get_name);
      break;
    case 3451:
      HASH_INVOKE_FROM_EVAL(0x680A7EB3DA1F5D7BLL, prev);
      break;
    case 3454:
      HASH_INVOKE_FROM_EVAL(0x384E8BC9B5FE2D7ELL, magickfximage);
      break;
    case 3455:
      HASH_INVOKE_FROM_EVAL(0x4E19AFB75A62AD7FLL, imagerotate);
      break;
    case 3457:
      HASH_INVOKE_FROM_EVAL(0x25EA810DAEA74D81LL, ob_clean);
      break;
    case 3458:
      HASH_INVOKE_FROM_EVAL(0x2D15262403ADDD82LL, drawcomposite);
      break;
    case 3459:
      HASH_INVOKE_FROM_EVAL(0x1B0FF5C02F571D83LL, fb_rename_function);
      break;
    case 3463:
      HASH_INVOKE_FROM_EVAL(0x344091B785FE8D87LL, socket_set_timeout);
      break;
    case 3464:
      HASH_INVOKE_FROM_EVAL(0x2AFF8525E93D6D88LL, drawsetfillopacity);
      HASH_INVOKE_FROM_EVAL(0x1F22C82816F9AD88LL, hphp_splfileinfo_getpath);
      break;
    case 3465:
      HASH_INVOKE_FROM_EVAL(0x230E7AD147721D89LL, end);
      break;
    case 3470:
      HASH_INVOKE_FROM_EVAL(0x6A351AEDFC4D0D8ELL, magickgetimagemimetype);
      break;
    case 3471:
      HASH_INVOKE_FROM_EVAL(0x1806DC9468882D8FLL, gzfile);
      break;
    case 3472:
      HASH_INVOKE_FROM_EVAL(0x5E4360FC28D0AD90LL, magicksetinterlacescheme);
      break;
    case 3473:
      HASH_INVOKE_FROM_EVAL(0x48444F8F18E60D91LL, strftime);
      HASH_INVOKE_FROM_EVAL(0x7C2B3FE61FBDFD91LL, openssl_pkey_get_details);
      break;
    case 3480:
      HASH_INVOKE_FROM_EVAL(0x06A796D329C21D98LL, call_user_func);
      break;
    case 3486:
      HASH_INVOKE_FROM_EVAL(0x30C1AE2B06990D9ELL, gzseek);
      break;
    case 3488:
      HASH_INVOKE_FROM_EVAL(0x73B43ABDD5C61DA0LL, shuffle);
      HASH_INVOKE_FROM_EVAL(0x5E8606470A09BDA0LL, magickposterizeimage);
      HASH_INVOKE_FROM_EVAL(0x7084C6294240CDA0LL, octdec);
      HASH_INVOKE_FROM_EVAL(0x167A11C41EB71DA0LL, pixelgetexceptiontype);
      break;
    case 3490:
      HASH_INVOKE_FROM_EVAL(0x71583A8FEF5C7DA2LL, sys_get_temp_dir);
      break;
    case 3494:
      HASH_INVOKE_FROM_EVAL(0x28DC1AD6DA9E7DA6LL, gethostbyname);
      break;
    case 3496:
      HASH_INVOKE_FROM_EVAL(0x572AE270D9E4FDA8LL, socket_set_option);
      HASH_INVOKE_FROM_EVAL(0x474A096265502DA8LL, glob);
      break;
    case 3498:
      HASH_INVOKE_FROM_EVAL(0x6326C14D0FFA7DAALL, fb_thrift_serialize);
      break;
    case 3499:
      HASH_INVOKE_FROM_EVAL(0x188720048AB37DABLL, magickquantizeimages);
      HASH_INVOKE_FROM_EVAL(0x66764CAABFF4CDABLL, array_keys);
      break;
    case 3505:
      HASH_INVOKE_FROM_EVAL(0x67EAC6D7332F3DB1LL, hphp_splfileobject_fgetcsv);
      break;
    case 3506:
      HASH_INVOKE_FROM_EVAL(0x257371BC40186DB2LL, magickblurimage);
      break;
    case 3507:
      HASH_INVOKE_FROM_EVAL(0x628069E483F35DB3LL, hphp_splfileobject_fstat);
      HASH_INVOKE_FROM_EVAL(0x53F2C6F5AE244DB3LL, drawpushdefs);
      break;
    case 3512:
      HASH_INVOKE_FROM_EVAL(0x2B1D442AEA06ADB8LL, strpbrk);
      break;
    case 3514:
      HASH_INVOKE_FROM_EVAL(0x5E0C6E797607DDBALL, mysql_result);
      HASH_INVOKE_FROM_EVAL(0x7964DE73DCA17DBALL, magickhasnextimage);
      break;
    case 3516:
      HASH_INVOKE_FROM_EVAL(0x770DEDCB168B0DBCLL, mb_ereg_search_setpos);
      break;
    case 3517:
      HASH_INVOKE_FROM_EVAL(0x48AA091B1E493DBDLL, setlocale);
      HASH_INVOKE_FROM_EVAL(0x01E6FF7D9746CDBDLL, stream_socket_accept);
      break;
    case 3521:
      HASH_INVOKE_FROM_EVAL(0x683E88F441F9BDC1LL, chgrp);
      break;
    case 3523:
      HASH_INVOKE_FROM_EVAL(0x069EE6F604BA2DC3LL, array_reverse);
      HASH_INVOKE_FROM_EVAL(0x0433140BB339DDC3LL, log);
      break;
    case 3524:
      HASH_INVOKE_FROM_EVAL(0x2A38BA8B4A0F9DC4LL, apc_fetch);
      break;
    case 3526:
      HASH_INVOKE_FROM_EVAL(0x73210FEAA2EACDC6LL, imagecolorsforindex);
      break;
    case 3528:
      HASH_INVOKE_FROM_EVAL(0x66C3E73210067DC8LL, magickgetimageunits);
      break;
    case 3530:
      HASH_INVOKE_FROM_EVAL(0x3BB701F2BDD0ADCALL, magickgetimageprofile);
      break;
    case 3534:
      HASH_INVOKE_FROM_EVAL(0x3E5C990C32470DCELL, array_combine);
      HASH_INVOKE_FROM_EVAL(0x4AD5B65BCE665DCELL, array_key_exists);
      HASH_INVOKE_FROM_EVAL(0x40C3C7DE46D62DCELL, ob_start);
      break;
    case 3536:
      HASH_INVOKE_FROM_EVAL(0x0E1C354339208DD0LL, imagetypes);
      break;
    case 3541:
      HASH_INVOKE_FROM_EVAL(0x7E1801C8E70D1DD5LL, imagefontwidth);
      break;
    case 3543:
      HASH_INVOKE_FROM_EVAL(0x638690DF6D06FDD7LL, imageconvolution);
      HASH_INVOKE_FROM_EVAL(0x1AE08377A1630DD7LL, mysql_insert_id);
      break;
    case 3548:
      HASH_INVOKE_FROM_EVAL(0x5EBE067E3FAECDDCLL, ob_gzhandler);
      HASH_INVOKE_FROM_EVAL(0x2497295AC9F72DDCLL, stream_set_blocking);
      break;
    case 3549:
      HASH_INVOKE_FROM_EVAL(0x3B00B916C3682DDDLL, ctype_upper);
      break;
    case 3560:
      HASH_INVOKE_FROM_EVAL(0x47A4BA8616D02DE8LL, restore_exception_handler);
      break;
    case 3564:
      HASH_INVOKE_FROM_EVAL(0x5B51DD18C3E13DECLL, openssl_x509_parse);
      HASH_INVOKE_FROM_EVAL(0x5ABB7486CE861DECLL, array_merge_recursive);
      break;
    case 3567:
      HASH_INVOKE_FROM_EVAL(0x0BB22147ADADDDEFLL, pfsockopen);
      HASH_INVOKE_FROM_EVAL(0x72293DCE8CC4BDEFLL, htmlspecialchars);
      break;
    case 3571:
      HASH_INVOKE_FROM_EVAL(0x7AE1BE187F18FDF3LL, fgets);
      break;
    case 3572:
      HASH_INVOKE_FROM_EVAL(0x73B30E65808A6DF4LL, ctype_xdigit);
      HASH_INVOKE_FROM_EVAL(0x5046A0D9DFDB5DF4LL, strcspn);
      break;
    case 3575:
      HASH_INVOKE_FROM_EVAL(0x23E563F1EC919DF7LL, hphp_splfileinfo_getpathname);
      break;
    case 3576:
      HASH_INVOKE_FROM_EVAL(0x5E43280BC8DD1DF8LL, magicktrimimage);
      break;
    case 3579:
      HASH_INVOKE_FROM_EVAL(0x47C62D58B0B65DFBLL, thrift_protocol_write_binary);
      break;
    case 3580:
      HASH_INVOKE_FROM_EVAL(0x0432ED7109BBCDFCLL, oci_cancel);
      break;
    case 3582:
      HASH_INVOKE_FROM_EVAL(0x21F24104004CFDFELL, evhttp_post);
      HASH_INVOKE_FROM_EVAL(0x072690BF719D7DFELL, hphp_recursivedirectoryiterator_rewind);
      break;
    case 3586:
      HASH_INVOKE_FROM_EVAL(0x7829D2171DFBFE02LL, magickgetimagegamma);
      break;
    case 3596:
      HASH_INVOKE_FROM_EVAL(0x3AD6E084483B2E0CLL, array_udiff_assoc);
      break;
    case 3597:
      HASH_INVOKE_FROM_EVAL(0x5EB0A2F93E650E0DLL, array_diff_key);
      HASH_INVOKE_FROM_EVAL(0x756B92411E7FBE0DLL, stream_get_wrappers);
      break;
    case 3598:
      HASH_INVOKE_FROM_EVAL(0x5230E4C9D8D64E0ELL, highlight_string);
      break;
    case 3602:
      HASH_INVOKE_FROM_EVAL(0x05FAA2085D94FE12LL, urlencode);
      HASH_INVOKE_FROM_EVAL(0x76636D0F0C090E12LL, curl_copy_handle);
      break;
    case 3604:
      HASH_INVOKE_FROM_EVAL(0x41E394B12170BE14LL, socket_send);
      HASH_INVOKE_FROM_EVAL(0x3192209D50C1FE14LL, pixelsetalpha);
      break;
    case 3605:
      HASH_INVOKE_FROM_EVAL(0x525F197D74423E15LL, get_resource_type);
      break;
    case 3607:
      HASH_INVOKE_FROM_EVAL(0x0F5759A501FAFE17LL, imagecreatefromgd2part);
      HASH_INVOKE_FROM_EVAL(0x3D13FD5FE3AF6E17LL, imagestringup);
      break;
    case 3609:
      HASH_INVOKE_FROM_EVAL(0x4A694B42B21A9E19LL, destroymagickwand);
      break;
    case 3611:
      HASH_INVOKE_FROM_EVAL(0x7FA0B63054221E1BLL, magickrollimage);
      break;
    case 3616:
      HASH_INVOKE_FROM_EVAL(0x7BDA47B5C47EAE20LL, fread);
      break;
    case 3617:
      HASH_INVOKE_FROM_EVAL(0x5B7F218FA08D8E21LL, imagefilledellipse);
      break;
    case 3621:
      HASH_INVOKE_FROM_EVAL(0x1C6246FA51EBDE25LL, hphp_get_static_property);
      break;
    case 3624:
      HASH_INVOKE_FROM_EVAL(0x3456885FF0679E28LL, lchown);
      break;
    case 3625:
      HASH_INVOKE_FROM_EVAL(0x73FE5C79E14A0E29LL, pixelsetbluequantum);
      break;
    case 3629:
      HASH_INVOKE_FROM_EVAL(0x7817FA38BAAEFE2DLL, fsockopen);
      break;
    case 3630:
      HASH_INVOKE_FROM_EVAL(0x3E62C1A48E9EEE2ELL, hphp_splfileinfo_getsize);
      break;
    case 3634:
      HASH_INVOKE_FROM_EVAL(0x000AAF93F814AE32LL, drawsetvectorgraphics);
      break;
    case 3635:
      HASH_INVOKE_FROM_EVAL(0x38433635F28B4E33LL, is_readable);
      break;
    case 3638:
      HASH_INVOKE_FROM_EVAL(0x2E42ED1E15CCFE36LL, mysql_affected_rows);
      break;
    case 3642:
      HASH_INVOKE_FROM_EVAL(0x6E2CF6ECA0987E3ALL, get_headers);
      HASH_INVOKE_FROM_EVAL(0x13048F0A79F7CE3ALL, magicksetsamplingfactors);
      break;
    case 3648:
      HASH_INVOKE_FROM_EVAL(0x11681FDE841D0E40LL, drawskewy);
      break;
    case 3650:
      HASH_INVOKE_FROM_EVAL(0x160B01F095B20E42LL, mb_output_handler);
      break;
    case 3654:
      HASH_INVOKE_FROM_EVAL(0x7F4C1DF551150E46LL, pixelgetnextiteratorrow);
      break;
    case 3660:
      HASH_INVOKE_FROM_EVAL(0x1EEBDFD62B6BEE4CLL, mcrypt_module_get_algo_block_size);
      break;
    case 3661:
      HASH_INVOKE_FROM_EVAL(0x261E9B559C495E4DLL, oci_set_prefetch);
      break;
    case 3663:
      HASH_INVOKE_FROM_EVAL(0x62C934CD93938E4FLL, magickimplodeimage);
      break;
    case 3664:
      HASH_INVOKE_FROM_EVAL(0x4022005DE7E24E50LL, openssl_pkcs7_sign);
      break;
    case 3668:
      HASH_INVOKE_FROM_EVAL(0x6BF155774D546E54LL, define_syslog_variables);
      HASH_INVOKE_FROM_EVAL(0x7B6BF544EB420E54LL, hphp_recursivedirectoryiterator_haschildren);
      break;
    case 3671:
      HASH_INVOKE_FROM_EVAL(0x2DEF52641933CE57LL, magickgetimagemattecolor);
      break;
    case 3675:
      HASH_INVOKE_FROM_EVAL(0x299F1A5895461E5BLL, curl_multi_close);
      break;
    case 3676:
      HASH_INVOKE_FROM_EVAL(0x532D0D905CE60E5CLL, posix_times);
      break;
    case 3677:
      HASH_INVOKE_FROM_EVAL(0x38373F6643B14E5DLL, ldap_parse_reference);
      break;
    case 3681:
      HASH_INVOKE_FROM_EVAL(0x593EA675D239CE61LL, ldap_first_reference);
      break;
    case 3682:
      HASH_INVOKE_FROM_EVAL(0x7639C74DBC4F4E62LL, array_splice);
      break;
    case 3683:
      HASH_INVOKE_FROM_EVAL(0x4B6FE37D66784E63LL, imagesy);
      HASH_INVOKE_FROM_EVAL(0x5697E5F6AAF47E63LL, mb_http_input);
      break;
    case 3684:
      HASH_INVOKE_FROM_EVAL(0x4F0DF8BBC4340E64LL, stream_socket_server);
      break;
    case 3686:
      HASH_INVOKE_FROM_EVAL(0x6CB3DEB458A2DE66LL, apc_bin_load);
      break;
    case 3688:
      HASH_INVOKE_FROM_EVAL(0x5B1DFB89BFC1CE68LL, realpath);
      break;
    case 3689:
      HASH_INVOKE_FROM_EVAL(0x24B836D2C79D0E69LL, magickgetimagepixels);
      break;
    case 3690:
      HASH_INVOKE_FROM_EVAL(0x2F9816D9A2B2CE6ALL, mysql_set_charset);
      HASH_INVOKE_FROM_EVAL(0x25C0C5E961AFDE6ALL, xmlwriter_full_end_element);
      break;
    case 3693:
      HASH_INVOKE_FROM_EVAL(0x714001ABB0D76E6DLL, magickgetinterlacescheme);
      break;
    case 3695:
      HASH_INVOKE_FROM_EVAL(0x7E6223D0CF184E6FLL, magickqueryformats);
      break;
    case 3697:
      HASH_INVOKE_FROM_EVAL(0x6AC126DCE941FE71LL, memory_get_peak_usage);
      break;
    case 3700:
      HASH_INVOKE_FROM_EVAL(0x47D0510206B89E74LL, ini_restore);
      break;
    case 3701:
      HASH_INVOKE_FROM_EVAL(0x4EC7C66593DDEE75LL, sql_regcase);
      break;
    case 3702:
      HASH_INVOKE_FROM_EVAL(0x36E9EC047FC73E76LL, mb_convert_encoding);
      break;
    case 3703:
      HASH_INVOKE_FROM_EVAL(0x12B7B2D835B80E77LL, chmod);
      break;
    case 3706:
      HASH_INVOKE_FROM_EVAL(0x6A3D9F8EDB005E7ALL, flush);
      break;
    case 3708:
      HASH_INVOKE_FROM_EVAL(0x4D9C5B9A944CCE7CLL, convert_uudecode);
      break;
    case 3710:
      HASH_INVOKE_FROM_EVAL(0x51060D186C703E7ELL, headers_list);
      break;
    case 3713:
      HASH_INVOKE_FROM_EVAL(0x0ECFC3676B4FDE81LL, chr);
      break;
    case 3714:
      HASH_INVOKE_FROM_EVAL(0x379F7BF525FF1E82LL, magicksetimagecolorspace);
      break;
    case 3715:
      HASH_INVOKE_FROM_EVAL(0x724011CF7C31AE83LL, sqrt);
      break;
    case 3716:
      HASH_INVOKE_FROM_EVAL(0x1765A63835CC4E84LL, drawgetfontfamily);
      break;
    case 3717:
      HASH_INVOKE_FROM_EVAL(0x4710320ED6638E85LL, rename_function);
      break;
    case 3720:
      HASH_INVOKE_FROM_EVAL(0x1569DCC552EE8E88LL, cosh);
      break;
    case 3722:
      HASH_INVOKE_FROM_EVAL(0x15C9E5C16374EE8ALL, gzclose);
      break;
    case 3726:
      HASH_INVOKE_FROM_EVAL(0x29A2FBD427647E8ELL, mysql_connect);
      break;
    case 3728:
      HASH_INVOKE_FROM_EVAL(0x33D6CC3959D3CE90LL, clearmagickwand);
      break;
    case 3731:
      HASH_INVOKE_FROM_EVAL(0x5E968924197F5E93LL, mcrypt_ofb);
      HASH_INVOKE_FROM_EVAL(0x37A9E8F91C33EE93LL, magickborderimage);
      break;
    case 3735:
      HASH_INVOKE_FROM_EVAL(0x6254E9BDC11F3E97LL, imagecreatefromgd2);
      break;
    case 3739:
      HASH_INVOKE_FROM_EVAL(0x2A019CAA1188BE9BLL, preg_grep);
      break;
    case 3742:
      HASH_INVOKE_FROM_EVAL(0x76EBE919625D8E9ELL, openssl_pkcs12_export);
      break;
    case 3743:
      HASH_INVOKE_FROM_EVAL(0x7CFF820207DC6E9FLL, debug_backtrace);
      break;
    case 3744:
      HASH_INVOKE_FROM_EVAL(0x37C5AF6E7E8B5EA0LL, fputs);
      break;
    case 3747:
      HASH_INVOKE_FROM_EVAL(0x6467FFB910B8BEA3LL, magickspliceimage);
      break;
    case 3752:
      HASH_INVOKE_FROM_EVAL(0x3C6190E9534F3EA8LL, ebcdic2ascii);
      break;
    case 3753:
      HASH_INVOKE_FROM_EVAL(0x308D76DB12424EA9LL, magicksetimageindex);
      break;
    case 3755:
      HASH_INVOKE_FROM_EVAL(0x632D4FC346797EABLL, pixelgetexceptionstring);
      break;
    case 3758:
      HASH_INVOKE_FROM_EVAL(0x5772A0B8C16DAEAELL, posix_setuid);
      break;
    case 3759:
      HASH_INVOKE_FROM_EVAL(0x12D83A92EFB0EEAFLL, xmlwriter_open_uri);
      break;
    case 3761:
      HASH_INVOKE_FROM_EVAL(0x33FE101882726EB1LL, proc_close);
      break;
    case 3763:
      HASH_INVOKE_FROM_EVAL(0x7DB9D839ACE0DEB3LL, natsort);
      HASH_INVOKE_FROM_EVAL(0x7379B5B97EC2EEB3LL, hypot);
      break;
    case 3767:
      HASH_INVOKE_FROM_EVAL(0x58B9EFA0FB35FEB7LL, stream_filter_prepend);
      break;
    case 3769:
      HASH_INVOKE_FROM_EVAL(0x2A483AD7A3D07EB9LL, magickgetwandsize);
      break;
    case 3770:
      HASH_INVOKE_FROM_EVAL(0x1F5B2728DE875EBALL, magicksetimage);
      break;
    case 3776:
      HASH_INVOKE_FROM_EVAL(0x2475D7045D9DEEC0LL, magicksetimagecompression);
      HASH_INVOKE_FROM_EVAL(0x495316E596537EC0LL, imagefttext);
      break;
    case 3778:
      HASH_INVOKE_FROM_EVAL(0x4CDD0B7BF826FEC2LL, rewinddir);
      break;
    case 3780:
      HASH_INVOKE_FROM_EVAL(0x7052903F1B17AEC4LL, parse_str);
      break;
    case 3781:
      HASH_INVOKE_FROM_EVAL(0x7D69B3537C353EC5LL, hphp_splfileinfo_isfile);
      break;
    case 3785:
      HASH_INVOKE_FROM_EVAL(0x58C8DCAAE5B7CEC9LL, get_cfg_var);
      break;
    case 3786:
      HASH_INVOKE_FROM_EVAL(0x08E6C1CD3AC64ECALL, hphp_splfileinfo_gettype);
      HASH_INVOKE_FROM_EVAL(0x1AA83A1057BE6ECALL, mysql_field_len);
      break;
    case 3794:
      HASH_INVOKE_FROM_EVAL(0x3CCD09EC3511CED2LL, apd_stop_trace);
      break;
    case 3798:
      HASH_INVOKE_FROM_EVAL(0x134B37520683DED6LL, imagesetbrush);
      break;
    case 3800:
      HASH_INVOKE_FROM_EVAL(0x338D9D95095D1ED8LL, magicksetimagedelay);
      break;
    case 3801:
      HASH_INVOKE_FROM_EVAL(0x7F802A06996BBED9LL, apd_set_browser_trace);
      break;
    case 3802:
      HASH_INVOKE_FROM_EVAL(0x29E2771785CCBEDALL, magickgettextdescent);
      break;
    case 3803:
      HASH_INVOKE_FROM_EVAL(0x16331E18B5CD8EDBLL, timezone_open);
      HASH_INVOKE_FROM_EVAL(0x1340509769275EDBLL, magickgetimagecompression);
      break;
    case 3808:
      HASH_INVOKE_FROM_EVAL(0x7A1C6E429399CEE0LL, iconv_set_encoding);
      break;
    case 3811:
      HASH_INVOKE_FROM_EVAL(0x28A98134BD97BEE3LL, mb_regex_encoding);
      HASH_INVOKE_FROM_EVAL(0x0E1368A3BDFE6EE3LL, hphp_recursiveiteratoriterator_rewind);
      break;
    case 3812:
      HASH_INVOKE_FROM_EVAL(0x5B6FF42ACB2FBEE4LL, getmyuid);
      break;
    case 3813:
      HASH_INVOKE_FROM_EVAL(0x367CFD20B4446EE5LL, is_array);
      break;
    case 3816:
      HASH_INVOKE_FROM_EVAL(0x6CB6650E66CE4EE8LL, magicksetimagebordercolor);
      HASH_INVOKE_FROM_EVAL(0x32B3951DFD2B9EE8LL, hphp_directoryiterator_isdot);
      break;
    case 3819:
      HASH_INVOKE_FROM_EVAL(0x72882DBF2D49CEEBLL, set_magic_quotes_runtime);
      break;
    case 3824:
      HASH_INVOKE_FROM_EVAL(0x7DFF9707F1CD9EF0LL, dangling_server_proxy_old_request);
      break;
    case 3832:
      HASH_INVOKE_FROM_EVAL(0x33FD10AC81146EF8LL, thrift_protocol_read_binary);
      break;
    case 3833:
      HASH_INVOKE_FROM_EVAL(0x200FC256EB093EF9LL, gettimeofday);
      break;
    case 3835:
      HASH_INVOKE_FROM_EVAL(0x6D450F078F02BEFBLL, apd_continue);
      break;
    case 3837:
      HASH_INVOKE_FROM_EVAL(0x0CF27A6BC84CEEFDLL, openssl_get_publickey);
      HASH_INVOKE_FROM_EVAL(0x283E167EB3F04EFDLL, posix_getgid);
      break;
    case 3840:
      HASH_INVOKE_FROM_EVAL(0x09637D7CA2E33F00LL, fgetc);
      break;
    case 3841:
      HASH_INVOKE_FROM_EVAL(0x66137942508EBF01LL, date_create);
      HASH_INVOKE_FROM_EVAL(0x7B6A0D7510184F01LL, mysql_fetch_assoc);
      break;
    case 3842:
      HASH_INVOKE_FROM_EVAL(0x78A02A603FA6FF02LL, magickreducenoiseimage);
      break;
    case 3845:
      HASH_INVOKE_FROM_EVAL(0x6842585E79988F05LL, magickmosaicimages);
      break;
    case 3846:
      HASH_INVOKE_FROM_EVAL(0x1D3B08AA0AF50F06LL, gettype);
      HASH_INVOKE_FROM_EVAL(0x6692475BA65A2F06LL, imagearc);
      break;
    case 3851:
      HASH_INVOKE_FROM_EVAL(0x7756593AAC1F6F0BLL, imagecreatefromstring);
      break;
    case 3855:
      HASH_INVOKE_FROM_EVAL(0x61E7A36CA7FF5F0FLL, drawsetcliprule);
      HASH_INVOKE_FROM_EVAL(0x4BD54A631F665F0FLL, drawpathcurvetosmoothabsolute);
      break;
    case 3856:
      HASH_INVOKE_FROM_EVAL(0x700A75BF904DAF10LL, magickgetcharwidth);
      break;
    case 3858:
      HASH_INVOKE_FROM_EVAL(0x042492DDA48C4F12LL, gzdeflate);
      break;
    case 3860:
      HASH_INVOKE_FROM_EVAL(0x04525BA2AE51EF14LL, date_sun_info);
      break;
    case 3861:
      HASH_INVOKE_FROM_EVAL(0x12F09EAED9078F15LL, mysql_fetch_field);
      break;
    case 3862:
      HASH_INVOKE_FROM_EVAL(0x23B7D9E4EC992F16LL, stream_get_line);
      HASH_INVOKE_FROM_EVAL(0x38664EFE3E0A0F16LL, json_decode);
      break;
    case 3867:
      HASH_INVOKE_FROM_EVAL(0x27A4633381195F1BLL, chown);
      break;
    case 3871:
      HASH_INVOKE_FROM_EVAL(0x7C0C145EFE0EBF1FLL, defined);
      break;
    case 3872:
      HASH_INVOKE_FROM_EVAL(0x2C4206A0BD904F20LL, hphp_splfileobject_fseek);
      break;
    case 3873:
      HASH_INVOKE_FROM_EVAL(0x4282496A4BF42F21LL, php_uname);
      HASH_INVOKE_FROM_EVAL(0x77EC28645855AF21LL, magicksetcompressionquality);
      HASH_INVOKE_FROM_EVAL(0x1FF5B9A4FC78BF21LL, drawsettextantialias);
      break;
    case 3876:
      HASH_INVOKE_FROM_EVAL(0x05BD68F1D09CEF24LL, array_count_values);
      HASH_INVOKE_FROM_EVAL(0x5FA07E8B63BEAF24LL, mcrypt_enc_get_modes_name);
      break;
    case 3879:
      HASH_INVOKE_FROM_EVAL(0x4BAA5B688E6F6F27LL, gd_info);
      break;
    case 3884:
      HASH_INVOKE_FROM_EVAL(0x035EFF9E1757DF2CLL, http_build_query);
      break;
    case 3890:
      HASH_INVOKE_FROM_EVAL(0x78257F34467BDF32LL, drawsetstrokedasharray);
      HASH_INVOKE_FROM_EVAL(0x2B66EACB77AE9F32LL, print_r);
      break;
    case 3897:
      HASH_INVOKE_FROM_EVAL(0x0D4446B2DBC8EF39LL, hphp_splfileinfo_getinode);
      HASH_INVOKE_FROM_EVAL(0x3E9146C06AAEFF39LL, magicksetimagecompressionquality);
      HASH_INVOKE_FROM_EVAL(0x496CF4113CEA8F39LL, magicksetimagefilename);
      break;
    case 3899:
      HASH_INVOKE_FROM_EVAL(0x7EE74F798791CF3BLL, magickedgeimage);
      break;
    case 3903:
      HASH_INVOKE_FROM_EVAL(0x1A9EFDD653DB8F3FLL, pcntl_wstopsig);
      break;
    case 3906:
      HASH_INVOKE_FROM_EVAL(0x3B46305DA1154F42LL, drawpopclippath);
      break;
    case 3909:
      HASH_INVOKE_FROM_EVAL(0x4E36A077234B8F45LL, pixelgetblack);
      HASH_INVOKE_FROM_EVAL(0x79265AADD9A8AF45LL, mcrypt_cbc);
      HASH_INVOKE_FROM_EVAL(0x5D3A31AB0E326F45LL, crc32);
      break;
    case 3910:
      HASH_INVOKE_FROM_EVAL(0x079EA27F72594F46LL, gzgets);
      break;
    case 3920:
      HASH_INVOKE_FROM_EVAL(0x7978A278AEAFAF50LL, pixelgetmagenta);
      break;
    case 3926:
      HASH_INVOKE_FROM_EVAL(0x621590803EC88F56LL, imageline);
      break;
    case 3928:
      HASH_INVOKE_FROM_EVAL(0x0551AAE8F1A6FF58LL, magicklevelimage);
      break;
    case 3929:
      HASH_INVOKE_FROM_EVAL(0x38246B6BDE246F59LL, magickgetimagedispose);
      break;
    case 3931:
      HASH_INVOKE_FROM_EVAL(0x24F698A8A4B5AF5BLL, imagecolordeallocate);
      HASH_INVOKE_FROM_EVAL(0x76418F884500DF5BLL, stream_socket_enable_crypto);
      break;
    case 3933:
      HASH_INVOKE_FROM_EVAL(0x07FF92CF46DDFF5DLL, imagepsfreefont);
      break;
    case 3936:
      HASH_INVOKE_FROM_EVAL(0x4F1D2858AD31AF60LL, imagecreatefromgd);
      break;
    case 3938:
      HASH_INVOKE_FROM_EVAL(0x463A00D839C51F62LL, oci_fetch_array);
      break;
    case 3939:
      HASH_INVOKE_FROM_EVAL(0x1FFD204252F60F63LL, magicksetimageprofile);
      break;
    case 3940:
      HASH_INVOKE_FROM_EVAL(0x280051555A21DF64LL, rename);
      break;
    case 3942:
      HASH_INVOKE_FROM_EVAL(0x6FFF1304EA444F66LL, drawsetstrokemiterlimit);
      break;
    case 3943:
      HASH_INVOKE_FROM_EVAL(0x319407AC92912F67LL, ereg);
      break;
    case 3946:
      HASH_INVOKE_FROM_EVAL(0x1670096FDE27AF6ALL, rewind);
      break;
    case 3948:
      HASH_INVOKE_FROM_EVAL(0x23D5E9E53D11BF6CLL, gmdate);
      break;
    case 3950:
      HASH_INVOKE_FROM_EVAL(0x3A56371CDDEA0F6ELL, gzgetc);
      break;
    case 3951:
      HASH_INVOKE_FROM_EVAL(0x42C4EC9D9F782F6FLL, htmlentities);
      break;
    case 3952:
      HASH_INVOKE_FROM_EVAL(0x68C257B62A36EF70LL, magicksetimagebackgroundcolor);
      HASH_INVOKE_FROM_EVAL(0x71557D108E5C0F70LL, xml_set_object);
      break;
    case 3954:
      HASH_INVOKE_FROM_EVAL(0x4B22EF06BAA83F72LL, version_compare);
      break;
    case 3956:
      HASH_INVOKE_FROM_EVAL(0x18BC9BF6D1E3CF74LL, magickpreviewimages);
      break;
    case 3961:
      HASH_INVOKE_FROM_EVAL(0x4BE9D91DD8624F79LL, money_format);
      break;
    case 3962:
      HASH_INVOKE_FROM_EVAL(0x7B0E6DB649084F7ALL, clearstatcache);
      break;
    case 3966:
      HASH_INVOKE_FROM_EVAL(0x7064BEBF508F3F7ELL, socket_read);
      break;
    case 3968:
      HASH_INVOKE_FROM_EVAL(0x63F18DE0DB807F80LL, magickqueryfonts);
      break;
    case 3972:
      HASH_INVOKE_FROM_EVAL(0x14402B01D00E9F84LL, magicksteganoimage);
      break;
    case 3973:
      HASH_INVOKE_FROM_EVAL(0x7EF68B9A55222F85LL, wandgetexceptionstring);
      break;
    case 3974:
      HASH_INVOKE_FROM_EVAL(0x44CE4DB1CE7E9F86LL, flock);
      break;
    case 3977:
      HASH_INVOKE_FROM_EVAL(0x13F52A829BAC0F89LL, timezone_identifiers_list);
      break;
    case 3979:
      HASH_INVOKE_FROM_EVAL(0x2755DD4112AA5F8BLL, magicksampleimage);
      HASH_INVOKE_FROM_EVAL(0x3703D22147C24F8BLL, pixelsetcyan);
      break;
    case 3982:
      HASH_INVOKE_FROM_EVAL(0x7A8F1104B0CCDF8ELL, phpcredits);
      break;
    case 3983:
      HASH_INVOKE_FROM_EVAL(0x4A6C46DC7FE29F8FLL, hphp_recursivedirectoryiterator_getchildren);
      break;
    case 3985:
      HASH_INVOKE_FROM_EVAL(0x78463112BE739F91LL, connection_timeout);
      break;
    case 3986:
      HASH_INVOKE_FROM_EVAL(0x288D61E7DE28AF92LL, ucwords);
      break;
    case 3988:
      HASH_INVOKE_FROM_EVAL(0x76B9D87BC7F02F94LL, preg_match);
      break;
    case 3989:
      HASH_INVOKE_FROM_EVAL(0x40D620CBA0D41F95LL, opendir);
      break;
    case 3991:
      HASH_INVOKE_FROM_EVAL(0x35117886C885DF97LL, hphp_recursivedirectoryiterator_getsubpathname);
      HASH_INVOKE_FROM_EVAL(0x6F9651265C096F97LL, magickreadimages);
      break;
    case 3992:
      HASH_INVOKE_FROM_EVAL(0x0293F60B46511F98LL, drawsetfontstretch);
      HASH_INVOKE_FROM_EVAL(0x66F1F0DB16C82F98LL, imagesavealpha);
      break;
    case 3994:
      HASH_INVOKE_FROM_EVAL(0x2B7CAC006AF27F9ALL, fflush);
      break;
    case 3997:
      HASH_INVOKE_FROM_EVAL(0x0AD6DE8829773F9DLL, apc_compile_file);
      break;
    case 4004:
      HASH_INVOKE_FROM_EVAL(0x0E7E9AA21AE99FA4LL, hphp_recursiveiteratoriterator_current);
      break;
    case 4006:
      HASH_INVOKE_FROM_EVAL(0x0DEEA8C3E3A47FA6LL, read_exif_data);
      break;
    case 4013:
      HASH_INVOKE_FROM_EVAL(0x73A9C0E0C8344FADLL, oci_free_statement);
      break;
    case 4014:
      HASH_INVOKE_FROM_EVAL(0x64D269A505D51FAELL, array_map);
      break;
    case 4015:
      HASH_INVOKE_FROM_EVAL(0x03979AACDBB24FAFLL, mailparse_msg_get_part);
      break;
    case 4016:
      HASH_INVOKE_FROM_EVAL(0x4A0B5F4676578FB0LL, imagecolorresolvealpha);
      break;
    case 4017:
      HASH_INVOKE_FROM_EVAL(0x0F78ECF42C30DFB1LL, array_chunk);
      break;
    case 4020:
      HASH_INVOKE_FROM_EVAL(0x3900FDF1C97BEFB4LL, drawrotate);
      break;
    case 4022:
      HASH_INVOKE_FROM_EVAL(0x56C0CCB57BB6EFB6LL, magicksetimageunits);
      HASH_INVOKE_FROM_EVAL(0x2B451EF5D52C4FB6LL, array_diff);
      break;
    case 4023:
      HASH_INVOKE_FROM_EVAL(0x6465CD999F4C5FB7LL, hphp_invoke_method);
      break;
    case 4024:
      HASH_INVOKE_FROM_EVAL(0x6DB2DB341ECF3FB8LL, file_exists);
      break;
    case 4026:
      HASH_INVOKE_FROM_EVAL(0x0664323CB1CC2FBALL, imagecolorset);
      break;
    case 4031:
      HASH_INVOKE_FROM_EVAL(0x70B38AB9EAE16FBFLL, ini_set);
      break;
    case 4034:
      HASH_INVOKE_FROM_EVAL(0x6CA22E62D4762FC2LL, magickpainttransparentimage);
      break;
    case 4037:
      HASH_INVOKE_FROM_EVAL(0x38498DD4C28D0FC5LL, hphp_splfileinfo_getatime);
      break;
    case 4043:
      HASH_INVOKE_FROM_EVAL(0x38237A4515F42FCBLL, array_pad);
      break;
    case 4045:
      HASH_INVOKE_FROM_EVAL(0x474566F3A2BE0FCDLL, mcrypt_enc_is_block_algorithm);
      break;
    case 4046:
      HASH_INVOKE_FROM_EVAL(0x042193C97C65FFCELL, magickwaveimage);
      break;
    case 4047:
      HASH_INVOKE_FROM_EVAL(0x3A3CFC1F001A6FCFLL, magickreadimagefile);
      break;
    case 4048:
      HASH_INVOKE_FROM_EVAL(0x2EAA47FA6C3FEFD0LL, drawgetstrokealpha);
      HASH_INVOKE_FROM_EVAL(0x53DB5D0490C51FD0LL, xhprof_sample_disable);
      break;
    case 4052:
      HASH_INVOKE_FROM_EVAL(0x4970B72A182E4FD4LL, readdir);
      break;
    case 4053:
      HASH_INVOKE_FROM_EVAL(0x751283FE764CAFD5LL, mysql_select_db);
      break;
    case 4054:
      HASH_INVOKE_FROM_EVAL(0x7FC00035D14B9FD6LL, apc_delete_file);
      break;
    case 4056:
      HASH_INVOKE_FROM_EVAL(0x4234F2B59531FFD8LL, posix_getlogin);
      break;
    case 4061:
      HASH_INVOKE_FROM_EVAL(0x4EDEDA4278CD3FDDLL, magickchopimage);
      break;
    case 4062:
      HASH_INVOKE_FROM_EVAL(0x7F5FC3CAF8CE9FDELL, gzcompress);
      HASH_INVOKE_FROM_EVAL(0x72925D2DF7E61FDELL, drawpathcurvetoquadraticbeziersmoothrelative);
      break;
    case 4071:
      HASH_INVOKE_FROM_EVAL(0x217067889854CFE7LL, xmlwriter_start_dtd);
      break;
    case 4072:
      HASH_INVOKE_FROM_EVAL(0x4D7AEC41CFD73FE8LL, hphp_recursivedirectoryiterator_getsubpath);
      break;
    case 4075:
      HASH_INVOKE_FROM_EVAL(0x67D1EE05DFE71FEBLL, hphp_splfileobject_getcvscontrol);
      break;
    case 4079:
      HASH_INVOKE_FROM_EVAL(0x00EEEE9C6CEA5FEFLL, xmlwriter_write_element_ns);
      break;
    case 4080:
      HASH_INVOKE_FROM_EVAL(0x1189B7C4F4874FF0LL, php_check_syntax);
      break;
    case 4086:
      HASH_INVOKE_FROM_EVAL(0x25FCE64E12505FF6LL, magicksetimagerenderingintent);
      break;
    case 4090:
      HASH_INVOKE_FROM_EVAL(0x13EE24AF67113FFALL, ob_end_flush);
      break;
    case 4091:
      HASH_INVOKE_FROM_EVAL(0x68E499A4D75BDFFBLL, ascii2ebcdic);
      HASH_INVOKE_FROM_EVAL(0x63BE4CEF1FC47FFBLL, imagefill);
      break;
    case 4094:
      HASH_INVOKE_FROM_EVAL(0x32F8747E480CCFFELL, connection_status);
      break;
    default:
      break;
  }
  return invoke_failed(s, Array(), -1, fatal);
}

///////////////////////////////////////////////////////////////////////////////
}
